@rom
@start
@set-handle-unsupported-macros=1

; Loading Screen
;
; #UDGTABLE
; { =h Sherlock Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$0F,$FF,$FF,$3F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FE,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$B8,$38,$1F,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$1F,$FF,$FF,$BF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FC,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$BC,$00,$FF,$FF,$E0,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$07,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$1F,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FC,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$3F,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$67,$DE,$03,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$03,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$3F,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FF,$F8,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$1F,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$DE,$07,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$7F,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$7F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FF,$F8,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$3F,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$0F,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FC,$3F,$0F,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$DF,$FF,$FF,$F0,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$7F,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$0D,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E1,$00,$00,$00,$00,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E1,$FF,$E1,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$F0,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$38,$7F,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$1B,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E1,$00,$00,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$87,$FF,$FC,$7F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$FE,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$E0,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$38,$7E,$3F,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$07,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$61,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$61,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$9C,$30,$1C,$38,$1C,$20,$70,$E0,$E0,$0E,$70,$18,$70,$E3,$01,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4840 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$80,$78,$1C,$38,$1C,$80,$73,$80,$E0,$3C,$3C,$78,$10,$E7,$81,$77,$9F,$00,$00,$00,$00,$00,$00 ;
 $4860 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$E0,$1E,$3E,$7C,$3F,$E0,$F8,$F1,$FF,$07,$E0,$0F,$C1,$F1,$A9,$EE,$4F,$54,$00,$00,$00,$00,$00 ;
 $4880 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$3F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$69,$3F,$F6,$75,$55,$40,$00,$00,$00,$00,$00 ;
 $48A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$5F,$55,$55,$55,$55,$55,$55,$56,$E9,$3D,$87,$79,$D5,$55,$00,$00,$00,$00,$00,$00 ;
 $48C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$C4,$57,$6A,$E8,$80,$16,$6D,$7A,$2F,$9F,$23,$D0,$00,$00,$00,$00,$00,$00,$00 ;
 $48E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$00,$00,$00,$00,$F1,$C6,$59,$7F,$FF,$2A,$75,$54,$00,$00,$00,$00,$00,$00,$00 ;
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$9E,$10,$1C,$38,$1C,$00,$71,$E0,$E0,$1C,$38,$38,$30,$E6,$01,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$80,$7C,$1C,$38,$1C,$00,$71,$C0,$E1,$3C,$3C,$78,$10,$E3,$81,$6A,$7F,$00,$00,$00,$00,$00,$00 ;
 $4960 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$C0,$3E,$00,$00,$00,$00,$00,$00,$00,$01,$80,$03,$00,$02,$F3,$DD,$9D,$54,$00,$00,$00,$00,$00 ;
 $4980 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$92,$BD,$C9,$F5,$55,$00,$00,$00,$00,$00,$00 ;
 $49A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$5F,$55,$55,$55,$55,$55,$55,$55,$D2,$BF,$0F,$E3,$55,$55,$00,$00,$00,$00,$00,$00 ;
 $49C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$A6,$D2,$8E,$C8,$80,$0C,$97,$F4,$DF,$FE,$01,$D0,$00,$00,$00,$00,$00,$00,$00 ;
 $49E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$00,$00,$00,$00,$3C,$07,$5E,$FF,$EC,$50,$FD,$54,$00,$00,$00,$00,$00,$00,$00 ;
 $4A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$8F,$10,$1C,$38,$1C,$00,$77,$C0,$E0,$1C,$38,$38,$30,$EC,$01,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$80,$3C,$1C,$38,$1C,$20,$71,$C0,$E1,$1C,$38,$38,$10,$E3,$81,$BC,$FF,$80,$00,$00,$00,$00,$00 ;
 $4A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$80,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$4F,$F2,$75,$54,$00,$00,$00,$00,$00 ;
 $4A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$65,$5F,$B3,$55,$55,$00,$00,$00,$00,$00,$00 ;
 $4AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$5F,$55,$55,$55,$55,$55,$55,$5B,$ED,$5E,$57,$CF,$55,$55,$00,$00,$00,$00,$00,$00 ;
 $4AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$C5,$52,$8A,$88,$80,$1F,$AB,$D9,$7D,$FC,$A1,$D0,$00,$00,$00,$00,$00,$00,$00 ;
 $4AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$00,$00,$00,$00,$0E,$0F,$6F,$FF,$D9,$A3,$5D,$50,$00,$00,$00,$00,$00,$00,$00 ;
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$87,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$8F,$80,$1F,$F8,$1F,$80,$7F,$80,$E0,$1C,$38,$38,$10,$F8,$01,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$80,$3E,$1C,$38,$1C,$20,$71,$C0,$E3,$1C,$38,$38,$30,$E3,$C3,$53,$FF,$C0,$00,$00,$00,$00,$00 ;
 $4B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$80,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$9E,$A4,$D5,$50,$00,$00,$00,$00,$00 ;
 $4B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$8A,$AE,$4E,$35,$55,$00,$00,$00,$00,$00,$00 ;
 $4BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$5F,$55,$55,$55,$55,$55,$55,$77,$96,$DC,$A9,$9D,$55,$55,$00,$00,$00,$00,$00,$00 ;
 $4BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$95,$52,$6A,$EE,$E0,$35,$DF,$A3,$FF,$F8,$47,$54,$00,$00,$00,$00,$00,$00,$00 ;
 $4BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$00,$00,$00,$00,$07,$BF,$2F,$EF,$B3,$D5,$57,$40,$00,$00,$00,$00,$00,$00,$00 ;
*$4C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$8D,$B0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$87,$C0,$1F,$38,$1F,$80,$7E,$00,$E0,$3C,$3C,$78,$10,$FE,$01,$61,$F5,$00,$00,$00,$00,$00,$00 ;
 $4C40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$80,$1E,$1C,$38,$1C,$60,$71,$C0,$E3,$1C,$38,$38,$20,$E1,$C6,$E7,$AF,$C0,$00,$00,$00,$00,$00 ;
 $4C60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$80,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$EE,$7F,$DB,$D5,$50,$00,$00,$00,$00,$00 ;
 $4C80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0B,$05,$5C,$1D,$75,$55,$00,$00,$00,$00,$00,$00 ;
 $4CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$5F,$55,$55,$55,$55,$55,$55,$CF,$2B,$CE,$54,$3F,$55,$55,$00,$00,$00,$00,$00,$00 ;
 $4CC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$00,$00,$00,$00,$00,$62,$DF,$4D,$BF,$F2,$8F,$54,$00,$00,$00,$00,$00,$00,$00 ;
 $4CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$F1,$0A,$00,$00,$00,$00,$01,$FB,$77,$FE,$47,$8D,$57,$40,$00,$00,$00,$00,$00,$00,$00 ;
 $4D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$98,$F0,$3E,$7C,$3F,$E0,$FF,$C1,$F0,$01,$80,$03,$11,$F3,$F1,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$83,$E0,$1E,$38,$1D,$80,$77,$80,$E0,$3C,$3C,$78,$00,$EF,$01,$63,$FD,$00,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$80,$1E,$1C,$38,$1C,$60,$71,$C0,$E7,$1C,$38,$38,$20,$E1,$DB,$9F,$F7,$D0,$00,$00,$00,$00,$00 ;
 $4D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$87,$C0,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$1C,$F7,$27,$55,$50,$00,$00,$00,$00,$00 ;
 $4D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$34,$4A,$9E,$7B,$D5,$55,$00,$00,$00,$00,$00,$00 ;
 $4DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$5F,$55,$55,$55,$55,$55,$55,$3E,$DF,$AE,$A8,$E7,$55,$55,$00,$00,$00,$00,$00,$00 ;
 $4DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$00,$00,$00,$00,$18,$C1,$6D,$97,$FF,$E5,$1D,$55,$00,$00,$00,$00,$00,$00,$00 ;
 $4DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FD,$0A,$00,$00,$00,$00,$00,$2B,$33,$FD,$8F,$5D,$57,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$98,$70,$1C,$38,$1C,$E0,$79,$E0,$E0,$07,$E0,$0F,$B0,$E1,$C1,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$81,$F0,$1E,$38,$1D,$80,$73,$80,$E0,$3C,$3C,$78,$00,$E7,$01,$66,$FD,$00,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$E0,$1E,$1C,$38,$1C,$E0,$70,$E0,$E7,$0E,$70,$18,$60,$E1,$F5,$3D,$C8,$D0,$00,$00,$00,$00,$00 ;
 $4E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$C0,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$DB,$FE,$CD,$55,$40,$00,$00,$00,$00,$00 ;
 $4E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$49,$B5,$7E,$E7,$75,$55,$00,$00,$00,$00,$00,$00 ;
 $4EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$5F,$55,$55,$55,$55,$55,$56,$DD,$7F,$47,$51,$C7,$55,$55,$00,$00,$00,$00,$00,$00 ;
 $4EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$00,$00,$00,$00,$66,$D2,$AA,$2F,$EE,$FA,$B5,$55,$00,$00,$00,$00,$00,$00,$00 ;
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$0A,$00,$00,$00,$00,$00,$1F,$5B,$DF,$16,$2D,$55,$D0,$00,$00,$00,$00,$00,$00,$00 ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$98,$30,$1C,$38,$1C,$60,$70,$E0,$E0,$0E,$70,$1C,$F0,$E1,$81,$61,$55,$00,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$80,$F8,$1C,$38,$1C,$80,$73,$80,$E0,$3C,$3C,$78,$00,$E7,$01,$6D,$7F,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$F8,$1E,$1C,$38,$1D,$E0,$70,$E0,$EF,$0E,$70,$1C,$C0,$E0,$DE,$7F,$B3,$54,$00,$00,$00,$00,$00 ;
 $4F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$86,$F1,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F6,$6F,$B9,$3D,$55,$40,$00,$00,$00,$00,$00 ;
*$4F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$B6,$3A,$E7,$9C,$FF,$55,$00,$00,$00,$00,$00,$00 ;
 $4FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$00,$00,$00,$00,$00,$09,$32,$FD,$97,$A3,$83,$D0,$00,$00,$00,$00,$00,$00,$00 ;
 $4FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0A,$00,$00,$00,$00,$83,$A2,$B4,$DF,$FD,$95,$35,$55,$00,$00,$00,$00,$00,$00,$00 ;
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$8A,$00,$00,$00,$00,$00,$0E,$AD,$DE,$6B,$4D,$55,$D4,$00,$00,$00,$00,$00,$00,$00 ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FC,$1F,$CA,$00,$00,$00,$00,$00,$06,$56,$F8,$D2,$8D,$51,$D4,$00,$00,$00,$00,$00,$00,$00 ;
 $5020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$1B,$50,$05,$5A,$00,$00,$00,$00,$04,$F1,$55,$74,$B5,$54,$0C,$01,$40,$00,$00,$00,$00,$00,$00 ;
 $5040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$2D,$54,$01,$8E,$80,$00,$00,$00,$04,$BF,$FF,$CF,$57,$E0,$00,$05,$00,$00,$00,$00,$00,$00,$00 ;
 $5060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$F5,$53,$F6,$00,$00,$00,$00,$00,$FF,$FF,$55,$55,$00,$15,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$54,$FF,$FF,$FF,$FF,$FE,$FF,$FF,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$05,$5C,$60,$00,$00,$07,$F4,$BF,$D5,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$5F,$80,$00,$01,$FF,$FF,$E7,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FD,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$F3,$E3,$EA,$00,$00,$00,$00,$00,$0E,$8F,$F1,$A5,$25,$41,$85,$00,$00,$00,$00,$00,$00,$00 ;
 $5120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$50,$01,$5B,$00,$00,$00,$00,$04,$02,$AA,$A9,$75,$54,$18,$01,$40,$00,$00,$00,$00,$00,$00 ;
 $5140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$2A,$A8,$01,$4E,$80,$00,$00,$00,$02,$3F,$FF,$95,$55,$00,$00,$14,$00,$00,$00,$00,$00,$00,$00 ;
 $5160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$FF,$BF,$EC,$00,$00,$00,$00,$01,$7F,$FF,$55,$55,$40,$15,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$15,$55,$12,$F8,$00,$00,$00,$02,$FF,$FF,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$05,$5E,$70,$00,$00,$05,$F7,$3F,$D5,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$5F,$80,$00,$01,$FF,$FE,$37,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$15,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$CD,$5C,$EA,$00,$00,$00,$00,$00,$1D,$65,$E3,$55,$33,$C2,$85,$00,$00,$00,$00,$00,$00,$00 ;
 $5220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$15,$41,$01,$1D,$00,$00,$00,$00,$04,$00,$05,$51,$B5,$55,$34,$01,$40,$00,$00,$00,$00,$00,$00 ;
 $5240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$15,$50,$01,$AD,$80,$00,$00,$00,$02,$7F,$FF,$95,$55,$00,$00,$14,$00,$00,$00,$00,$00,$00,$00 ;
 $5260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$3F,$FF,$CC,$00,$00,$00,$00,$01,$7F,$FF,$55,$55,$40,$54,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$51,$1F,$DF,$FF,$FF,$FF,$FE,$FF,$FF,$F5,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$57,$38,$00,$00,$05,$FA,$7F,$75,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$57,$40,$00,$00,$FF,$FC,$7F,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$B5,$57,$3A,$00,$00,$00,$00,$00,$1E,$6A,$8E,$AE,$79,$02,$81,$00,$00,$00,$00,$00,$00,$00 ;
 $5320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$35,$0A,$05,$4D,$00,$00,$00,$00,$0F,$FF,$80,$AB,$75,$55,$74,$01,$40,$00,$00,$00,$00,$00,$00 ;
 $5340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$16,$A8,$01,$5D,$00,$00,$00,$00,$01,$7F,$FF,$B5,$55,$00,$00,$50,$00,$00,$00,$00,$00,$00,$00 ;
 $5360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$CF,$FE,$0C,$00,$00,$00,$00,$01,$7F,$FF,$55,$51,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$15,$CE,$00,$00,$00,$04,$FF,$FF,$D5,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$57,$9C,$00,$00,$05,$FF,$FF,$75,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$40,$00,$00,$FF,$F0,$FD,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$55,$55,$DA,$00,$00,$00,$00,$00,$1D,$05,$B5,$5D,$DF,$03,$01,$00,$00,$00,$00,$00,$00,$00 ;
 $5420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$35,$54,$09,$8D,$80,$00,$00,$00,$0A,$BF,$FF,$52,$95,$55,$D4,$01,$00,$00,$00,$00,$00,$00,$00 ;
 $5440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$17,$50,$01,$9D,$00,$00,$00,$00,$01,$7F,$FF,$B5,$54,$00,$00,$50,$00,$00,$00,$00,$00,$00,$00 ;
 $5460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$F1,$F1,$FE,$00,$00,$00,$00,$01,$7F,$FF,$55,$50,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$15,$E7,$00,$00,$00,$05,$FF,$FF,$D5,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$55,$CE,$00,$00,$05,$FF,$FF,$35,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$40,$00,$00,$7F,$C7,$FD,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$D5,$55,$6A,$00,$00,$00,$00,$00,$0E,$AA,$DA,$AD,$55,$05,$01,$40,$00,$00,$00,$00,$00,$00 ;
 $5520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$2D,$AA,$15,$4E,$80,$00,$00,$00,$0D,$5F,$FF,$25,$4D,$03,$D0,$05,$00,$00,$00,$00,$00,$00,$00 ;
 $5540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$17,$A8,$01,$5B,$00,$00,$00,$00,$01,$FF,$FF,$B5,$54,$00,$01,$50,$00,$00,$00,$00,$00,$00,$00 ;
 $5560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$7E,$0F,$F7,$00,$00,$00,$00,$01,$7F,$FF,$55,$50,$15,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$15,$F3,$80,$00,$00,$05,$FF,$FF,$D5,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$15,$CF,$00,$00,$03,$FF,$FF,$D5,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$15,$40,$00,$00,$3E,$19,$F5,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$55,$55,$56,$00,$00,$00,$00,$07,$E9,$55,$55,$55,$54,$06,$01,$40,$00,$00,$00,$00,$00,$00 ;
 $5620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$2D,$54,$01,$8E,$80,$00,$00,$00,$0A,$9F,$FF,$C6,$A7,$1F,$40,$05,$00,$00,$00,$00,$00,$00,$00 ;
 $5640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0B,$D4,$03,$BB,$00,$00,$00,$00,$00,$FF,$FF,$35,$54,$00,$05,$40,$00,$00,$00,$00,$00,$00,$00 ;
 $5660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$5F,$FF,$5B,$80,$00,$00,$00,$02,$FF,$FF,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$05,$79,$C0,$00,$00,$05,$FE,$7F,$D5,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$15,$6F,$80,$00,$03,$FF,$FF,$DD,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$15,$00,$00,$00,$1F,$F3,$D5,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$1D,$54,$15,$56,$00,$00,$00,$00,$07,$18,$AA,$BA,$55,$54,$0A,$01,$40,$00,$00,$00,$00,$00,$00 ;
 $5720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$2E,$A8,$01,$4E,$80,$00,$00,$00,$09,$3F,$FF,$A9,$F9,$FC,$00,$05,$00,$00,$00,$00,$00,$00,$00 ;
 $5740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0B,$EA,$01,$7B,$00,$00,$00,$00,$00,$FF,$FF,$35,$55,$00,$05,$40,$00,$00,$00,$00,$00,$00,$00 ;
 $5760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$F5,$59,$80,$00,$00,$00,$02,$FF,$FF,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$05,$78,$E0,$00,$00,$07,$FB,$3F,$D5,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$EF,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$07,$FF,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$38,$38,$38,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B ; {Attributes.
 $5820 DEFB $3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$38,$38,$38,$38,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B ;
 $5840 DEFB $3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$38,$38,$38,$38,$38,$38,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B ;
 $5860 DEFB $38,$3B,$3B,$3B,$3B,$3B,$3B,$3A,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$3A,$3A,$3A,$38 ;
 $5880 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$3A,$3A,$3A,$3A,$3A,$38 ;
 $58A0 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$38,$3A,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A ;
 $58C0 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$3A ;
 $58E0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38 ;
 $5900 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$78,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$78,$38,$38,$38,$38,$38,$38,$38 ;
 $5920 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$78,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$78,$38,$38,$38,$38,$38,$38,$38 ;
 $5940 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$78,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$78,$78,$38,$38,$38,$38,$38,$38 ;
 $5960 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$78,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$78,$78,$38,$38,$38,$38,$38,$38,$38 ;
 $5980 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38 ;
 $59A0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $59C0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $59E0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5A00 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5A20 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5A40 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5A60 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5A80 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5AA0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5AC0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5AE0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$39,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }
 $5B00 DEFB $F3,$31,$80,$5D,$21,$00,$80,$11
 $5B08 DEFB $00,$5B,$01,$00,$01,$ED,$B0,$C3
 $5B10 DEFB $12,$5B,$CD,$30,$5B,$CD,$62,$5B
 $5B18 DEFB $CD,$30,$5B

; Game Entry Point Alias
;
; .
;
; .
;
; #SIM(start=$A040,stop=$A04E)#SIM(start=$A05B,stop=$A071)
@label=Alias_GameEntryPoint
c$5B1B JP $A040      ; Jump to #R$A040.

; Data block at 5B1E
b$5B1E DEFB $03,$70,$20,$20,$20,$20,$20,$20
 $5B26 DEFB $20,$20,$20,$80,$A2,$80,$5D,$00
 $5B2E DEFB $80,$01,$DD,$21,$1E,$5B,$11,$11
 $5B36 DEFB $00,$AF,$37,$CD,$8B,$5B,$3A,$2F
 $5B3E DEFB $5B,$3D,$C2,$00,$00,$3A,$1E,$5B
 $5B46 DEFB $FE,$03,$C2,$00,$00,$DD,$2A,$2B
 $5B4E DEFB $5B,$ED,$5B,$29,$5B,$3E,$FF,$37
 $5B56 DEFB $CD,$8B,$5B,$F3,$3A,$2F,$5B,$3D
 $5B5E DEFB $C2,$00,$00,$C9,$DD,$21,$1E,$5B
 $5B66 DEFB $11,$11,$00,$AF,$37,$CD,$8B,$5B
 $5B6E DEFB $3A,$2F,$5B,$3D,$C2,$00,$00,$DD
 $5B76 DEFB $21,$00,$40,$11,$00,$1B,$3E,$FF
 $5B7E DEFB $37,$CD,$8B,$5B,$F3,$3A,$2F,$5B
 $5B86 DEFB $3D,$C2,$00,$00,$C9,$14,$08,$15
 $5B8E DEFB $F3,$3E,$0F,$D3,$FE,$21,$9A,$5B
 $5B96 DEFB $E5,$C3,$62,$05,$F5,$3E,$07,$D3
 $5B9E DEFB $FE,$F1,$3E,$01,$38,$01,$3C,$32
 $5BA6 DEFB $2F,$5B,$F3,$C9,$00,$00,$00,$00
 $5BAE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BBE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BCE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BDE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BEE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BFE DEFB $00,$00,$FF,$00,$00,$00,$0D,$03
 $5C06 DEFB $23,$0D,$0D,$23,$05,$00,$00,$00
 $5C0E DEFB $00,$00,$01,$00,$06,$00,$0B,$00
 $5C16 DEFB $01,$00,$01,$00,$06,$00,$10,$00
 $5C1E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C26 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C2E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C36 DEFB $00,$3C,$40,$00,$FF,$CD,$00,$54
 $5C3E DEFB $FF,$00,$00,$00,$05,$00,$FF,$05
 $5C46 DEFB $00,$02,$38,$00,$00,$E2,$5C,$00
 $5C4E DEFB $00,$B6,$5C,$BB,$5C,$CB,$5C,$E2
 $5C56 DEFB $5C,$CA,$5C,$E3,$5C,$E6,$5C,$E1
 $5C5E DEFB $5C,$1B,$5D,$E8,$5C,$E8,$5C,$E8
 $5C66 DEFB $5C,$2D,$92,$5C,$00,$02,$00,$00
 $5C6E DEFB $00,$00,$00,$00,$00,$00,$9D,$1A
 $5C76 DEFB $00,$00,$02,$00,$00,$58,$FF,$00
 $5C7E DEFB $00,$21,$00,$5B,$21,$17,$80,$40
 $5C86 DEFB $E0,$50,$21,$14,$21,$17,$03,$38
 $5C8E DEFB $00,$38,$00,$00,$00,$00,$00,$00
 $5C96 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C9E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CAE DEFB $00,$00,$00,$00,$57,$FF,$FF,$FF
 $5CB6 DEFB $F4,$09,$A8,$10,$4B,$F4,$09,$C4
 $5CBE DEFB $15,$53,$81,$0F,$C4,$15,$52,$F4
 $5CC6 DEFB $09,$C4,$15,$50,$80,$00,$05,$13
 $5CCE DEFB $00,$EF,$22,$22,$AF,$3A,$F5,$C0
 $5CD6 DEFB $33,$32,$37,$36,$38,$0E,$00,$00
 $5CDE DEFB $00,$80,$00,$0D,$80,$EF,$22,$22
 $5CE6 DEFB $0D,$80,$00,$00,$00,$80,$00,$20
 $5CEE DEFB $20,$20,$20,$20,$20,$00,$00,$00
 $5CF6 DEFB $00,$00,$00,$03,$73,$68,$65,$72
 $5CFE DEFB $6C,$6F,$63,$6B,$20,$20,$00,$01
 $5D06 DEFB $00,$80,$00,$80,$00,$00,$00,$00
 $5D0E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D16 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D1E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D26 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D2E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D36 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D3E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D46 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D4E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D56 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D5E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D66 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D6E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D76 DEFB $E6,$05,$CD,$05,$93,$00,$59,$5B
 $5D7E DEFB $1B,$5B

; Table: Word index
@label=Table_WordIndex
g$5D80 DEFW $0000    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D82 DEFW $0001    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D84 DEFW $00A7    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D86 DEFW $0164    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D88 DEFW $020D    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D8A DEFW $0280    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D8C DEFW $02DD    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D8E DEFW $036A    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D90 DEFW $03BA    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D92 DEFW $042D    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D94 DEFW $048B    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D96 DEFW $0494    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D98 DEFW $04B0    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D9A DEFW $0532    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D9C DEFW $0599    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5D9E DEFW $05E8    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DA0 DEFW $0636    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DA2 DEFW $06EB    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DA4 DEFW $06F9    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DA6 DEFW $075A    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DA8 DEFW $0882    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DAA DEFW $090C    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DAC DEFW $094B    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DAE DEFW $095A    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DB0 DEFW $09DF    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DB2 DEFW $09E3    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DB4 DEFW $09F5    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DB6 DEFW $0000    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DB8 DEFW $0000    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DBA DEFW $0000    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DBC DEFW $0000    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)
 $5DBE DEFW $09F8    ; #LET(letter=($40+(#PC-$5D80)/$02))#IF(#PEEK(#PC+$01)*$100+#PEEK(#PC))("#R($5DBF+#PEEK(#PC+$01)*$100+#PEEK(#PC))(#CHR({letter}))",)

; Table Dictionary: "A"
;
; All dictionary words starting with "A".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0001)".
@Table_Dictionary_A
g$5DC0 DEFB $8F       ; {Word configuration:
 $5DC1 DEFB $00       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0003)".
 $5DC2 DEFB $D0       ; {Word configuration:
 $5DC3 DEFB $00       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0005)".
 $5DC4 DEFB $7F       ; {Word configuration:
 $5DC5 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DC6 DEFB %00010011 ; {Bit-packed letters (4 letters, 5 bits each):
 $5DC7 DEFB %11101011 ; #BITGROUPS($5DC6,$04)
 $5DC8 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($000A)".
 $5DC9 DEFB $DF       ; {Word configuration:
 $5DCA DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DCB DEFB %10110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $5DCC DEFB %01000000 ; #BITGROUPS($5DCB,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($000E)".
 $5DCD DEFB $6F       ; {Word configuration:
 $5DCE DEFB $06       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DCF DEFB %00011000 ; {Bit-packed letters (6 letters, 5 bits each):
 $5DD0 DEFB %11011111 ; #BITGROUPS($5DCF,$06)
 $5DD1 DEFB %01010111 ;
 $5DD2 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0014)".
 $5DD3 DEFB $6F       ; {Word configuration:
 $5DD4 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DD5 DEFB %01001001 ; {Bit-packed letters (2 letters, 5 bits each):
 $5DD6 DEFB %00000000 ; #BITGROUPS($5DD5,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0018)".
 $5DD7 DEFB $56       ; {Word configuration:
 $5DD8 DEFB $06       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DD9 DEFB %00100001 ; {Bit-packed letters (6 letters, 5 bits each):
 $5DDA DEFB %00100100 ; #BITGROUPS($5DD9,$06)
 $5DDB DEFB %01011001 ;
 $5DDC DEFB %11001100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($001E)".
 $5DDD DEFB $3F       ; {Word configuration:
 $5DDE DEFB $08       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DDF DEFB %00110101 ; {Bit-packed letters (8 letters, 5 bits each):
 $5DE0 DEFB %00001011 ; #BITGROUPS($5DDF,$08)
 $5DE1 DEFB %00100111 ;
 $5DE2 DEFB %00111101 ;
 $5DE3 DEFB %11101110 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0025)".
 $5DE4 DEFB $DF       ; {Word configuration:
 $5DE5 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DE6 DEFB %00111000 ; {Bit-packed letters (4 letters, 5 bits each):
*$5DE7 DEFB %01010010 ; #BITGROUPS($5DE6,$04)
 $5DE8 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($002A)".
 $5DE9 DEFB $5F       ; {Word configuration:
 $5DEA DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DEB DEFB %00101011 ; {Bit-packed letters (3 letters, 5 bits each):
 $5DEC DEFB %10101000 ; #BITGROUPS($5DEB,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($002E)".
 $5DED DEFB $DF       ; {Word configuration:
 $5DEE DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DEF DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5DEF,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0031)".
 $5DF0 DEFB $6F       ; {Word configuration:
 $5DF1 DEFB $08       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DF2 DEFB %01100001 ; {Bit-packed letters (8 letters, 5 bits each):
 $5DF3 DEFB %00001011 ; #BITGROUPS($5DF2,$08)
 $5DF4 DEFB %00100011 ;
 $5DF5 DEFB %10000110 ;
 $5DF6 DEFB %10000101 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0038)".
 $5DF7 DEFB $5F       ; {Word configuration:
 $5DF8 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DF9 DEFB %01001000 ; {Bit-packed letters (3 letters, 5 bits each):
 $5DFA DEFB %10010010 ; #BITGROUPS($5DF9,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($003C)".
 $5DFB DEFB $6F       ; {Word configuration:
 $5DFC DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5DFD DEFB %10110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $5DFE DEFB %01000000 ; #BITGROUPS($5DFD,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0040)".
 $5DFF DEFB $9F       ; {Word configuration:
 $5E00 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E01 DEFB %01100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5E01,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0043)".
 $5E02 DEFB $DF       ; {Word configuration:
 $5E03 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E04 DEFB %01111011 ; {Bit-packed letters (3 letters, 5 bits each):
 $5E05 DEFB %10001110 ; #BITGROUPS($5E04,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0047)".
 $5E06 DEFB $DF       ; {Word configuration:
 $5E07 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E08 DEFB %10010001 ; {Bit-packed letters (5 letters, 5 bits each):
 $5E09 DEFB %01000010 ; #BITGROUPS($5E08,$05)
 $5E0A DEFB %01001100 ;
 $5E0B DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($004D)".
 $5E0C DEFB $DF       ; {Word configuration:
 $5E0D DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E0E DEFB %10100010 ; {Bit-packed letters (6 letters, 5 bits each):
 $5E0F DEFB %00011111 ; #BITGROUPS($5E0E,$06)
 $5E10 DEFB %01010011 ;
 $5E11 DEFB %10100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0053)".
 $5E12 DEFB $D0       ; {Word configuration:
 $5E13 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E14 DEFB %10111000 ; {Bit-packed letters (3 letters, 5 bits each):
 $5E15 DEFB %01110010 ; #BITGROUPS($5E14,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0057)".
 $5E16 DEFB $DF       ; {Word configuration:
 $5E17 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E18 DEFB %01101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5E18,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($005A)".
 $5E19 DEFB $8F       ; {Word configuration:
 $5E1A DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E1B DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5E1B,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($005D)".
 $5E1C DEFB $AF       ; {Word configuration:
 $5E1D DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E1E DEFB %00100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5E1E,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0060)".
 $5E1F DEFB $8F       ; {Word configuration:
 $5E20 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E21 DEFB %01111101 ; {Bit-packed letters (5 letters, 5 bits each):
 $5E22 DEFB %00010000 ; #BITGROUPS($5E21,$05)
 $5E23 DEFB %01011001 ;
 $5E24 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0066)".
 $5E25 DEFB $DF       ; {Word configuration:
 $5E26 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E27 DEFB %11001011 ; {Bit-packed letters (4 letters, 5 bits each):
 $5E28 DEFB %11011100 ; #BITGROUPS($5E27,$04)
 $5E29 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($006B)".
 $5E2A DEFB $DF       ; {Word configuration:
 $5E2B DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E2C DEFB %10000000 ; {Bit-packed letters (4 letters, 5 bits each):
 $5E2D DEFB %01100101 ; #BITGROUPS($5E2C,$04)
 $5E2E DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0070)".
 $5E2F DEFB $D8       ; {Word configuration:
 $5E30 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E31 DEFB %10000000 ; {Bit-packed letters (6 letters, 5 bits each):
 $5E32 DEFB %01100100 ; #BITGROUPS($5E31,$06)
 $5E33 DEFB %01010111 ;
 $5E34 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0076)".
 $5E35 DEFB $D0       ; {Word configuration:
 $5E36 DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E37 DEFB %00101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $5E38 DEFB %01100100 ; #BITGROUPS($5E37,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($007A)".
 $5E39 DEFB $8F       ; {Word configuration:
 $5E3A DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E3B DEFB %10010001 ; {Bit-packed letters (2 letters, 5 bits each):
 $5E3C DEFB %01000000 ; #BITGROUPS($5E3B,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($007E)".
 $5E3D DEFB $50       ; {Word configuration:
 $5E3E DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E3F DEFB %01101000 ; {Bit-packed letters (6 letters, 5 bits each):
 $5E40 DEFB %11010000 ; #BITGROUPS($5E3F,$06)
 $5E41 DEFB %00010100 ;
 $5E42 DEFB %11001000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0084)".
 $5E43 DEFB $D4       ; {Word configuration:
 $5E44 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E45 DEFB %01111101 ; {Bit-packed letters (3 letters, 5 bits each):
 $5E46 DEFB %01011100 ; #BITGROUPS($5E45,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0088)".
 $5E47 DEFB $D6       ; {Word configuration:
 $5E48 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E49 DEFB %10010010 ; {Bit-packed letters (3 letters, 5 bits each):
 $5E4A DEFB %01101100 ; #BITGROUPS($5E49,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($008C)".
 $5E4B DEFB $D0       ; {Word configuration:
 $5E4C DEFB $41       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E4D DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5E4D,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($008F)".
 $5E4E DEFB $5F       ; {Word configuration:
 $5E4F DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E50 DEFB %10100010 ; {Bit-packed letters (7 letters, 5 bits each):
 $5E51 DEFB %01001100 ; #BITGROUPS($5E50,$07)
 $5E52 DEFB %00010001 ;
 $5E53 DEFB %11010010 ;
 $5E54 DEFB %01100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0096)".
 $5E55 DEFB $30       ; {Word configuration:
 $5E56 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E57 DEFB %10011010 ; {Bit-packed letters (2 letters, 5 bits each):
 $5E58 DEFB %11000000 ; #BITGROUPS($5E57,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($009A)".
 $5E59 DEFB $8F       ; {Word configuration:
 $5E5A DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E5B DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5E5B,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($009D)".
 $5E5C DEFB $D0       ; {Word configuration:
 $5E5D DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E5E DEFB %10100001 ; {Bit-packed letters (5 letters, 5 bits each):
 $5E5F DEFB %01011011 ; #BITGROUPS($5E5E,$05)
 $5E60 DEFB %00001010 ;
 $5E61 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00A3)".
 $5E62 DEFB $DF       ; {Word configuration:
 $5E63 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E64 DEFB %10111000 ; {Bit-packed letters (3 letters, 5 bits each):
 $5E65 DEFB %01110010 ; #BITGROUPS($5E64,$03)}

; Table Dictionary: "B"
;
; All dictionary words starting with "B".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00A7)".
@Table_Dictionary_B
g$5E66 DEFB $6F       ; {Word configuration:
 $5E67 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E68 DEFB %00001000 ; {Bit-packed letters (3 letters, 5 bits each):
 $5E69 DEFB %11010110 ; #BITGROUPS($5E68,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00AB)".
 $5E6A DEFB $6F       ; {Word configuration:
 $5E6B DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E6C DEFB %01011001 ; {Bit-packed letters (3 letters, 5 bits each):
 $5E6D DEFB %01100100 ; #BITGROUPS($5E6C,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00AF)".
 $5E6E DEFB $6F       ; {Word configuration:
 $5E6F DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E70 DEFB %01110010 ; {Bit-packed letters (2 letters, 5 bits each):
 $5E71 DEFB %11000000 ; #BITGROUPS($5E70,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00B3)".
 $5E72 DEFB $DF       ; {Word configuration:
 $5E73 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E74 DEFB %10010011 ; {Bit-packed letters (5 letters, 5 bits each):
 $5E75 DEFB %11100011 ; #BITGROUPS($5E74,$05)
 $5E76 DEFB %01010010 ;
 $5E77 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00B9)".
 $5E78 DEFB $6F       ; {Word configuration:
 $5E79 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E7A DEFB %10011010 ; {Bit-packed letters (3 letters, 5 bits each):
 $5E7B DEFB %01011000 ; #BITGROUPS($5E7A,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00BD)".
 $5E7C DEFB $6F       ; {Word configuration:
 $5E7D DEFB $41       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E7E DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5E7E,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00C0)".
 $5E7F DEFB $8F       ; {Word configuration:
 $5E80 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E81 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5E81,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00C3)".
 $5E82 DEFB $D5       ; {Word configuration:
 $5E83 DEFB $10       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00C5)".
 $5E84 DEFB $9F       ; {Word configuration:
 $5E85 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E86 DEFB %00011000 ; {Bit-packed letters (5 letters, 5 bits each):
 $5E87 DEFB %01101011 ; #BITGROUPS($5E86,$05)
 $5E88 DEFB %00110010 ;
 $5E89 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00CB)".
 $5E8A DEFB $5F       ; {Word configuration:
 $5E8B DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E8C DEFB %00100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5E8C,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00CE)".
 $5E8D DEFB $5F       ; {Word configuration:
 $5E8E DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E8F DEFB %10010011 ; {Bit-packed letters (4 letters, 5 bits each):
 $5E90 DEFB %11011110 ; #BITGROUPS($5E8F,$04)
 $5E91 DEFB %11010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00D3)".
 $5E92 DEFB $DF       ; {Word configuration:
 $5E93 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E94 DEFB %00101011 ; {Bit-packed letters (2 letters, 5 bits each):
 $5E95 DEFB %10000000 ; #BITGROUPS($5E94,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00D7)".
 $5E96 DEFB $DF       ; {Word configuration:
 $5E97 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E98 DEFB %00110011 ; {Bit-packed letters (4 letters, 5 bits each):
 $5E99 DEFB %11100100 ; #BITGROUPS($5E98,$04)
 $5E9A DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00DC)".
 $5E9B DEFB $DF       ; {Word configuration:
 $5E9C DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5E9D DEFB %01000010 ; {Bit-packed letters (4 letters, 5 bits each):
 $5E9E DEFB %01011100 ; #BITGROUPS($5E9D,$04)
 $5E9F DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00E1)".
 $5EA0 DEFB $DF       ; {Word configuration:
 $5EA1 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EA2 DEFB %01100010 ; {Bit-packed letters (5 letters, 5 bits each):
 $5EA3 DEFB %01001011 ; #BITGROUPS($5EA2,$05)
 $5EA4 DEFB %01100010 ;
 $5EA5 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00E7)".
 $5EA6 DEFB $DF       ; {Word configuration:
 $5EA7 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EA8 DEFB %01111101 ; {Bit-packed letters (2 letters, 5 bits each):
 $5EA9 DEFB %11000000 ; #BITGROUPS($5EA8,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00EB)".
 $5EAA DEFB $DF       ; {Word configuration:
 $5EAB DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EAC DEFB %10100101 ; {Bit-packed letters (5 letters, 5 bits each):
 $5EAD DEFB %11001010 ; #BITGROUPS($5EAC,$05)
 $5EAE DEFB %01010111 ;
 $5EAF DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00F1)".
 $5EB0 DEFB $5F       ; {Word configuration:
 $5EB1 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EB2 DEFB %01001011 ; {Bit-packed letters (2 letters, 5 bits each):
 $5EB3 DEFB %10000000 ; #BITGROUPS($5EB2,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00F5)".
 $5EB4 DEFB $6F       ; {Word configuration:
 $5EB5 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EB6 DEFB %10011010 ; {Bit-packed letters (5 letters, 5 bits each):
 $5EB7 DEFB %00011111 ; #BITGROUPS($5EB6,$05)
 $5EB8 DEFB %00001001 ;
 $5EB9 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00FB)".
 $5EBA DEFB $DF       ; {Word configuration:
 $5EBB DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EBC DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5EBC,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($00FE)".
 $5EBD DEFB $E6       ; {Word configuration:
 $5EBE DEFB $08       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EBF DEFB %01100000 ; {Bit-packed letters (8 letters, 5 bits each):
 $5EC0 DEFB %01000110 ; #BITGROUPS($5EBF,$08)
 $5EC1 DEFB %10110110 ;
 $5EC2 DEFB %10000101 ;
 $5EC3 DEFB %00101100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0105)".
 $5EC4 DEFB $5F       ; {Word configuration:
 $5EC5 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EC6 DEFB %01111011 ; {Bit-packed letters (3 letters, 5 bits each):
 $5EC7 DEFB %11001000 ; #BITGROUPS($5EC6,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0109)".
 $5EC8 DEFB $6F       ; {Word configuration:
 $5EC9 DEFB $47       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5ECA DEFB %10011101 ; {Bit-packed letters (7 letters, 5 bits each):
 $5ECB DEFB %00000010 ; #BITGROUPS($5ECA,$07)
 $5ECC DEFB %10010111 ;
 $5ECD DEFB %00010100 ;
 $5ECE DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0110)".
 $5ECF DEFB $6F       ; {Word configuration:
 $5ED0 DEFB $07       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5ED1 DEFB %01111000 ; {Bit-packed letters (7 letters, 5 bits each):
 $5ED2 DEFB %01100100 ; #BITGROUPS($5ED1,$07)
 $5ED3 DEFB %01000100 ;
 $5ED4 DEFB %10111000 ;
 $5ED5 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0117)".
 $5ED6 DEFB $5F       ; {Word configuration:
 $5ED7 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5ED8 DEFB %00100110 ; {Bit-packed letters (2 letters, 5 bits each):
 $5ED9 DEFB %01000000 ; #BITGROUPS($5ED8,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($011B)".
 $5EDA DEFB $50       ; {Word configuration:
 $5EDB DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EDC DEFB %01111010 ; {Bit-packed letters (2 letters, 5 bits each):
 $5EDD DEFB %11000000 ; #BITGROUPS($5EDC,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($011F)".
 $5EDE DEFB $5F       ; {Word configuration:
 $5EDF DEFB $34       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EE0 DEFB %00011000 ; {Bit-packed letters (4 letters, 5 bits each):
 $5EE1 DEFB %01100110 ; #BITGROUPS($5EE0,$04)
 $5EE2 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0124)".
 $5EE3 DEFB $5F       ; {Word configuration:
 $5EE4 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EE5 DEFB %10100101 ; {Bit-packed letters (4 letters, 5 bits each):
 $5EE6 DEFB %00011110 ; #BITGROUPS($5EE5,$04)
 $5EE7 DEFB %11010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0129)".
 $5EE8 DEFB $30       ; {Word configuration:
 $5EE9 DEFB $84       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EEA DEFW $0494     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $5EEC DEFB %10010001 ; {Bit-packed letters (4 letters, 5 bits each):
 $5EED DEFB %01000010 ; #BITGROUPS($5EEC,$04)
 $5EEE DEFB %10110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0130)".
 $5EEF DEFB $5F       ; {Word configuration:
 $5EF0 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EF1 DEFB %01001001 ; {Bit-packed letters (4 letters, 5 bits each):
 $5EF2 DEFB %00001110 ; #BITGROUPS($5EF1,$04)
 $5EF3 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0135)".
 $5EF4 DEFB $DF       ; {Word configuration:
 $5EF5 DEFB $26       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EF6 DEFB %01100011 ; {Bit-packed letters (6 letters, 5 bits each):
 $5EF7 DEFB %00010010 ; #BITGROUPS($5EF6,$06)
 $5EF8 DEFB %00010111 ;
 $5EF9 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($013B)".
 $5EFA DEFB $6F       ; {Word configuration:
 $5EFB DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5EFC DEFB %01111000 ; {Bit-packed letters (3 letters, 5 bits each):
 $5EFD DEFB %01001000 ; #BITGROUPS($5EFC,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($013F)".
 $5EFE DEFB $6F       ; {Word configuration:
 $5EFF DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F00 DEFB %01011001 ; {Bit-packed letters (3 letters, 5 bits each):
 $5F01 DEFB %01011100 ; #BITGROUPS($5F00,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0143)".
 $5F02 DEFB $5F       ; {Word configuration:
 $5F03 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F04 DEFB %10111011 ; {Bit-packed letters (2 letters, 5 bits each):
 $5F05 DEFB %10000000 ; #BITGROUPS($5F04,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0147)".
 $5F06 DEFB $6F       ; {Word configuration:
 $5F07 DEFB $41       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F08 DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5F08,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($014A)".
 $5F09 DEFB $6F       ; {Word configuration:
 $5F0A DEFB $09       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F0B DEFB %10101000 ; {Bit-packed letters (9 letters, 5 bits each):
 $5F0C DEFB %11010110 ; #BITGROUPS($5F0B,$09)
 $5F0D DEFB %10010111 ;
 $5F0E DEFB %00011101 ;
 $5F0F DEFB %00000001 ;
 $5F10 DEFB %01101000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0152)".
 $5F11 DEFB $5F       ; {Word configuration:
 $5F12 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F13 DEFB %01100011 ; {Bit-packed letters (4 letters, 5 bits each):
 $5F14 DEFB %00001011 ; #BITGROUPS($5F13,$04)
 $5F15 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0157)".
 $5F16 DEFB $65       ; {Word configuration:
 $5F17 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F18 DEFB %10010011 ; {Bit-packed letters (2 letters, 5 bits each):
 $5F19 DEFB %10000000 ; #BITGROUPS($5F18,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($015B)".
 $5F1A DEFB $6F       ; {Word configuration:
 $5F1B DEFB $31       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F1C DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5F1C,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($015E)".
 $5F1D DEFB $9F       ; {Word configuration:
 $5F1E DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F1F DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5F1F,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0161)".
 $5F20 DEFB $DF       ; {Word configuration:
 $5F21 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F22 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5F22,$01)

; Table Dictionary: "C"
;
; All dictionary words starting with "C".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0164)".
@Table_Dictionary_C
g$5F23 DEFB $50       ; {Word configuration:
 $5F24 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F25 DEFB %00001000 ; {Bit-packed letters (2 letters, 5 bits each):
 $5F26 DEFB %10000000 ; #BITGROUPS($5F25,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0168)".
 $5F27 DEFB $5F       ; {Word configuration:
 $5F28 DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F29 DEFB %00010010 ; {Bit-packed letters (3 letters, 5 bits each):
 $5F2A DEFB %01001010 ; #BITGROUPS($5F29,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($016C)".
 $5F2B DEFB $D0       ; {Word configuration:
 $5F2C DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F2D DEFB %01100011 ; {Bit-packed letters (2 letters, 5 bits each):
 $5F2E DEFB %00000000 ; #BITGROUPS($5F2D,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0170)".
 $5F2F DEFB $36       ; {Word configuration:
 $5F30 DEFB $B0       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F31 DEFW $03BE     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0174)".
 $5F33 DEFB $6F       ; {Word configuration:
 $5F34 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F35 DEFB %01101001 ; {Bit-packed letters (4 letters, 5 bits each):
 $5F36 DEFB %00001010 ; #BITGROUPS($5F35,$04)
 $5F37 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0179)".
 $5F38 DEFB $DF       ; {Word configuration:
 $5F39 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F3A DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5F3A,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($017C)".
 $5F3B DEFB $8F       ; {Word configuration:
 $5F3C DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F3D DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5F3D,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($017F)".
 $5F3E DEFB $8F       ; {Word configuration:
 $5F3F DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F40 DEFB %01110011 ; {Bit-packed letters (3 letters, 5 bits each):
 $5F41 DEFB %11101000 ; #BITGROUPS($5F40,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0183)".
 $5F42 DEFB $08       ; {Word configuration:
 $5F43 DEFB $95       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F44 DEFW $01BE     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $5F46 DEFB %10010001 ; {Bit-packed letters (5 letters, 5 bits each):
 $5F47 DEFB %01001101 ; #BITGROUPS($5F46,$05)
 $5F48 DEFB %01010110 ;
 $5F49 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($018B)".
 $5F4A DEFB $33       ; {Word configuration:
 $5F4B DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F4C DEFB %10010110 ; {Bit-packed letters (2 letters, 5 bits each):
 $5F4D DEFB %01000000 ; #BITGROUPS($5F4C,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($018F)".
 $5F4E DEFB $D5       ; {Word configuration:
 $5F4F DEFB $40       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0191)".
 $5F50 DEFB $5F       ; {Word configuration:
 $5F51 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F52 DEFB %10011001 ; {Bit-packed letters (2 letters, 5 bits each):
 $5F53 DEFB %01000000 ; #BITGROUPS($5F52,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0195)".
 $5F54 DEFB $50       ; {Word configuration:
 $5F55 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F56 DEFB %01000000 ; {Bit-packed letters (4 letters, 5 bits each):
 $5F57 DEFB %01010011 ; #BITGROUPS($5F56,$04)
 $5F58 DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($019A)".
 $5F59 DEFB $5F       ; {Word configuration:
 $5F5A DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F5B DEFB %10010101 ; {Bit-packed letters (3 letters, 5 bits each):
 $5F5C DEFB %00100110 ; #BITGROUPS($5F5B,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($019E)".
 $5F5D DEFB $6F       ; {Word configuration:
 $5F5E DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F5F DEFB %01001001 ; {Bit-packed letters (3 letters, 5 bits each):
 $5F60 DEFB %01001100 ; #BITGROUPS($5F5F,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01A2)".
 $5F61 DEFB $6F       ; {Word configuration:
 $5F62 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F63 DEFB %01110000 ; {Bit-packed letters (2 letters, 5 bits each):
 $5F64 DEFB %01000000 ; #BITGROUPS($5F63,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01A6)".
 $5F65 DEFB $5F       ; {Word configuration:
 $5F66 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F67 DEFB %01111100 ; {Bit-packed letters (4 letters, 5 bits each):
 $5F68 DEFB %00010010 ; #BITGROUPS($5F67,$04)
 $5F69 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01AB)".
 $5F6A DEFB $5F       ; {Word configuration:
 $5F6B DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F6C DEFB %10010011 ; {Bit-packed letters (7 letters, 5 bits each):
 $5F6D DEFB %11011100 ; #BITGROUPS($5F6C,$07)
 $5F6E DEFB %10010001 ;
 $5F6F DEFB %10110000 ;
 $5F70 DEFB %10100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01B2)".
 $5F71 DEFB $40       ; {Word configuration:
 $5F72 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F73 DEFB %01100010 ; {Bit-packed letters (4 letters, 5 bits each):
 $5F74 DEFB %01011010 ; #BITGROUPS($5F73,$04)
 $5F75 DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01B7)".
 $5F76 DEFB $30       ; {Word configuration:
 $5F77 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F78 DEFB %01111100 ; {Bit-packed letters (3 letters, 5 bits each):
 $5F79 DEFB %11001010 ; #BITGROUPS($5F78,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01BB)".
 $5F7A DEFB $6F       ; {Word configuration:
 $5F7B DEFB $41       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F7C DEFB %00100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5F7C,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01BE)".
 $5F7D DEFB $0F       ; {Word configuration:
 $5F7E DEFB $42       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F7F DEFB %01100110 ; {Bit-packed letters (2 letters, 5 bits each):
 $5F80 DEFB %01000000 ; #BITGROUPS($5F7F,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01C2)".
 $5F81 DEFB $5F       ; {Word configuration:
 $5F82 DEFB $41       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F83 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5F83,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01C5)".
 $5F84 DEFB $5F       ; {Word configuration:
 $5F85 DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F86 DEFB %10100010 ; {Bit-packed letters (4 letters, 5 bits each):
 $5F87 DEFB %00001011 ; #BITGROUPS($5F86,$04)
 $5F88 DEFB %00110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01CA)".
 $5F89 DEFB $6F       ; {Word configuration:
 $5F8A DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F8B DEFB %01111000 ; {Bit-packed letters (5 letters, 5 bits each):
 $5F8C DEFB %10001000 ; #BITGROUPS($5F8B,$05)
 $5F8D DEFB %01010111 ;
 $5F8E DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01D0)".
 $5F8F DEFB $6F       ; {Word configuration:
 $5F90 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F91 DEFB %00100001 ; {Bit-packed letters (3 letters, 5 bits each):
 $5F92 DEFB %01001000 ; #BITGROUPS($5F91,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01D4)".
 $5F93 DEFB $30       ; {Word configuration:
 $5F94 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F95 DEFB %01101001 ; {Bit-packed letters (2 letters, 5 bits each):
 $5F96 DEFB %01000000 ; #BITGROUPS($5F95,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01D8)".
 $5F97 DEFB $6F       ; {Word configuration:
 $5F98 DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5F99 DEFB %01110100 ; {Bit-packed letters (7 letters, 5 bits each):
 $5F9A DEFB %11101000 ; #BITGROUPS($5F99,$07)
 $5F9B DEFB %00010001 ;
 $5F9C DEFB %00110000 ;
 $5F9D DEFB %10100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01DF)".
 $5F9E DEFB $5F       ; {Word configuration:
 $5F9F DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FA0 DEFB %01111010 ; {Bit-packed letters (2 letters, 5 bits each):
 $5FA1 DEFB %11000000 ; #BITGROUPS($5FA0,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01E3)".
 $5FA2 DEFB $5F       ; {Word configuration:
 $5FA3 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FA4 DEFB %10010011 ; {Bit-packed letters (4 letters, 5 bits each):
 $5FA5 DEFB %10001011 ; #BITGROUPS($5FA4,$04)
 $5FA6 DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01E8)".
 $5FA7 DEFB $50       ; {Word configuration:
 $5FA8 DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FA9 DEFB %10000100 ; {Bit-packed letters (3 letters, 5 bits each):
 $5FAA DEFB %11001010 ; #BITGROUPS($5FA9,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01EC)".
 $5FAB DEFB $6F       ; {Word configuration:
 $5FAC DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FAD DEFB %10011110 ; {Bit-packed letters (2 letters, 5 bits each):
 $5FAE DEFB %01000000 ; #BITGROUPS($5FAD,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01F0)".
 $5FAF DEFB $5F       ; {Word configuration:
 $5FB0 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FB1 DEFB %10101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $5FB2 DEFB %11010000 ; #BITGROUPS($5FB1,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01F4)".
 $5FB3 DEFB $D4       ; {Word configuration:
 $5FB4 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FB5 DEFB %01100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5FB5,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01F7)".
 $5FB6 DEFB $3F       ; {Word configuration:
 $5FB7 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FB8 DEFB %01110101 ; {Bit-packed letters (2 letters, 5 bits each):
 $5FB9 DEFB %00000000 ; #BITGROUPS($5FB8,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($01FB)".
 $5FBA DEFB $D0       ; {Word configuration:
 $5FBB DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FBC DEFB %10010010 ; {Bit-packed letters (4 letters, 5 bits each):
 $5FBD DEFB %01011010 ; #BITGROUPS($5FBC,$04)
 $5FBE DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0200)".
 $5FBF DEFB $6F       ; {Word configuration:
 $5FC0 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FC1 DEFB %01111100 ; {Bit-packed letters (3 letters, 5 bits each):
 $5FC2 DEFB %11100110 ; #BITGROUPS($5FC1,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0204)".
 $5FC3 DEFB $64       ; {Word configuration:
 $5FC4 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FC5 DEFB %10101011 ; {Bit-packed letters (5 letters, 5 bits each):
 $5FC6 DEFB %01100000 ; #BITGROUPS($5FC5,$05)
 $5FC7 DEFB %11000010 ;
 $5FC8 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($020A)".
 $5FC9 DEFB $35       ; {Word configuration:
 $5FCA DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FCB DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5FCB,$01)

; Table Dictionary: "D"
;
; All dictionary words starting with "D".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($020D)".
@Table_Dictionary_D
g$5FCC DEFB $2F       ; {Word configuration:
 $5FCD DEFB $80       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FCE DEFW $0272     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0211)".
 $5FD0 DEFB $6F       ; {Word configuration:
 $5FD1 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FD2 DEFB %00001010 ; {Bit-packed letters (4 letters, 5 bits each):
 $5FD3 DEFB %01011001 ; #BITGROUPS($5FD2,$04)
 $5FD4 DEFB %10010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0216)".
 $5FD5 DEFB $6F       ; {Word configuration:
 $5FD6 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FD7 DEFB %10000010 ; {Bit-packed letters (4 letters, 5 bits each):
 $5FD8 DEFB %00011100 ; #BITGROUPS($5FD7,$04)
 $5FD9 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($021B)".
 $5FDA DEFB $6F       ; {Word configuration:
 $5FDB DEFB $51       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FDC DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5FDC,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($021E)".
 $5FDD DEFB $DF       ; {Word configuration:
 $5FDE DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FDF DEFB %10010010 ; {Bit-packed letters (2 letters, 5 bits each):
 $5FE0 DEFB %11000000 ; #BITGROUPS($5FDF,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0222)".
 $5FE1 DEFB $3F       ; {Word configuration:
 $5FE2 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FE3 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5FE3,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0225)".
 $5FE4 DEFB $6F       ; {Word configuration:
 $5FE5 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FE6 DEFB %00101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $5FE7 DEFB %01001000 ; #BITGROUPS($5FE6,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0229)".
 $5FE8 DEFB $D8       ; {Word configuration:
 $5FE9 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FEA DEFB %10100010 ; {Bit-packed letters (2 letters, 5 bits each):
 $5FEB DEFB %00000000 ; #BITGROUPS($5FEA,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($022D)".
 $5FEC DEFB $6F       ; {Word configuration:
 $5FED DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FEE DEFB %00101100 ; {Bit-packed letters (2 letters, 5 bits each):
 $5FEF DEFB %00000000 ; #BITGROUPS($5FEE,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0231)".
 $5FF0 DEFB $5F       ; {Word configuration:
 $5FF1 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FF2 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($5FF2,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0234)".
 $5FF3 DEFB $5F       ; {Word configuration:
 $5FF4 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FF5 DEFB %10011010 ; {Bit-packed letters (2 letters, 5 bits each):
 $5FF6 DEFB %11000000 ; #BITGROUPS($5FF5,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0238)".
 $5FF7 DEFB $6F       ; {Word configuration:
 $5FF8 DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FF9 DEFB %10000000 ; {Bit-packed letters (4 letters, 5 bits each):
 $5FFA DEFB %01100100 ; #BITGROUPS($5FF9,$04)
 $5FFB DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($023D)".
 $5FFC DEFB $DF       ; {Word configuration:
 $5FFD DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $5FFE DEFB %10100001 ; {Bit-packed letters (7 letters, 5 bits each):
 $5FFF DEFB %01000111 ; #BITGROUPS($5FFE,$07)
 $6000 DEFB %01000100 ;
 $6001 DEFB %11011000 ;
 $6002 DEFB %10100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0244)".
 $6003 DEFB $D4       ; {Word configuration:
 $6004 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6005 DEFB %01001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6005,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0247)".
 $6006 DEFB $D6       ; {Word configuration:
 $6007 DEFB $10       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0249)".
 $6008 DEFB $5F       ; {Word configuration:
 $6009 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $600A DEFB %00001001 ; {Bit-packed letters (6 letters, 5 bits each):
 $600B DEFB %11100100 ; #BITGROUPS($600A,$06)
 $600C DEFB %00010110 ;
 $600D DEFB %11001100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($024F)".
 $600E DEFB $6F       ; {Word configuration:
 $600F DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6010 DEFB %01110010 ; {Bit-packed letters (4 letters, 5 bits each):
 $6011 DEFB %01011100 ; #BITGROUPS($6010,$04)
 $6012 DEFB %01110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0254)".
 $6013 DEFB $6F       ; {Word configuration:
 $6014 DEFB $54       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6015 DEFB %10010011 ; {Bit-packed letters (4 letters, 5 bits each):
 $6016 DEFB %11011110 ; #BITGROUPS($6015,$04)
 $6017 DEFB %11010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0259)".
 $6018 DEFB $5F       ; {Word configuration:
 $6019 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $601A DEFB %10011001 ; {Bit-packed letters (6 letters, 5 bits each):
 $601B DEFB %11101010 ; #BITGROUPS($601A,$06)
 $601C DEFB %10011001 ;
 $601D DEFB %10010100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($025F)".
 $601E DEFB $65       ; {Word configuration:
 $601F DEFB $42       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6020 DEFB %10011101 ; {Bit-packed letters (2 letters, 5 bits each):
 $6021 DEFB %00000000 ; #BITGROUPS($6020,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0263)".
 $6022 DEFB $DF       ; {Word configuration:
 $6023 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6024 DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6024,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0266)".
 $6025 DEFB $D1       ; {Word configuration:
 $6026 DEFB $10       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0268)".
 $6027 DEFB $D5       ; {Word configuration:
 $6028 DEFB $10       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($026A)".
 $6029 DEFB $DF       ; {Word configuration:
 $602A DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $602B DEFB %01110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $602C DEFB %01000000 ; #BITGROUPS($602B,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($026E)".
 $602D DEFB $5F       ; {Word configuration:
 $602E DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $602F DEFB %01111100 ; {Bit-packed letters (2 letters, 5 bits each):
 $6030 DEFB %10000000 ; #BITGROUPS($602F,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0272)".
 $6031 DEFB $2F       ; {Word configuration:
 $6032 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6033 DEFB %10111011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6034 DEFB %10000000 ; #BITGROUPS($6033,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0276)".
 $6035 DEFB $5F       ; {Word configuration:
 $6036 DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6037 DEFB %10010000 ; {Bit-packed letters (5 letters, 5 bits each):
 $6038 DEFB %01101110 ; #BITGROUPS($6037,$05)
 $6039 DEFB %01011001 ;
 $603A DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($027C)".
 $603B DEFB $30       ; {Word configuration:
 $603C DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $603D DEFB %01111100 ; {Bit-packed letters (2 letters, 5 bits each):
 $603E DEFB %00000000 ; #BITGROUPS($603D,$02)}

; Table Dictionary: "E"
;
; All dictionary words starting with "E".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0280)".
@Table_Dictionary_E
g$603F DEFB $2F       ; {Word configuration:
 $6040 DEFB $80       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6041 DEFW $0284     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0284)".
 $6043 DEFB $2F       ; {Word configuration:
 $6044 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6045 DEFB %00001100 ; {Bit-packed letters (3 letters, 5 bits each):
 $6046 DEFB %11101000 ; #BITGROUPS($6045,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0288)".
 $6047 DEFB $32       ; {Word configuration:
 $6048 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6049 DEFB %01101100 ; {Bit-packed letters (4 letters, 5 bits each):
 $604A DEFB %00101001 ; #BITGROUPS($6049,$04)
 $604B DEFB %10010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($028D)".
 $604C DEFB $6F       ; {Word configuration:
 $604D DEFB $06       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $604E DEFB %01110001 ; {Bit-packed letters (6 letters, 5 bits each):
 $604F DEFB %11011000 ; #BITGROUPS($604E,$06)
 $6050 DEFB %10011001 ;
 $6051 DEFB %10100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0293)".
 $6052 DEFB $DF       ; {Word configuration:
 $6053 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6054 DEFB %01111101 ; {Bit-packed letters (4 letters, 5 bits each):
 $6055 DEFB %01001110 ; #BITGROUPS($6054,$04)
 $6056 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0298)".
 $6057 DEFB $30       ; {Word configuration:
 $6058 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6059 DEFB %10100001 ; {Bit-packed letters (3 letters, 5 bits each):
 $605A DEFB %01100100 ; #BITGROUPS($6059,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($029C)".
 $605B DEFB $6F       ; {Word configuration:
 $605C DEFB $25       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $605D DEFB %10010000 ; {Bit-packed letters (5 letters, 5 bits each):
 $605E DEFB %01011100 ; #BITGROUPS($605D,$05)
 $605F DEFB %00110010 ;
 $6060 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02A2)".
 $6061 DEFB $DF       ; {Word configuration:
 $6062 DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6063 DEFB %10011101 ; {Bit-packed letters (5 letters, 5 bits each):
 $6064 DEFB %00000011 ; #BITGROUPS($6063,$05)
 $6065 DEFB %01000010 ;
 $6066 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02A8)".
 $6067 DEFB $35       ; {Word configuration:
 $6068 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6069 DEFB %10110001 ; {Bit-packed letters (3 letters, 5 bits each):
 $606A DEFB %01011100 ; #BITGROUPS($6069,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02AC)".
 $606B DEFB $DF       ; {Word configuration:
 $606C DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $606D DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($606D,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02AF)".
 $606E DEFB $9F       ; {Word configuration:
 $606F DEFB $B6       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6070 DEFW $0040     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $6072 DEFB %11001101 ; {Bit-packed letters (6 letters, 5 bits each):
 $6073 DEFB %00010000 ; #BITGROUPS($6072,$06)
 $6074 DEFB %10010111 ;
 $6075 DEFB %00011100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02B7)".
 $6076 DEFB $DF       ; {Word configuration:
 $6077 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6078 DEFB %01001001 ; {Bit-packed letters (6 letters, 5 bits each):
 $6079 DEFB %00001010 ; #BITGROUPS($6078,$06)
 $607A DEFB %11100001 ;
 $607B DEFB %10010100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02BD)".
 $607C DEFB $DF       ; {Word configuration:
 $607D DEFB $53       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $607E DEFB %10100011 ; {Bit-packed letters (3 letters, 5 bits each):
 $607F DEFB %00110010 ; #BITGROUPS($607E,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02C1)".
 $6080 DEFB $DF       ; {Word configuration:
 $6081 DEFB $0A       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6082 DEFB %11000000 ; {Bit-packed letters (10 letters, 5 bits each):
 $6083 DEFB %01011010 ; #BITGROUPS($6082,$0A)
 $6084 DEFB %10010111 ;
 $6085 DEFB %00000110 ;
 $6086 DEFB %10001001 ;
 $6087 DEFB %01111011 ;
 $6088 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02CA)".
 $6089 DEFB $30       ; {Word configuration:
 $608A DEFB $51       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $608B DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($608B,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02CD)".
 $608C DEFB $EF       ; {Word configuration:
 $608D DEFB $61       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $608E DEFB %00100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($608E,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02D0)".
 $608F DEFB $DF       ; {Word configuration:
 $6090 DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6091 DEFB %00011001 ; {Bit-packed letters (7 letters, 5 bits each):
 $6092 DEFB %01011000 ; #BITGROUPS($6091,$07)
 $6093 DEFB %11000010 ;
 $6094 DEFB %10111010 ;
 $6095 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02D7)".
 $6096 DEFB $9F       ; {Word configuration:
 $6097 DEFB $B2       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6098 DEFW $015E     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $609A DEFB %10000101 ; {Bit-packed letters (2 letters, 5 bits each):
 $609B DEFB %00000000 ; #BITGROUPS($609A,$02)}

; Table Dictionary: "F"
;
; All dictionary words starting with "F".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02DD)".
@Table_Dictionary_F
g$609C DEFB $DF       ; {Word configuration:
 $609D DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $609E DEFB %00001000 ; {Bit-packed letters (3 letters, 5 bits each):
 $609F DEFB %11001010 ; #BITGROUPS($609E,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02E1)".
 $60A0 DEFB $08       ; {Word configuration:
 $60A1 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60A2 DEFB %01001100 ; {Bit-packed letters (2 letters, 5 bits each):
 $60A3 DEFB %10000000 ; #BITGROUPS($60A2,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02E5)".
 $60A4 DEFB $6F       ; {Word configuration:
 $60A5 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60A6 DEFB %01100100 ; {Bit-packed letters (3 letters, 5 bits each):
 $60A7 DEFB %11001010 ; #BITGROUPS($60A6,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02E9)".
 $60A8 DEFB $D4       ; {Word configuration:
 $60A9 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60AA DEFB %01101001 ; {Bit-packed letters (2 letters, 5 bits each):
 $60AB DEFB %01000000 ; #BITGROUPS($60AA,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02ED)".
 $60AC DEFB $DF       ; {Word configuration:
 $60AD DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60AE DEFB %01110000 ; {Bit-packed letters (3 letters, 5 bits each):
 $60AF DEFB %11110010 ; #BITGROUPS($60AE,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02F1)".
 $60B0 DEFB $DF       ; {Word configuration:
 $60B1 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60B2 DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($60B2,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02F4)".
 $60B3 DEFB $D0       ; {Word configuration:
 $60B4 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60B5 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($60B5,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02F7)".
 $60B6 DEFB $DF       ; {Word configuration:
 $60B7 DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60B8 DEFB %00101011 ; {Bit-packed letters (5 letters, 5 bits each):
 $60B9 DEFB %00011000 ; #BITGROUPS($60B8,$05)
 $60BA DEFB %11111011 ;
 $60BB DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($02FD)".
 $60BC DEFB $6F       ; {Word configuration:
 $60BD DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60BE DEFB %01101000 ; {Bit-packed letters (4 letters, 5 bits each):
 $60BF DEFB %01011000 ; #BITGROUPS($60BE,$04)
 $60C0 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0302)".
 $60C1 DEFB $5F       ; {Word configuration:
 $60C2 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60C3 DEFB %01110001 ; {Bit-packed letters (4 letters, 5 bits each):
 $60C4 DEFB %00001011 ; #BITGROUPS($60C3,$04)
 $60C5 DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0307)".
 $60C6 DEFB $DF       ; {Word configuration:
 $60C7 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60C8 DEFB %10111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($60C8,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($030A)".
 $60C9 DEFB $5F       ; {Word configuration:
 $60CA DEFB $07       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60CB DEFB %00110011 ; {Bit-packed letters (7 letters, 5 bits each):
 $60CC DEFB %11101010 ; #BITGROUPS($60CB,$07)
 $60CD DEFB %11000101 ;
 $60CE DEFB %10010110 ;
 $60CF DEFB %01100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0311)".
 $60D0 DEFB $D4       ; {Word configuration:
 $60D1 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60D2 DEFB %01001011 ; {Bit-packed letters (2 letters, 5 bits each):
 $60D3 DEFB %10000000 ; #BITGROUPS($60D2,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0315)".
 $60D4 DEFB $50       ; {Word configuration:
 $60D5 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60D6 DEFB %10010001 ; {Bit-packed letters (2 letters, 5 bits each):
 $60D7 DEFB %01000000 ; #BITGROUPS($60D6,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0319)".
 $60D8 DEFB $5F       ; {Word configuration:
 $60D9 DEFB $35       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60DA DEFB %10000011 ; {Bit-packed letters (5 letters, 5 bits each):
 $60DB DEFB %00000010 ; #BITGROUPS($60DA,$05)
 $60DC DEFB %00110010 ;
 $60DD DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($031F)".
 $60DE DEFB $DF       ; {Word configuration:
 $60DF DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60E0 DEFB %10011101 ; {Bit-packed letters (2 letters, 5 bits each):
 $60E1 DEFB %00000000 ; #BITGROUPS($60E0,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0323)".
 $60E2 DEFB $5F       ; {Word configuration:
 $60E3 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60E4 DEFB %10011101 ; {Bit-packed letters (2 letters, 5 bits each):
 $60E5 DEFB %00000000 ; #BITGROUPS($60E4,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0327)".
 $60E6 DEFB $65       ; {Word configuration:
 $60E7 DEFB $06       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60E8 DEFB %01100010 ; {Bit-packed letters (6 letters, 5 bits each):
 $60E9 DEFB %01000110 ; #BITGROUPS($60E8,$06)
 $60EA DEFB %10110010 ;
 $60EB DEFB %11001000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($032D)".
 $60EC DEFB $5F       ; {Word configuration:
 $60ED DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60EE DEFB %01111011 ; {Bit-packed letters (5 letters, 5 bits each):
 $60EF DEFB %00001000 ; #BITGROUPS($60EE,$05)
 $60F0 DEFB %01011001 ;
 $60F1 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0333)".
 $60F2 DEFB $30       ; {Word configuration:
 $60F3 DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60F4 DEFB %01100011 ; {Bit-packed letters (3 letters, 5 bits each):
 $60F5 DEFB %11101110 ; #BITGROUPS($60F4,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0337)".
 $60F6 DEFB $5F       ; {Word configuration:
 $60F7 DEFB $18       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60F8 DEFB %01111101 ; {Bit-packed letters (8 letters, 5 bits each):
 $60F9 DEFB %00000101 ; #BITGROUPS($60F8,$08)
 $60FA DEFB %00100100 ;
 $60FB DEFB %10010000 ;
 $60FC DEFB %11100101 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($033E)".
 $60FD DEFB $7F       ; {Word configuration:
 $60FE DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $60FF DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($60FF,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0341)".
 $6100 DEFB $D4       ; {Word configuration:
 $6101 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6102 DEFB %10101011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6103 DEFB %10000000 ; #BITGROUPS($6102,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0345)".
 $6104 DEFB $5F       ; {Word configuration:
 $6105 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6106 DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6106,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0348)".
 $6107 DEFB $DF       ; {Word configuration:
 $6108 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6109 DEFB %10010001 ; {Bit-packed letters (3 letters, 5 bits each):
 $610A DEFB %01001010 ; #BITGROUPS($6109,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($034C)".
 $610B DEFB $D0       ; {Word configuration:
 $610C DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $610D DEFB %01001001 ; {Bit-packed letters (4 letters, 5 bits each):
 $610E DEFB %01011100 ; #BITGROUPS($610D,$04)
 $610F DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0351)".
 $6110 DEFB $7F       ; {Word configuration:
 $6111 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6112 DEFB %01111011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6113 DEFB %01000000 ; #BITGROUPS($6112,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0355)".
 $6114 DEFB $6F       ; {Word configuration:
 $6115 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6116 DEFB %01110101 ; {Bit-packed letters (2 letters, 5 bits each):
 $6117 DEFB %00000000 ; #BITGROUPS($6116,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0359)".
 $6118 DEFB $3F       ; {Word configuration:
 $6119 DEFB $83       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $611A DEFW $0494     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $611C DEFB %10101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $611D DEFB %11010110 ; #BITGROUPS($611C,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($035F)".
 $611E DEFB $6F       ; {Word configuration:
 $611F DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6120 DEFB %01100011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6121 DEFB %00000000 ; #BITGROUPS($6120,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0363)".
 $6122 DEFB $0F       ; {Word configuration:
 $6123 DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6124 DEFB %10010010 ; {Bit-packed letters (7 letters, 5 bits each):
 $6125 DEFB %01011111 ; #BITGROUPS($6124,$07)
 $6126 DEFB %01011001 ;
 $6127 DEFB %10110011 ;
 $6128 DEFB %00100000 ; }

; Table Dictionary: "G"
;
; All dictionary words starting with "G".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($036A)".
@Table_Dictionary_G
g$6129 DEFB $6F       ; {Word configuration:
 $612A DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $612B DEFB %00001100 ; {Bit-packed letters (5 letters, 5 bits each):
 $612C DEFB %10001000 ; #BITGROUPS($612B,$05)
 $612D DEFB %01010111 ;
 $612E DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0370)".
 $612F DEFB $5F       ; {Word configuration:
 $6130 DEFB $52       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6131 DEFB %00101100 ; {Bit-packed letters (2 letters, 5 bits each):
 $6132 DEFB %10000000 ; #BITGROUPS($6131,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0374)".
 $6133 DEFB $6F       ; {Word configuration:
 $6134 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6135 DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6135,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0377)".
 $6136 DEFB $5F       ; {Word configuration:
 $6137 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6138 DEFB %10100001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6139 DEFB %01000000 ; #BITGROUPS($6138,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($037B)".
 $613A DEFB $6F       ; {Word configuration:
 $613B DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $613C DEFB %00101100 ; {Bit-packed letters (5 letters, 5 bits each):
 $613D DEFB %10011010 ; #BITGROUPS($613C,$05)
 $613E DEFB %00010111 ;
 $613F DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0381)".
 $6140 DEFB $30       ; {Word configuration:
 $6141 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6142 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6142,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0384)".
 $6143 DEFB $6F       ; {Word configuration:
 $6144 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6145 DEFB %01001011 ; {Bit-packed letters (4 letters, 5 bits each):
 $6146 DEFB %00001011 ; #BITGROUPS($6145,$04)
 $6147 DEFB %00110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0389)".
 $6148 DEFB $30       ; {Word configuration:
 $6149 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $614A DEFB %10110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $614B DEFB %01000000 ; #BITGROUPS($614A,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($038D)".
 $614C DEFB $41       ; {Word configuration:
 $614D DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $614E DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($614E,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0390)".
 $614F DEFB $D5       ; {Word configuration:
 $6150 DEFB $10       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0392)".
 $6151 DEFB $DF       ; {Word configuration:
 $6152 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6153 DEFB %01110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6154 DEFB %01000000 ; #BITGROUPS($6153,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0396)".
 $6155 DEFB $0F       ; {Word configuration:
 $6156 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6157 DEFB %01111001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6158 DEFB %00000000 ; #BITGROUPS($6157,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($039A)".
 $6159 DEFB $DF       ; {Word configuration:
 $615A DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $615B DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($615B,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($039D)".
 $615C DEFB $5F       ; {Word configuration:
 $615D DEFB $09       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $615E DEFB %10010000 ; {Bit-packed letters (9 letters, 5 bits each):
 $615F DEFB %01011010 ; #BITGROUPS($615E,$09)
 $6160 DEFB %00011000 ;
 $6161 DEFB %00100001 ;
 $6162 DEFB %11101110 ;
 $6163 DEFB %00101000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03A5)".
 $6164 DEFB $5F       ; {Word configuration:
 $6165 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6166 DEFB %01111101 ; {Bit-packed letters (4 letters, 5 bits each):
 $6167 DEFB %01011100 ; #BITGROUPS($6166,$04)
 $6168 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03AA)".
 $6169 DEFB $6F       ; {Word configuration:
 $616A DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $616B DEFB %10101001 ; {Bit-packed letters (4 letters, 5 bits each):
 $616C DEFB %01100111 ; #BITGROUPS($616B,$04)
 $616D DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03AF)".
 $616E DEFB $5F       ; {Word configuration:
 $616F DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6170 DEFB %01001011 ; {Bit-packed letters (4 letters, 5 bits each):
 $6171 DEFB %00101001 ; #BITGROUPS($6170,$04)
 $6172 DEFB %10010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03B4)".
 $6173 DEFB $5F       ; {Word configuration:
 $6174 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6175 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6175,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03B7)".
 $6176 DEFB $DF       ; {Word configuration:
 $6177 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6178 DEFB %10110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6178,$01)

; Table Dictionary: "H"
;
; All dictionary words starting with "H".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03BA)".
@Table_Dictionary_H
g$6179 DEFB $EF       ; {Word configuration:
 $617A DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $617B DEFB %00001001 ; {Bit-packed letters (2 letters, 5 bits each):
 $617C DEFB %00000000 ; #BITGROUPS($617B,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03BE)".
 $617D DEFB $30       ; {Word configuration:
 $617E DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $617F DEFB %01001011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6180 DEFB %00000000 ; #BITGROUPS($617F,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03C2)".
 $6181 DEFB $5F       ; {Word configuration:
 $6182 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6183 DEFB %01100011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6184 DEFB %00000000 ; #BITGROUPS($6183,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03C6)".
 $6185 DEFB $5F       ; {Word configuration:
 $6186 DEFB $33       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6187 DEFB %10111000 ; {Bit-packed letters (3 letters, 5 bits each):
 $6188 DEFB %01110010 ; #BITGROUPS($6187,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03CA)".
 $6189 DEFB $50       ; {Word configuration:
 $618A DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $618B DEFB %01110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $618C DEFB %00000000 ; #BITGROUPS($618B,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03CE)".
 $618D DEFB $6F       ; {Word configuration:
 $618E DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $618F DEFB %10011011 ; {Bit-packed letters (3 letters, 5 bits each):
 $6190 DEFB %11011010 ; #BITGROUPS($618F,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03D2)".
 $6191 DEFB $5F       ; {Word configuration:
 $6192 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6193 DEFB %10000100 ; {Bit-packed letters (6 letters, 5 bits each):
 $6194 DEFB %00001010 ; #BITGROUPS($6193,$06)
 $6195 DEFB %11100010 ;
 $6196 DEFB %10010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03D8)".
 $6197 DEFB $EF       ; {Word configuration:
 $6198 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6199 DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6199,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03DB)".
 $619A DEFB $EF       ; {Word configuration:
 $619B DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $619C DEFB %10100001 ; {Bit-packed letters (3 letters, 5 bits each):
 $619D DEFB %01001000 ; #BITGROUPS($619C,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03DF)".
 $619E DEFB $D7       ; {Word configuration:
 $619F DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61A0 DEFB %10110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $61A1 DEFB %01000000 ; #BITGROUPS($61A0,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03E3)".
 $61A2 DEFB $9F       ; {Word configuration:
 $61A3 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61A4 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61A4,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03E6)".
 $61A5 DEFB $DF       ; {Word configuration:
 $61A6 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61A7 DEFB %00001001 ; {Bit-packed letters (2 letters, 5 bits each):
 $61A8 DEFB %00000000 ; #BITGROUPS($61A7,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03EA)".
 $61A9 DEFB $DF       ; {Word configuration:
 $61AA DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61AB DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61AB,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03ED)".
 $61AC DEFB $6F       ; {Word configuration:
 $61AD DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61AE DEFB %10110110 ; {Bit-packed letters (2 letters, 5 bits each):
 $61AF DEFB %01000000 ; #BITGROUPS($61AE,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03F1)".
 $61B0 DEFB $5F       ; {Word configuration:
 $61B1 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61B2 DEFB %00100001 ; {Bit-packed letters (3 letters, 5 bits each):
 $61B3 DEFB %11001010 ; #BITGROUPS($61B2,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03F5)".
 $61B4 DEFB $3F       ; {Word configuration:
 $61B5 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61B6 DEFB %01100011 ; {Bit-packed letters (3 letters, 5 bits each):
 $61B7 DEFB %00011110 ; #BITGROUPS($61B6,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03F9)".
 $61B8 DEFB $DF       ; {Word configuration:
 $61B9 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61BA DEFB %10000000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61BA,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03FC)".
 $61BB DEFB $DF       ; {Word configuration:
 $61BC DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61BD DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61BD,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($03FF)".
 $61BE DEFB $7F       ; {Word configuration:
 $61BF DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61C0 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61C0,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0402)".
 $61C1 DEFB $5F       ; {Word configuration:
 $61C2 DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61C3 DEFB %10011001 ; {Bit-packed letters (4 letters, 5 bits each):
 $61C4 DEFB %01011000 ; #BITGROUPS($61C3,$04)
 $61C5 DEFB %01100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0407)".
 $61C6 DEFB $DF       ; {Word configuration:
 $61C7 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61C8 DEFB %01001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61C8,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($040A)".
 $61C9 DEFB $EF       ; {Word configuration:
 $61CA DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61CB DEFB %00100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61CB,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($040D)".
 $61CC DEFB $6F       ; {Word configuration:
 $61CD DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61CE DEFB %00100001 ; {Bit-packed letters (3 letters, 5 bits each):
 $61CF DEFB %01011100 ; #BITGROUPS($61CE,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0411)".
 $61D0 DEFB $DF       ; {Word configuration:
 $61D1 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61D2 DEFB %01101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61D2,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0414)".
 $61D3 DEFB $DF       ; {Word configuration:
 $61D4 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61D5 DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61D5,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0417)".
 $61D6 DEFB $DF       ; {Word configuration:
 $61D7 DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61D8 DEFB %01111011 ; {Bit-packed letters (5 letters, 5 bits each):
 $61D9 DEFB %00011010 ; #BITGROUPS($61D8,$05)
 $61DA DEFB %01011001 ;
 $61DB DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($041D)".
 $61DC DEFB $5F       ; {Word configuration:
 $61DD DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61DE DEFB %10101100 ; {Bit-packed letters (3 letters, 5 bits each):
 $61DF DEFB %11001010 ; #BITGROUPS($61DE,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0421)".
 $61E0 DEFB $DF       ; {Word configuration:
 $61E1 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61E2 DEFB %10111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61E2,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0424)".
 $61E3 DEFB $DF       ; {Word configuration:
 $61E4 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61E5 DEFB %10101100 ; {Bit-packed letters (3 letters, 5 bits each):
 $61E6 DEFB %10101000 ; #BITGROUPS($61E5,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0428)".
 $61E7 DEFB $D4       ; {Word configuration:
 $61E8 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61E9 DEFB %10011000 ; {Bit-packed letters (4 letters, 5 bits each):
 $61EA DEFB %10000010 ; #BITGROUPS($61E9,$04)
 $61EB DEFB %11100000 ; }

; Table Dictionary: "I"
;
; All dictionary words starting with "I".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($042D)".
@Table_Dictionary_I
g$61EC DEFB $0F       ; {Word configuration:
 $61ED DEFB $80       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61EE DEFW $047A     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0431)".
 $61F0 DEFB $5F       ; {Word configuration:
 $61F1 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61F2 DEFB %00100010 ; {Bit-packed letters (4 letters, 5 bits each):
 $61F3 DEFB %01011111 ; #BITGROUPS($61F2,$04)
 $61F4 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0436)".
 $61F5 DEFB $DF       ; {Word configuration:
 $61F6 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61F7 DEFB %00110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($61F7,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0439)".
 $61F8 DEFB $DF       ; {Word configuration:
 $61F9 DEFB $06       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $61FA DEFB %01101000 ; {Bit-packed letters (6 letters, 5 bits each):
 $61FB DEFB %01001110 ; #BITGROUPS($61FA,$06)
 $61FC DEFB %10010111 ;
 $61FD DEFB %00010100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($043F)".
 $61FE DEFB $08       ; {Word configuration:
 $61FF DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6200 DEFB %01101001 ; {Bit-packed letters (7 letters, 5 bits each):
 $6201 DEFB %01001000 ; #BITGROUPS($6200,$07)
 $6202 DEFB %10010000 ;
 $6203 DEFB %11010000 ;
 $6204 DEFB %10100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0446)".
 $6205 DEFB $DF       ; {Word configuration:
 $6206 DEFB $18       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6207 DEFB %10000011 ; {Bit-packed letters (8 letters, 5 bits each):
 $6208 DEFB %11100101 ; #BITGROUPS($6207,$08)
 $6209 DEFB %01000000 ;
 $620A DEFB %10111000 ;
 $620B DEFB %01100101 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($044D)".
 $620C DEFB $6F       ; {Word configuration:
 $620D DEFB $71       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $620E DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($620E,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0450)".
 $620F DEFB $1F       ; {Word configuration:
 $6210 DEFB $81       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6211 DEFW $0956     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $6213 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6213,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0455)".
 $6214 DEFB $D0       ; {Word configuration:
 $6215 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6216 DEFB %00011010 ; {Bit-packed letters (6 letters, 5 bits each):
 $6217 DEFB %01001000 ; #BITGROUPS($6216,$06)
 $6218 DEFB %01010111 ;
 $6219 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($045B)".
 $621A DEFB $6F       ; {Word configuration:
 $621B DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $621C DEFB %00100010 ; {Bit-packed letters (4 letters, 5 bits each):
 $621D DEFB %01000010 ; #BITGROUPS($621C,$04)
 $621E DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0460)".
 $621F DEFB $5F       ; {Word configuration:
 $6220 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6221 DEFB %01110011 ; {Bit-packed letters (6 letters, 5 bits each):
 $6222 DEFB %11000110 ; #BITGROUPS($6221,$06)
 $6223 DEFB %01010111 ;
 $6224 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0466)".
 $6225 DEFB $7F       ; {Word configuration:
 $6226 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6227 DEFB %10011010 ; {Bit-packed letters (4 letters, 5 bits each):
 $6228 DEFB %01001000 ; #BITGROUPS($6227,$04)
 $6229 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($046B)".
 $622A DEFB $6F       ; {Word configuration:
 $622B DEFB $26       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $622C DEFB %10000001 ; {Bit-packed letters (6 letters, 5 bits each):
 $622D DEFB %01000111 ; #BITGROUPS($622C,$06)
 $622E DEFB %01000111 ;
 $622F DEFB %11001000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0471)".
 $6230 DEFB $DF       ; {Word configuration:
 $6231 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6232 DEFB %10100001 ; {Bit-packed letters (6 letters, 5 bits each):
 $6233 DEFB %01100100 ; #BITGROUPS($6232,$06)
 $6234 DEFB %01011001 ;
 $6235 DEFB %11010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0477)".
 $6236 DEFB $1F       ; {Word configuration:
 $6237 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6238 DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6238,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($047A)".
 $6239 DEFB $3F       ; {Word configuration:
 $623A DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $623B DEFB %10110001 ; {Bit-packed letters (7 letters, 5 bits each):
 $623C DEFB %01011101 ; #BITGROUPS($623B,$07)
 $623D DEFB %01000111 ;
 $623E DEFB %11001011 ;
 $623F DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0481)".
 $6240 DEFB $D6       ; {Word configuration:
 $6241 DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6242 DEFB %01111011 ; {Bit-packed letters (3 letters, 5 bits each):
 $6243 DEFB %00101100 ; #BITGROUPS($6242,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0485)".
 $6244 DEFB $EF       ; {Word configuration:
 $6245 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6246 DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6246,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0488)".
 $6247 DEFB $9F       ; {Word configuration:
 $6248 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6249 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6249,$01)

; Table Dictionary: "J"
;
; All dictionary words starting with "J".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($048B)".
@Table_Dictionary_J
g$624A DEFB $5F       ; {Word configuration:
 $624B DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $624C DEFB %01111011 ; {Bit-packed letters (4 letters, 5 bits each):
 $624D DEFB %10001011 ; #BITGROUPS($624C,$04)
 $624E DEFB %00110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0490)".
 $624F DEFB $DF       ; {Word configuration:
 $6250 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6251 DEFB %10101100 ; {Bit-packed letters (3 letters, 5 bits each):
 $6252 DEFB %11101000 ; #BITGROUPS($6251,$03)}

; Table Dictionary: "K"
;
; All dictionary words starting with "K".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0494)".
@Table_Dictionary_K
g$6253 DEFB $30       ; {Word configuration:
 $6254 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6255 DEFB %01001011 ; {Bit-packed letters (3 letters, 5 bits each):
 $6256 DEFB %00011000 ; #BITGROUPS($6255,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0498)".
 $6257 DEFB $EF       ; {Word configuration:
 $6258 DEFB $32       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6259 DEFB %00101001 ; {Bit-packed letters (2 letters, 5 bits each):
 $625A DEFB %00000000 ; #BITGROUPS($6259,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($049C)".
 $625B DEFB $6F       ; {Word configuration:
 $625C DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $625D DEFB %01110001 ; {Bit-packed letters (3 letters, 5 bits each):
 $625E DEFB %11100110 ; #BITGROUPS($625D,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04A0)".
 $625F DEFB $5F       ; {Word configuration:
 $6260 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6261 DEFB %10100000 ; {Bit-packed letters (5 letters, 5 bits each):
 $6262 DEFB %11010000 ; #BITGROUPS($6261,$05)
 $6263 DEFB %01010111 ;
 $6264 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04A6)".
 $6265 DEFB $D6       ; {Word configuration:
 $6266 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6267 DEFB %01110011 ; {Bit-packed letters (4 letters, 5 bits each):
 $6268 DEFB %11000110 ; #BITGROUPS($6267,$04)
 $6269 DEFB %10110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04AB)".
 $626A DEFB $D0       ; {Word configuration:
 $626B DEFB $40       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04AD)".
 $626C DEFB $D0       ; {Word configuration:
 $626D DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $626E DEFB %10111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($626E,$01)

; Table Dictionary: "L"
;
; All dictionary words starting with "L".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04B0)".
@Table_Dictionary_L
g$626F DEFB $0F       ; {Word configuration:
 $6270 DEFB $80       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6271 DEFW $0523     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04B4)".
 $6273 DEFB $5F       ; {Word configuration:
 $6274 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6275 DEFB %00001000 ; {Bit-packed letters (4 letters, 5 bits each):
 $6276 DEFB %10001010 ; #BITGROUPS($6275,$04)
 $6277 DEFB %11000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04B9)".
 $6278 DEFB $5F       ; {Word configuration:
 $6279 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $627A DEFB %01101100 ; {Bit-packed letters (2 letters, 5 bits each):
 $627B DEFB %00000000 ; #BITGROUPS($627A,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04BD)".
 $627C DEFB $5F       ; {Word configuration:
 $627D DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $627E DEFB %01110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $627F DEFB %01000000 ; #BITGROUPS($627E,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04C1)".
 $6280 DEFB $6F       ; {Word configuration:
 $6281 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6282 DEFB %10010001 ; {Bit-packed letters (3 letters, 5 bits each):
 $6283 DEFB %11001010 ; #BITGROUPS($6282,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04C5)".
 $6284 DEFB $DF       ; {Word configuration:
 $6285 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6286 DEFB %10011101 ; {Bit-packed letters (2 letters, 5 bits each):
 $6287 DEFB %00000000 ; #BITGROUPS($6286,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04C9)".
 $6288 DEFB $DF       ; {Word configuration:
 $6289 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $628A DEFB %10100001 ; {Bit-packed letters (3 letters, 5 bits each):
 $628B DEFB %01100100 ; #BITGROUPS($628A,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04CD)".
 $628C DEFB $DF       ; {Word configuration:
 $628D DEFB $06       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $628E DEFB %00101000 ; {Bit-packed letters (6 letters, 5 bits each):
 $628F DEFB %01101000 ; #BITGROUPS($628E,$06)
 $6290 DEFB %10000010 ;
 $6291 DEFB %11001000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04D3)".
 $6292 DEFB $6F       ; {Word configuration:
 $6293 DEFB $64       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6294 DEFB %01000001 ; {Bit-packed letters (4 letters, 5 bits each):
 $6295 DEFB %01000010 ; #BITGROUPS($6294,$04)
 $6296 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04D8)".
 $6297 DEFB $DF       ; {Word configuration:
 $6298 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6299 DEFB %00110101 ; {Bit-packed letters (2 letters, 5 bits each):
 $629A DEFB %00000000 ; #BITGROUPS($6299,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04DC)".
 $629B DEFB $5F       ; {Word configuration:
 $629C DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $629D DEFB %10011101 ; {Bit-packed letters (6 letters, 5 bits each):
 $629E DEFB %00100100 ; #BITGROUPS($629D,$06)
 $629F DEFB %00010010 ;
 $62A0 DEFB %00010100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04E2)".
 $62A1 DEFB $DF       ; {Word configuration:
 $62A2 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62A3 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($62A3,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04E5)".
 $62A4 DEFB $5F       ; {Word configuration:
 $62A5 DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62A6 DEFB %10100001 ; {Bit-packed letters (4 letters, 5 bits each):
 $62A7 DEFB %01100101 ; #BITGROUPS($62A6,$04)
 $62A8 DEFB %00110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04EA)".
 $62A9 DEFB $5F       ; {Word configuration:
 $62AA DEFB $06       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62AB DEFB %01001000 ; {Bit-packed letters (6 letters, 5 bits each):
 $62AC DEFB %10100100 ; #BITGROUPS($62AB,$06)
 $62AD DEFB %00011001 ;
 $62AE DEFB %01100100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04F0)".
 $62AF DEFB $6F       ; {Word configuration:
 $62B0 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62B1 DEFB %00111010 ; {Bit-packed letters (3 letters, 5 bits each):
 $62B2 DEFB %00101000 ; #BITGROUPS($62B1,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04F4)".
 $62B3 DEFB $D6       ; {Word configuration:
 $62B4 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62B5 DEFB %01011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($62B5,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04F7)".
 $62B6 DEFB $DF       ; {Word configuration:
 $62B7 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62B8 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($62B8,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04FA)".
 $62B9 DEFB $D8       ; {Word configuration:
 $62BA DEFB $30       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($04FC)".
 $62BB DEFB $DF       ; {Word configuration:
 $62BC DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62BD DEFB %10110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $62BE DEFB %01000000 ; #BITGROUPS($62BD,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0500)".
 $62BF DEFB $D0       ; {Word configuration:
 $62C0 DEFB $30       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0502)".
 $62C1 DEFB $0F       ; {Word configuration:
 $62C2 DEFB $81       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62C3 DEFW $0523     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $62C5 DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($62C5,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0507)".
 $62C6 DEFB $9F       ; {Word configuration:
 $62C7 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62C8 DEFB %00001001 ; {Bit-packed letters (2 letters, 5 bits each):
 $62C9 DEFB %00000000 ; #BITGROUPS($62C8,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($050B)".
 $62CA DEFB $6F       ; {Word configuration:
 $62CB DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62CC DEFB %00011000 ; {Bit-packed letters (3 letters, 5 bits each):
 $62CD DEFB %01011000 ; #BITGROUPS($62CC,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($050F)".
 $62CE DEFB $5F       ; {Word configuration:
 $62CF DEFB $34       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62D0 DEFB %10100010 ; {Bit-packed letters (4 letters, 5 bits each):
 $62D1 DEFB %01011110 ; #BITGROUPS($62D0,$04)
 $62D2 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0514)".
 $62D3 DEFB $3F       ; {Word configuration:
 $62D4 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62D5 DEFB %01011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($62D5,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0517)".
 $62D6 DEFB $6F       ; {Word configuration:
 $62D7 DEFB $32       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62D8 DEFB %00101001 ; {Bit-packed letters (2 letters, 5 bits each):
 $62D9 DEFB %00000000 ; #BITGROUPS($62D8,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($051B)".
 $62DA DEFB $DF       ; {Word configuration:
 $62DB DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62DC DEFB %01110001 ; {Bit-packed letters (4 letters, 5 bits each):
 $62DD DEFB %00011110 ; #BITGROUPS($62DC,$04)
 $62DE DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0520)".
 $62DF DEFB $6F       ; {Word configuration:
 $62E0 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62E1 DEFB %00111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($62E1,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0523)".
 $62E2 DEFB $30       ; {Word configuration:
 $62E3 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62E4 DEFB %01111010 ; {Bit-packed letters (2 letters, 5 bits each):
 $62E5 DEFB %11000000 ; #BITGROUPS($62E4,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0527)".
 $62E6 DEFB $DF       ; {Word configuration:
 $62E7 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62E8 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($62E8,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($052A)".
 $62E9 DEFB $6F       ; {Word configuration:
 $62EA DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62EB DEFB %10101011 ; {Bit-packed letters (4 letters, 5 bits each):
 $62EC DEFB %10001110 ; #BITGROUPS($62EB,$04)
 $62ED DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($052F)".
 $62EE DEFB $D5       ; {Word configuration:
 $62EF DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62F0 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($62F0,$01)

; Table Dictionary: "M"
;
; All dictionary words starting with "M".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0532)".
@Table_Dictionary_M
g$62F1 DEFB $08       ; {Word configuration:
 $62F2 DEFB $82       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62F3 DEFW $0363     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $62F5 DEFB %00001001 ; {Bit-packed letters (2 letters, 5 bits each):
 $62F6 DEFB %00000000 ; #BITGROUPS($62F5,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0538)".
 $62F7 DEFB $EF       ; {Word configuration:
 $62F8 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62F9 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($62F9,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($053B)".
 $62FA DEFB $5F       ; {Word configuration:
 $62FB DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $62FC DEFB %01001001 ; {Bit-packed letters (2 letters, 5 bits each):
 $62FD DEFB %00000000 ; #BITGROUPS($62FC,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($053F)".
 $62FE DEFB $6F       ; {Word configuration:
 $62FF DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6300 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6300,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0542)".
 $6301 DEFB $6F       ; {Word configuration:
 $6302 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6303 DEFB %01010011 ; {Bit-packed letters (3 letters, 5 bits each):
 $6304 DEFB %11100100 ; #BITGROUPS($6303,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0546)".
 $6305 DEFB $5F       ; {Word configuration:
 $6306 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6307 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6307,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0549)".
 $6308 DEFB $6F       ; {Word configuration:
 $6309 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $630A DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($630A,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($054C)".
 $630B DEFB $DF       ; {Word configuration:
 $630C DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $630D DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($630D,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($054F)".
 $630E DEFB $50       ; {Word configuration:
 $630F DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6310 DEFB %10010010 ; {Bit-packed letters (2 letters, 5 bits each):
 $6311 DEFB %11000000 ; #BITGROUPS($6310,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0553)".
 $6312 DEFB $6F       ; {Word configuration:
 $6313 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6314 DEFB %10011101 ; {Bit-packed letters (4 letters, 5 bits each):
 $6315 DEFB %00001011 ; #BITGROUPS($6314,$04)
 $6316 DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0558)".
 $6317 DEFB $DF       ; {Word configuration:
 $6318 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6319 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6319,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($055B)".
 $631A DEFB $5F       ; {Word configuration:
 $631B DEFB $81       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $631C DEFW $09EE     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $631E DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($631E,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0560)".
 $631F DEFB $DF       ; {Word configuration:
 $6320 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6321 DEFB %00101101 ; {Bit-packed letters (2 letters, 5 bits each):
 $6322 DEFB %00000000 ; #BITGROUPS($6321,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0564)".
 $6323 DEFB $DF       ; {Word configuration:
 $6324 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6325 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6325,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0567)".
 $6326 DEFB $6F       ; {Word configuration:
 $6327 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6328 DEFB %01001011 ; {Bit-packed letters (3 letters, 5 bits each):
 $6329 DEFB %00011000 ; #BITGROUPS($6328,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($056B)".
 $632A DEFB $6F       ; {Word configuration:
 $632B DEFB $92       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $632C DEFW $09F2     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $632E DEFB %01110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $632F DEFB %01000000 ; #BITGROUPS($632E,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0571)".
 $6330 DEFB $6F       ; {Word configuration:
 $6331 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6332 DEFB %10011100 ; {Bit-packed letters (2 letters, 5 bits each):
 $6333 DEFB %11000000 ; #BITGROUPS($6332,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0575)".
 $6334 DEFB $5F       ; {Word configuration:
 $6335 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6336 DEFB %01111011 ; {Bit-packed letters (4 letters, 5 bits each):
 $6337 DEFB %10001011 ; #BITGROUPS($6336,$04)
 $6338 DEFB %10010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($057A)".
 $6339 DEFB $DF       ; {Word configuration:
 $633A DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $633B DEFB %10010001 ; {Bit-packed letters (2 letters, 5 bits each):
 $633C DEFB %01000000 ; #BITGROUPS($633B,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($057E)".
 $633D DEFB $35       ; {Word configuration:
 $633E DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $633F DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($633F,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0581)".
 $6340 DEFB $DF       ; {Word configuration:
 $6341 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6342 DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6342,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0584)".
 $6343 DEFB $6F       ; {Word configuration:
 $6344 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6345 DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6345,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0587)".
 $6346 DEFB $DF       ; {Word configuration:
 $6347 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6348 DEFB %10101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $6349 DEFB %11010000 ; #BITGROUPS($6348,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($058B)".
 $634A DEFB $D6       ; {Word configuration:
 $634B DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $634C DEFB %10010001 ; {Bit-packed letters (4 letters, 5 bits each):
 $634D DEFB %00001011 ; #BITGROUPS($634C,$04)
 $634E DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0590)".
 $634F DEFB $DF       ; {Word configuration:
 $6350 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6351 DEFB %10011101 ; {Bit-packed letters (2 letters, 5 bits each):
 $6352 DEFB %00000000 ; #BITGROUPS($6351,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0594)".
 $6353 DEFB $6F       ; {Word configuration:
 $6354 DEFB $81       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6355 DEFW $09F2     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $6357 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6357,$01)

; Table Dictionary: "N"
;
; All dictionary words starting with "N".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0599)".
@Table_Dictionary_N
g$6358 DEFB $2F       ; {Word configuration:
 $6359 DEFB $80       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $635A DEFW $05C3     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($059D)".
 $635C DEFB $DF       ; {Word configuration:
 $635D DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $635E DEFB %00001100 ; {Bit-packed letters (4 letters, 5 bits each):
 $635F DEFB %11101001 ; #BITGROUPS($635E,$04)
 $6360 DEFB %10010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05A2)".
 $6361 DEFB $2F       ; {Word configuration:
 $6362 DEFB $81       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6363 DEFW $05C7     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $6365 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6365,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05A7)".
 $6366 DEFB $DF       ; {Word configuration:
 $6367 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6368 DEFB %10110001 ; {Bit-packed letters (3 letters, 5 bits each):
 $6369 DEFB %01100100 ; #BITGROUPS($6368,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05AB)".
 $636A DEFB $D0       ; {Word configuration:
 $636B DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $636C DEFB %10111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($636C,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05AE)".
 $636D DEFB $3F       ; {Word configuration:
 $636E DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $636F DEFB %01001001 ; {Bit-packed letters (4 letters, 5 bits each):
 $6370 DEFB %11010001 ; #BITGROUPS($636F,$04)
 $6371 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05B3)".
 $6372 DEFB $9F       ; {Word configuration:
 $6373 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6374 DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6374,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05B6)".
 $6375 DEFB $DF       ; {Word configuration:
 $6376 DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6377 DEFB %00011101 ; {Bit-packed letters (7 letters, 5 bits each):
 $6378 DEFB %00101011 ; #BITGROUPS($6377,$07)
 $6379 DEFB %00100111 ;
 $637A DEFB %00010110 ;
 $637B DEFB %01100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05BD)".
 $637C DEFB $9F       ; {Word configuration:
 $637D DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $637E DEFB %10000100 ; {Bit-packed letters (5 letters, 5 bits each):
 $637F DEFB %10010010 ; #BITGROUPS($637E,$05)
 $6380 DEFB %11101010 ;
 $6381 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05C3)".
 $6382 DEFB $2F       ; {Word configuration:
 $6383 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6384 DEFB %10010101 ; {Bit-packed letters (3 letters, 5 bits each):
 $6385 DEFB %00010000 ; #BITGROUPS($6384,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05C7)".
 $6386 DEFB $2F       ; {Word configuration:
 $6387 DEFB $44       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6388 DEFB %00101000 ; {Bit-packed letters (4 letters, 5 bits each):
 $6389 DEFB %01100111 ; #BITGROUPS($6388,$04)
 $638A DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05CC)".
 $638B DEFB $6F       ; {Word configuration:
 $638C DEFB $52       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $638D DEFB %10010011 ; {Bit-packed letters (2 letters, 5 bits each):
 $638E DEFB %10000000 ; #BITGROUPS($638D,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05D0)".
 $638F DEFB $2F       ; {Word configuration:
 $6390 DEFB $44       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6391 DEFB %10111001 ; {Bit-packed letters (4 letters, 5 bits each):
 $6392 DEFB %01100111 ; #BITGROUPS($6391,$04)
 $6393 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05D5)".
 $6394 DEFB $DF       ; {Word configuration:
 $6395 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6396 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6396,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05D8)".
 $6397 DEFB $5F       ; {Word configuration:
 $6398 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6399 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6399,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05DB)".
 $639A DEFB $DF       ; {Word configuration:
 $639B DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $639C DEFB %01000010 ; {Bit-packed letters (4 letters, 5 bits each):
 $639D DEFB %01011100 ; #BITGROUPS($639C,$04)
 $639E DEFB %01110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05E0)".
 $639F DEFB $DF       ; {Word configuration:
 $63A0 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63A1 DEFB %10111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($63A1,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05E3)".
 $63A2 DEFB $2F       ; {Word configuration:
 $63A3 DEFB $81       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63A4 DEFW $05D0     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $63A6 DEFB %10111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($63A6,$01)

; Table Dictionary: "O"
;
; All dictionary words starting with "O".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05E8)".
@Table_Dictionary_O
g$63A7 DEFB $6F       ; {Word configuration:
 $63A8 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63A9 DEFB %00001010 ; {Bit-packed letters (2 letters, 5 bits each):
 $63AA DEFB %11000000 ; #BITGROUPS($63A9,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05EC)".
 $63AB DEFB $7F       ; {Word configuration:
 $63AC DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63AD DEFB %00110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($63AD,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05EF)".
 $63AE DEFB $7F       ; {Word configuration:
 $63AF DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63B0 DEFB %00110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($63B0,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05F2)".
 $63B1 DEFB $DF       ; {Word configuration:
 $63B2 DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63B3 DEFB %01001000 ; {Bit-packed letters (4 letters, 5 bits each):
 $63B4 DEFB %11001011 ; #BITGROUPS($63B3,$04)
 $63B5 DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05F7)".
 $63B6 DEFB $6F       ; {Word configuration:
 $63B7 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63B8 DEFB %01001011 ; {Bit-packed letters (2 letters, 5 bits each):
 $63B9 DEFB %00000000 ; #BITGROUPS($63B8,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05FB)".
 $63BA DEFB $6F       ; {Word configuration:
 $63BB DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63BC DEFB %01100001 ; {Bit-packed letters (2 letters, 5 bits each):
 $63BD DEFB %00000000 ; #BITGROUPS($63BC,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($05FF)".
 $63BE DEFB $7F       ; {Word configuration:
 $63BF DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63C0 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($63C0,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0602)".
 $63C1 DEFB $D8       ; {Word configuration:
 $63C2 DEFB $10       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0604)".
 $63C3 DEFB $5F       ; {Word configuration:
 $63C4 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63C5 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($63C5,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0607)".
 $63C6 DEFB $7F       ; {Word configuration:
 $63C7 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63C8 DEFB %10100011 ; {Bit-packed letters (2 letters, 5 bits each):
 $63C9 DEFB %11000000 ; #BITGROUPS($63C8,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($060B)".
 $63CA DEFB $30       ; {Word configuration:
 $63CB DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63CC DEFB %10000001 ; {Bit-packed letters (3 letters, 5 bits each):
 $63CD DEFB %01011100 ; #BITGROUPS($63CC,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($060F)".
 $63CE DEFB $6F       ; {Word configuration:
 $63CF DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63D0 DEFB %01001101 ; {Bit-packed letters (3 letters, 5 bits each):
 $63D1 DEFB %01011010 ; #BITGROUPS($63D0,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0613)".
 $63D2 DEFB $DF       ; {Word configuration:
 $63D3 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63D4 DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($63D4,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0616)".
 $63D5 DEFB $6F       ; {Word configuration:
 $63D6 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63D7 DEFB %01110000 ; {Bit-packed letters (4 letters, 5 bits each):
 $63D8 DEFB %01101000 ; #BITGROUPS($63D7,$04)
 $63D9 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($061B)".
 $63DA DEFB $D0       ; {Word configuration:
 $63DB DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63DC DEFB %10100010 ; {Bit-packed letters (4 letters, 5 bits each):
 $63DD DEFB %00001011 ; #BITGROUPS($63DC,$04)
 $63DE DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0620)".
 $63DF DEFB $7F       ; {Word configuration:
 $63E0 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63E1 DEFB %10101101 ; {Bit-packed letters (2 letters, 5 bits each):
 $63E2 DEFB %00000000 ; #BITGROUPS($63E1,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0624)".
 $63E3 DEFB $6F       ; {Word configuration:
 $63E4 DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63E5 DEFB %10011010 ; {Bit-packed letters (4 letters, 5 bits each):
 $63E6 DEFB %01001000 ; #BITGROUPS($63E5,$04)
 $63E7 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0629)".
 $63E8 DEFB $DF       ; {Word configuration:
 $63E9 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63EA DEFB %10110001 ; {Bit-packed letters (3 letters, 5 bits each):
 $63EB DEFB %01100100 ; #BITGROUPS($63EA,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($062D)".
 $63EC DEFB $DF       ; {Word configuration:
 $63ED DEFB $34       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63EE DEFB %01000001 ; {Bit-packed letters (4 letters, 5 bits each):
 $63EF DEFB %01000011 ; #BITGROUPS($63EE,$04)
 $63F0 DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0632)".
 $63F1 DEFB $EF       ; {Word configuration:
 $63F2 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63F3 DEFB %10111011 ; {Bit-packed letters (3 letters, 5 bits each):
 $63F4 DEFB %10100110 ; #BITGROUPS($63F3,$03)}

; Table Dictionary: "P"
;
; All dictionary words starting with "P".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0636)".
@Table_Dictionary_P
g$63F5 DEFB $6F       ; {Word configuration:
 $63F6 DEFB $09       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63F7 DEFB %00001001 ; {Bit-packed letters (9 letters, 5 bits each):
 $63F8 DEFB %00001000 ; #BITGROUPS($63F7,$09)
 $63F9 DEFB %10010111 ;
 $63FA DEFB %00011110 ;
 $63FB DEFB %10001111 ;
 $63FC DEFB %01110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($063E)".
 $63FD DEFB $6F       ; {Word configuration:
 $63FE DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $63FF DEFB %01100000 ; {Bit-packed letters (4 letters, 5 bits each):
 $6400 DEFB %01000110 ; #BITGROUPS($63FF,$04)
 $6401 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0643)".
 $6402 DEFB $5F       ; {Word configuration:
 $6403 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6404 DEFB %01110101 ; {Bit-packed letters (4 letters, 5 bits each):
 $6405 DEFB %00100101 ; #BITGROUPS($6404,$04)
 $6406 DEFB %10010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0648)".
 $6407 DEFB $50       ; {Word configuration:
 $6408 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6409 DEFB %10000001 ; {Bit-packed letters (3 letters, 5 bits each):
 $640A DEFB %01100100 ; #BITGROUPS($6409,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($064C)".
 $640B DEFB $6F       ; {Word configuration:
 $640C DEFB $18       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $640D DEFB %10010011 ; {Bit-packed letters (8 letters, 5 bits each):
 $640E DEFB %00010010 ; #BITGROUPS($640D,$08)
 $640F DEFB %00010110 ;
 $6410 DEFB %10010101 ;
 $6411 DEFB %11010100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0653)".
 $6412 DEFB $5F       ; {Word configuration:
 $6413 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6414 DEFB %10011100 ; {Bit-packed letters (5 letters, 5 bits each):
 $6415 DEFB %11000010 ; #BITGROUPS($6414,$05)
 $6416 DEFB %01110010 ;
 $6417 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0659)".
 $6418 DEFB $DF       ; {Word configuration:
 $6419 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $641A DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($641A,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($065C)".
 $641B DEFB $5F       ; {Word configuration:
 $641C DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $641D DEFB %10100010 ; {Bit-packed letters (2 letters, 5 bits each):
 $641E DEFB %00000000 ; #BITGROUPS($641D,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0660)".
 $641F DEFB $9F       ; {Word configuration:
 $6420 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6421 DEFB %10101100 ; {Bit-packed letters (3 letters, 5 bits each):
 $6422 DEFB %11001010 ; #BITGROUPS($6421,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0664)".
 $6423 DEFB $30       ; {Word configuration:
 $6424 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6425 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6425,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0667)".
 $6426 DEFB $DF       ; {Word configuration:
 $6427 DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6428 DEFB %00101011 ; {Bit-packed letters (5 letters, 5 bits each):
 $6429 DEFB %11100000 ; #BITGROUPS($6428,$05)
 $642A DEFB %11000010 ;
 $642B DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($066D)".
 $642C DEFB $6F       ; {Word configuration:
 $642D DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $642E DEFB %10010000 ; {Bit-packed letters (6 letters, 5 bits each):
 $642F DEFB %11010011 ; #BITGROUPS($642E,$06)
 $6430 DEFB %01100000 ;
 $6431 DEFB %10110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0673)".
 $6432 DEFB $D0       ; {Word configuration:
 $6433 DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6434 DEFB %01000000 ; {Bit-packed letters (3 letters, 5 bits each):
 $6435 DEFB %01100000 ; #BITGROUPS($6434,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0677)".
 $6436 DEFB $6F       ; {Word configuration:
 $6437 DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6438 DEFB %10011010 ; {Bit-packed letters (4 letters, 5 bits each):
 $6439 DEFB %01000010 ; #BITGROUPS($6438,$04)
 $643A DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($067C)".
 $643B DEFB $5F       ; {Word configuration:
 $643C DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $643D DEFB %01000010 ; {Bit-packed letters (5 letters, 5 bits each):
 $643E DEFB %01100001 ; #BITGROUPS($643D,$05)
 $643F DEFB %00001001 ;
 $6440 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0682)".
 $6441 DEFB $5F       ; {Word configuration:
 $6442 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6443 DEFB %01001000 ; {Bit-packed letters (4 letters, 5 bits each):
 $6444 DEFB %01011100 ; #BITGROUPS($6443,$04)
 $6445 DEFB %11110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0687)".
 $6446 DEFB $30       ; {Word configuration:
 $6447 DEFB $92       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6448 DEFW $018B     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $644A DEFB %00011010 ; {Bit-packed letters (2 letters, 5 bits each):
 $644B DEFB %11000000 ; #BITGROUPS($644A,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($068D)".
 $644C DEFB $DF       ; {Word configuration:
 $644D DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $644E DEFB %00101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $644F DEFB %11001010 ; #BITGROUPS($644E,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0691)".
 $6450 DEFB $5F       ; {Word configuration:
 $6451 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6452 DEFB %01100001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6453 DEFB %01000000 ; #BITGROUPS($6452,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0695)".
 $6454 DEFB $6F       ; {Word configuration:
 $6455 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6456 DEFB %10000001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6457 DEFB %01000000 ; #BITGROUPS($6456,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0699)".
 $6458 DEFB $6F       ; {Word configuration:
 $6459 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $645A DEFB %01100000 ; {Bit-packed letters (4 letters, 5 bits each):
 $645B DEFB %01010010 ; #BITGROUPS($645A,$04)
 $645C DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($069E)".
 $645D DEFB $5F       ; {Word configuration:
 $645E DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $645F DEFB %01110100 ; {Bit-packed letters (2 letters, 5 bits each):
 $6460 DEFB %11000000 ; #BITGROUPS($645F,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06A2)".
 $6461 DEFB $6F       ; {Word configuration:
 $6462 DEFB $25       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6463 DEFB %10100001 ; {Bit-packed letters (5 letters, 5 bits each):
 $6464 DEFB %10011111 ; #BITGROUPS($6463,$05)
 $6465 DEFB %00100110 ;
 $6466 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06A8)".
 $6467 DEFB $DF       ; {Word configuration:
 $6468 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6469 DEFB %00101000 ; {Bit-packed letters (4 letters, 5 bits each):
 $646A DEFB %01100110 ; #BITGROUPS($6469,$04)
 $646B DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06AD)".
 $646C DEFB $6F       ; {Word configuration:
 $646D DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $646E DEFB %10101100 ; {Bit-packed letters (3 letters, 5 bits each):
 $646F DEFB %11010000 ; #BITGROUPS($646E,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06B1)".
 $6470 DEFB $6F       ; {Word configuration:
 $6471 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6472 DEFB %01111000 ; {Bit-packed letters (3 letters, 5 bits each):
 $6473 DEFB %11010110 ; #BITGROUPS($6472,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06B5)".
 $6474 DEFB $6F       ; {Word configuration:
 $6475 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6476 DEFB %01100010 ; {Bit-packed letters (4 letters, 5 bits each):
 $6477 DEFB %01000110 ; #BITGROUPS($6476,$04)
 $6478 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06BA)".
 $6479 DEFB $DF       ; {Word configuration:
 $647A DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $647B DEFB %01111100 ; {Bit-packed letters (2 letters, 5 bits each):
 $647C DEFB %10000000 ; #BITGROUPS($647B,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06BE)".
 $647D DEFB $6F       ; {Word configuration:
 $647E DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $647F DEFB %10010101 ; {Bit-packed letters (5 letters, 5 bits each):
 $6480 DEFB %00011010 ; #BITGROUPS($647F,$05)
 $6481 DEFB %00010111 ;
 $6482 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06C4)".
 $6483 DEFB $5F       ; {Word configuration:
 $6484 DEFB $07       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6485 DEFB %10010000 ; {Bit-packed letters (7 letters, 5 bits each):
 $6486 DEFB %01000111 ; #BITGROUPS($6485,$07)
 $6487 DEFB %01000100 ;
 $6488 DEFB %10001100 ;
 $6489 DEFB %10100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06CB)".
 $648A DEFB $6F       ; {Word configuration:
 $648B DEFB $53       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $648C DEFB %10011001 ; {Bit-packed letters (3 letters, 5 bits each):
 $648D DEFB %01001000 ; #BITGROUPS($648C,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06CF)".
 $648E DEFB $DF       ; {Word configuration:
 $648F DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6490 DEFB %00101100 ; {Bit-packed letters (5 letters, 5 bits each):
 $6491 DEFB %11001010 ; #BITGROUPS($6490,$05)
 $6492 DEFB %11101010 ;
 $6493 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06D5)".
 $6494 DEFB $9F       ; {Word configuration:
 $6495 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6496 DEFB %01001011 ; {Bit-packed letters (3 letters, 5 bits each):
 $6497 DEFB %10101000 ; #BITGROUPS($6496,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06D9)".
 $6498 DEFB $DF       ; {Word configuration:
 $6499 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $649A DEFB %01111010 ; {Bit-packed letters (5 letters, 5 bits each):
 $649B DEFB %10001010 ; #BITGROUPS($649A,$05)
 $649C DEFB %00111010 ;
 $649D DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06DF)".
 $649E DEFB $D1       ; {Word configuration:
 $649F DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64A0 DEFB %10110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($64A0,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06E2)".
 $64A1 DEFB $D5       ; {Word configuration:
 $64A2 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64A3 DEFB %10101011 ; {Bit-packed letters (3 letters, 5 bits each):
 $64A4 DEFB %00011000 ; #BITGROUPS($64A3,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06E6)".
 $64A5 DEFB $D0       ; {Word configuration:
 $64A6 DEFB $30       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06E8)".
 $64A7 DEFB $30       ; {Word configuration:
 $64A8 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64A9 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($64A9,$01)

; Table Dictionary: "Q"
;
; All dictionary words starting with "Q".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06EB)".
@Table_Dictionary_Q
g$64AA DEFB $08       ; {Word configuration:
 $64AB DEFB $84       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64AC DEFW $0363     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $64AE DEFB %10101010 ; {Bit-packed letters (4 letters, 5 bits each):
 $64AF DEFB %01000110 ; #BITGROUPS($64AE,$04)
 $64B0 DEFB %10110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06F2)".
 $64B1 DEFB $68       ; {Word configuration:
 $64B2 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64B3 DEFB %00101101 ; {Bit-packed letters (2 letters, 5 bits each):
 $64B4 DEFB %00000000 ; #BITGROUPS($64B3,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06F6)".
 $64B5 DEFB $9F       ; {Word configuration:
 $64B6 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64B7 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($64B7,$01)

; Table Dictionary: "R"
;
; All dictionary words starting with "R".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06F9)".
@Table_Dictionary_R
g$64B8 DEFB $5F       ; {Word configuration:
 $64B9 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64BA DEFB %00001000 ; {Bit-packed letters (3 letters, 5 bits each):
 $64BB DEFB %11010110 ; #BITGROUPS($64BA,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($06FD)".
 $64BC DEFB $30       ; {Word configuration:
 $64BD DEFB $83       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64BE DEFW $02CA     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $64C0 DEFB %00101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $64C1 DEFB %01001000 ; #BITGROUPS($64C0,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0703)".
 $64C2 DEFB $6F       ; {Word configuration:
 $64C3 DEFB $33       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64C4 DEFB %01001011 ; {Bit-packed letters (3 letters, 5 bits each):
 $64C5 DEFB %10001110 ; #BITGROUPS($64C4,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0707)".
 $64C6 DEFB $D8       ; {Word configuration:
 $64C7 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64C8 DEFB %01100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($64C8,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($070A)".
 $64C9 DEFB $5F       ; {Word configuration:
 $64CA DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64CB DEFB %01001011 ; {Bit-packed letters (3 letters, 5 bits each):
 $64CC DEFB %10100110 ; #BITGROUPS($64CB,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($070E)".
 $64CD DEFB $DF       ; {Word configuration:
 $64CE DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64CF DEFB %01101000 ; {Bit-packed letters (4 letters, 5 bits each):
 $64D0 DEFB %01010010 ; #BITGROUPS($64CF,$04)
 $64D1 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0713)".
 $64D2 DEFB $60       ; {Word configuration:
 $64D3 DEFB $32       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64D4 DEFB %10010010 ; {Bit-packed letters (2 letters, 5 bits each):
 $64D5 DEFB %11000000 ; #BITGROUPS($64D4,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0717)".
 $64D6 DEFB $D6       ; {Word configuration:
 $64D7 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64D8 DEFB %01110101 ; {Bit-packed letters (2 letters, 5 bits each):
 $64D9 DEFB %00000000 ; #BITGROUPS($64D8,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($071B)".
 $64DA DEFB $D5       ; {Word configuration:
 $64DB DEFB $30       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($071D)".
 $64DC DEFB $DF       ; {Word configuration:
 $64DD DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64DE DEFB %10000011 ; {Bit-packed letters (4 letters, 5 bits each):
 $64DF DEFB %11100101 ; #BITGROUPS($64DE,$04)
 $64E0 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0722)".
 $64E1 DEFB $D6       ; {Word configuration:
 $64E2 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64E3 DEFB %10100101 ; {Bit-packed letters (4 letters, 5 bits each):
 $64E4 DEFB %01100100 ; #BITGROUPS($64E3,$04)
 $64E5 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0727)".
 $64E6 DEFB $D5       ; {Word configuration:
 $64E7 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64E8 DEFB %10110001 ; {Bit-packed letters (4 letters, 5 bits each):
 $64E9 DEFB %01000010 ; #BITGROUPS($64E8,$04)
 $64EA DEFB %11000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($072C)".
 $64EB DEFB $D0       ; {Word configuration:
 $64EC DEFB $50       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($072E)".
 $64ED DEFB $D7       ; {Word configuration:
 $64EE DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64EF DEFB %01001001 ; {Bit-packed letters (3 letters, 5 bits each):
 $64F0 DEFB %00001010 ; #BITGROUPS($64EF,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0732)".
 $64F1 DEFB $DF       ; {Word configuration:
 $64F2 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64F3 DEFB %00111010 ; {Bit-packed letters (3 letters, 5 bits each):
 $64F4 DEFB %00101000 ; #BITGROUPS($64F3,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0736)".
 $64F5 DEFB $6F       ; {Word configuration:
 $64F6 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64F7 DEFB %10000100 ; {Bit-packed letters (4 letters, 5 bits each):
 $64F8 DEFB %00001010 ; #BITGROUPS($64F7,$04)
 $64F9 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($073B)".
 $64FA DEFB $5F       ; {Word configuration:
 $64FB DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $64FC DEFB %10110001 ; {Bit-packed letters (3 letters, 5 bits each):
 $64FD DEFB %01100100 ; #BITGROUPS($64FC,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($073F)".
 $64FE DEFB $5F       ; {Word configuration:
 $64FF DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6500 DEFB %01111000 ; {Bit-packed letters (3 letters, 5 bits each):
 $6501 DEFB %01001000 ; #BITGROUPS($6500,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0743)".
 $6502 DEFB $5F       ; {Word configuration:
 $6503 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6504 DEFB %00011010 ; {Bit-packed letters (2 letters, 5 bits each):
 $6505 DEFB %11000000 ; #BITGROUPS($6504,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0747)".
 $6506 DEFB $50       ; {Word configuration:
 $6507 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6508 DEFB %01111011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6509 DEFB %01000000 ; #BITGROUPS($6508,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($074B)".
 $650A DEFB $6F       ; {Word configuration:
 $650B DEFB $06       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $650C DEFB %10101000 ; {Bit-packed letters (6 letters, 5 bits each):
 $650D DEFB %10000100 ; #BITGROUPS($650C,$06)
 $650E DEFB %10011001 ;
 $650F DEFB %10100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0751)".
 $6510 DEFB $40       ; {Word configuration:
 $6511 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6512 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6512,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0754)".
 $6513 DEFB $5F       ; {Word configuration:
 $6514 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6515 DEFB %10100010 ; {Bit-packed letters (6 letters, 5 bits each):
 $6516 DEFB %00011000 ; #BITGROUPS($6515,$06)
 $6517 DEFB %01011001 ;
 $6518 DEFB %11001100 ; }

; Table Dictionary: "S"
;
; All dictionary words starting with "S".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($075A)".
@Table_Dictionary_S
g$6519 DEFB $2F       ; {Word configuration:
 $651A DEFB $80       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $651B DEFW $081A     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($075E)".
 $651D DEFB $5F       ; {Word configuration:
 $651E DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $651F DEFB %00001001 ; {Bit-packed letters (3 letters, 5 bits each):
 $6520 DEFB %10001010 ; #BITGROUPS($651F,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0762)".
 $6521 DEFB $6F       ; {Word configuration:
 $6522 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6523 DEFB %01100001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6524 DEFB %01000000 ; #BITGROUPS($6523,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0766)".
 $6525 DEFB $DF       ; {Word configuration:
 $6526 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6527 DEFB %01101001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6528 DEFB %01000000 ; #BITGROUPS($6527,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($076A)".
 $6529 DEFB $6F       ; {Word configuration:
 $652A DEFB $17       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $652B DEFB %01110001 ; {Bit-packed letters (7 letters, 5 bits each):
 $652C DEFB %00100111 ; #BITGROUPS($652B,$07)
 $652D DEFB %01000111 ;
 $652E DEFB %10111000 ;
 $652F DEFB %10100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0771)".
 $6530 DEFB $6F       ; {Word configuration:
 $6531 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6532 DEFB %10010000 ; {Bit-packed letters (3 letters, 5 bits each):
 $6533 DEFB %01010000 ; #BITGROUPS($6532,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0775)".
 $6534 DEFB $9F       ; {Word configuration:
 $6535 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6536 DEFB %10110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6537 DEFB %01000000 ; #BITGROUPS($6536,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0779)".
 $6538 DEFB $30       ; {Word configuration:
 $6539 DEFB $91       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $653A DEFW $088B     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $653C DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($653C,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($077E)".
 $653D DEFB $6F       ; {Word configuration:
 $653E DEFB $07       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $653F DEFB %00011011 ; {Bit-packed letters (7 letters, 5 bits each):
 $6540 DEFB %11101000 ; #BITGROUPS($653F,$07)
 $6541 DEFB %11000000 ;
 $6542 DEFB %10111000 ;
 $6543 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0785)".
 $6544 DEFB $2F       ; {Word configuration:
 $6545 DEFB $81       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6546 DEFW $081E     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $6548 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6548,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($078A)".
 $6549 DEFB $36       ; {Word configuration:
 $654A DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $654B DEFB %00001100 ; {Bit-packed letters (4 letters, 5 bits each):
 $654C DEFB %10000110 ; #BITGROUPS($654B,$04)
 $654D DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($078F)".
 $654E DEFB $6F       ; {Word configuration:
 $654F DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6550 DEFB %00011100 ; {Bit-packed letters (4 letters, 5 bits each):
 $6551 DEFB %10001011 ; #BITGROUPS($6550,$04)
 $6552 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0794)".
 $6553 DEFB $D5       ; {Word configuration:
 $6554 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6555 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6555,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0797)".
 $6556 DEFB $D0       ; {Word configuration:
 $6557 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6558 DEFB %01101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6558,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($079A)".
 $6559 DEFB $DF       ; {Word configuration:
 $655A DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $655B DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($655B,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($079D)".
 $655C DEFB $DF       ; {Word configuration:
 $655D DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $655E DEFB %01000000 ; {Bit-packed letters (4 letters, 5 bits each):
 $655F DEFB %01011000 ; #BITGROUPS($655E,$04)
 $6560 DEFB %11000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07A2)".
 $6561 DEFB $DF       ; {Word configuration:
 $6562 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6563 DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6563,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07A5)".
 $6564 DEFB $5F       ; {Word configuration:
 $6565 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6566 DEFB %00101101 ; {Bit-packed letters (2 letters, 5 bits each):
 $6567 DEFB %00000000 ; #BITGROUPS($6566,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07A9)".
 $6568 DEFB $5F       ; {Word configuration:
 $6569 DEFB $25       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $656A DEFB %10010011 ; {Bit-packed letters (5 letters, 5 bits each):
 $656B DEFB %00011110 ; #BITGROUPS($656A,$05)
 $656C DEFB %00110101 ;
 $656D DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07AF)".
 $656E DEFB $DF       ; {Word configuration:
 $656F DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6570 DEFB %01111011 ; {Bit-packed letters (4 letters, 5 bits each):
 $6571 DEFB %11101001 ; #BITGROUPS($6570,$04)
 $6572 DEFB %00110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07B4)".
 $6573 DEFB $DF       ; {Word configuration:
 $6574 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6575 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6575,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07B7)".
 $6576 DEFB $D4       ; {Word configuration:
 $6577 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6578 DEFB %10101011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6579 DEFB %00000000 ; #BITGROUPS($6578,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07BB)".
 $657A DEFB $D0       ; {Word configuration:
 $657B DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $657C DEFB %10111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($657C,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07BE)".
 $657D DEFB $5F       ; {Word configuration:
 $657E DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $657F DEFB %01001001 ; {Bit-packed letters (3 letters, 5 bits each):
 $6580 DEFB %00001010 ; #BITGROUPS($657F,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07C2)".
 $6581 DEFB $6F       ; {Word configuration:
 $6582 DEFB $25       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6583 DEFB %01101011 ; {Bit-packed letters (5 letters, 5 bits each):
 $6584 DEFB %11101011 ; #BITGROUPS($6583,$05)
 $6585 DEFB %01000100 ;
 $6586 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07C8)".
 $6587 DEFB $D6       ; {Word configuration:
 $6588 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6589 DEFB %00111011 ; {Bit-packed letters (2 letters, 5 bits each):
 $658A DEFB %10000000 ; #BITGROUPS($6589,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07CC)".
 $658B DEFB $08       ; {Word configuration:
 $658C DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $658D DEFB %01100001 ; {Bit-packed letters (4 letters, 5 bits each):
 $658E DEFB %01011101 ; #BITGROUPS($658D,$04)
 $658F DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07D1)".
 $6590 DEFB $DF       ; {Word configuration:
 $6591 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6592 DEFB %01110000 ; {Bit-packed letters (3 letters, 5 bits each):
 $6593 DEFB %11001010 ; #BITGROUPS($6592,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07D5)".
 $6594 DEFB $64       ; {Word configuration:
 $6595 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6596 DEFB %00111001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6597 DEFB %01000000 ; #BITGROUPS($6596,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07D9)".
 $6598 DEFB $DF       ; {Word configuration:
 $6599 DEFB $32       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $659A DEFB %01100001 ; {Bit-packed letters (2 letters, 5 bits each):
 $659B DEFB %01000000 ; #BITGROUPS($659A,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07DD)".
 $659C DEFB $30       ; {Word configuration:
 $659D DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $659E DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($659E,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07E0)".
 $659F DEFB $6F       ; {Word configuration:
 $65A0 DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65A1 DEFB %10100010 ; {Bit-packed letters (4 letters, 5 bits each):
 $65A2 DEFB %01011100 ; #BITGROUPS($65A1,$04)
 $65A3 DEFB %01110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07E5)".
 $65A4 DEFB $6F       ; {Word configuration:
 $65A5 DEFB $64       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65A6 DEFB %10010011 ; {Bit-packed letters (4 letters, 5 bits each):
 $65A7 DEFB %11011110 ; #BITGROUPS($65A6,$04)
 $65A8 DEFB %11010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07EA)".
 $65A9 DEFB $6F       ; {Word configuration:
 $65AA DEFB $05       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65AB DEFB %01100000 ; {Bit-packed letters (5 letters, 5 bits each):
 $65AC DEFB %01101000 ; #BITGROUPS($65AB,$05)
 $65AD DEFB %01011001 ;
 $65AE DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07F0)".
 $65AF DEFB $65       ; {Word configuration:
 $65B0 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65B1 DEFB %00101001 ; {Bit-packed letters (3 letters, 5 bits each):
 $65B2 DEFB %01100000 ; #BITGROUPS($65B1,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07F4)".
 $65B3 DEFB $6F       ; {Word configuration:
 $65B4 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65B5 DEFB %01101000 ; {Bit-packed letters (4 letters, 5 bits each):
 $65B6 DEFB %01011000 ; #BITGROUPS($65B5,$04)
 $65B7 DEFB %11000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07F9)".
 $65B8 DEFB $DF       ; {Word configuration:
 $65B9 DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65BA DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($65BA,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($07FC)".
 $65BB DEFB $5F       ; {Word configuration:
 $65BC DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65BD DEFB %00110000 ; {Bit-packed letters (2 letters, 5 bits each):
 $65BE DEFB %01000000 ; #BITGROUPS($65BD,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0800)".
 $65BF DEFB $08       ; {Word configuration:
 $65C0 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65C1 DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($65C1,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0803)".
 $65C2 DEFB $6F       ; {Word configuration:
 $65C3 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65C4 DEFB %01100010 ; {Bit-packed letters (3 letters, 5 bits each):
 $65C5 DEFB %01001000 ; #BITGROUPS($65C4,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0807)".
 $65C6 DEFB $D6       ; {Word configuration:
 $65C7 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65C8 DEFB %10110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($65C8,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($080A)".
 $65C9 DEFB $6F       ; {Word configuration:
 $65CA DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65CB DEFB %01101001 ; {Bit-packed letters (2 letters, 5 bits each):
 $65CC DEFB %01000000 ; #BITGROUPS($65CB,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($080E)".
 $65CD DEFB $DF       ; {Word configuration:
 $65CE DEFB $33       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65CF DEFB %01111011 ; {Bit-packed letters (3 letters, 5 bits each):
 $65D0 DEFB %10001010 ; #BITGROUPS($65CF,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0812)".
 $65D1 DEFB $DF       ; {Word configuration:
 $65D2 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65D3 DEFB %10010100 ; {Bit-packed letters (3 letters, 5 bits each):
 $65D4 DEFB %10110010 ; #BITGROUPS($65D3,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0816)".
 $65D5 DEFB $D6       ; {Word configuration:
 $65D6 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65D7 DEFB %10101011 ; {Bit-packed letters (3 letters, 5 bits each):
 $65D8 DEFB %10001000 ; #BITGROUPS($65D7,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($081A)".
 $65D9 DEFB $2F       ; {Word configuration:
 $65DA DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65DB DEFB %10100010 ; {Bit-packed letters (2 letters, 5 bits each):
 $65DC DEFB %00000000 ; #BITGROUPS($65DB,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($081E)".
 $65DD DEFB $2F       ; {Word configuration:
 $65DE DEFB $44       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65DF DEFB %00101000 ; {Bit-packed letters (4 letters, 5 bits each):
 $65E0 DEFB %01100111 ; #BITGROUPS($65DF,$04)
 $65E1 DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0823)".
 $65E2 DEFB $6F       ; {Word configuration:
 $65E3 DEFB $52       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65E4 DEFB %10010011 ; {Bit-packed letters (2 letters, 5 bits each):
 $65E5 DEFB %10000000 ; #BITGROUPS($65E4,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0827)".
 $65E6 DEFB $2F       ; {Word configuration:
 $65E7 DEFB $44       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65E8 DEFB %10111001 ; {Bit-packed letters (4 letters, 5 bits each):
 $65E9 DEFB %01100111 ; #BITGROUPS($65E8,$04)
 $65EA DEFB %01000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($082C)".
 $65EB DEFB $5F       ; {Word configuration:
 $65EC DEFB $81       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65ED DEFW $0861     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $65EF DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($65EF,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0831)".
 $65F0 DEFB $6F       ; {Word configuration:
 $65F1 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65F2 DEFB %00001010 ; {Bit-packed letters (5 letters, 5 bits each):
 $65F3 DEFB %01011100 ; #BITGROUPS($65F2,$05)
 $65F4 DEFB %01010010 ;
 $65F5 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0837)".
 $65F6 DEFB $5F       ; {Word configuration:
 $65F7 DEFB $34       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65F8 DEFB %10010101 ; {Bit-packed letters (4 letters, 5 bits each):
 $65F9 DEFB %11000011 ; #BITGROUPS($65F8,$04)
 $65FA DEFB %10010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($083C)".
 $65FB DEFB $50       ; {Word configuration:
 $65FC DEFB $40       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($083E)".
 $65FD DEFB $5F       ; {Word configuration:
 $65FE DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $65FF DEFB %10100010 ; {Bit-packed letters (4 letters, 5 bits each):
 $6600 DEFB %01011110 ; #BITGROUPS($65FF,$04)
 $6601 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0843)".
 $6602 DEFB $D6       ; {Word configuration:
 $6603 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6604 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6604,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0846)".
 $6605 DEFB $0F       ; {Word configuration:
 $6606 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6607 DEFB %00101000 ; {Bit-packed letters (6 letters, 5 bits each):
 $6608 DEFB %01001000 ; #BITGROUPS($6607,$06)
 $6609 DEFB %10010110 ;
 $660A DEFB %01100100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($084C)".
 $660B DEFB $6F       ; {Word configuration:
 $660C DEFB $31       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $660D DEFB %01101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($660D,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($084F)".
 $660E DEFB $5F       ; {Word configuration:
 $660F DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6610 DEFB %10010000 ; {Bit-packed letters (6 letters, 5 bits each):
 $6611 DEFB %01000110 ; #BITGROUPS($6610,$06)
 $6612 DEFB %10000000 ;
 $6613 DEFB %10111000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0855)".
 $6614 DEFB $5F       ; {Word configuration:
 $6615 DEFB $33       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6616 DEFB %01011001 ; {Bit-packed letters (3 letters, 5 bits each):
 $6617 DEFB %01100100 ; #BITGROUPS($6616,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0859)".
 $6618 DEFB $D8       ; {Word configuration:
 $6619 DEFB $33       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $661A DEFB %01110001 ; {Bit-packed letters (3 letters, 5 bits each):
 $661B DEFB %11001010 ; #BITGROUPS($661A,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($085D)".
 $661C DEFB $5F       ; {Word configuration:
 $661D DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $661E DEFB %00101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $661F DEFB %01011010 ; #BITGROUPS($661E,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0861)".
 $6620 DEFB $50       ; {Word configuration:
 $6621 DEFB $32       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6622 DEFB %00101101 ; {Bit-packed letters (2 letters, 5 bits each):
 $6623 DEFB %00000000 ; #BITGROUPS($6622,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0865)".
 $6624 DEFB $5F       ; {Word configuration:
 $6625 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6626 DEFB %10101001 ; {Bit-packed letters (3 letters, 5 bits each):
 $6627 DEFB %00110010 ; #BITGROUPS($6626,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0869)".
 $6628 DEFB $DF       ; {Word configuration:
 $6629 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $662A DEFB %10101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $662B DEFB %11010000 ; #BITGROUPS($662A,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($086D)".
 $662C DEFB $08       ; {Word configuration:
 $662D DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $662E DEFB %00100001 ; {Bit-packed letters (4 letters, 5 bits each):
 $662F DEFB %00001010 ; #BITGROUPS($662E,$04)
 $6630 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0872)".
 $6631 DEFB $DF       ; {Word configuration:
 $6632 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6633 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6633,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0875)".
 $6634 DEFB $D8       ; {Word configuration:
 $6635 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6636 DEFB %10010001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6637 DEFB %01000000 ; #BITGROUPS($6636,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0879)".
 $6638 DEFB $2F       ; {Word configuration:
 $6639 DEFB $81       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $663A DEFW $0827     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $663C DEFB %10111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($663C,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($087E)".
 $663D DEFB $08       ; {Word configuration:
 $663E DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $663F DEFB %01001001 ; {Bit-packed letters (3 letters, 5 bits each):
 $6640 DEFB %10101000 ; #BITGROUPS($663F,$03)}

; Table Dictionary: "T"
;
; All dictionary words starting with "T".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0882)".
@Table_Dictionary_T
g$6641 DEFB $5F       ; {Word configuration:
 $6642 DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6643 DEFB %00001000 ; {Bit-packed letters (4 letters, 5 bits each):
 $6644 DEFB %10011000 ; #BITGROUPS($6643,$04)
 $6645 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0887)".
 $6646 DEFB $30       ; {Word configuration:
 $6647 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6648 DEFB %01011001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6649 DEFB %01000000 ; #BITGROUPS($6648,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($088B)".
 $664A DEFB $30       ; {Word configuration:
 $664B DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $664C DEFB %01100010 ; {Bit-packed letters (2 letters, 5 bits each):
 $664D DEFB %11000000 ; #BITGROUPS($664C,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($088F)".
 $664E DEFB $30       ; {Word configuration:
 $664F DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6650 DEFB %00101011 ; {Bit-packed letters (3 letters, 5 bits each):
 $6651 DEFB %00011000 ; #BITGROUPS($6650,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0893)".
 $6652 DEFB $DF       ; {Word configuration:
 $6653 DEFB $16       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6654 DEFB %10010100 ; {Bit-packed letters (6 letters, 5 bits each):
 $6655 DEFB %10010010 ; #BITGROUPS($6654,$06)
 $6656 DEFB %00100110 ;
 $6657 DEFB %00010100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0899)".
 $6658 DEFB $90       ; {Word configuration:
 $6659 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $665A DEFB %01000000 ; {Bit-packed letters (3 letters, 5 bits each):
 $665B DEFB %01101000 ; #BITGROUPS($665A,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($089D)".
 $665C DEFB $8F       ; {Word configuration:
 $665D DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $665E DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($665E,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08A0)".
 $665F DEFB $DF       ; {Word configuration:
 $6660 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6661 DEFB %01001100 ; {Bit-packed letters (2 letters, 5 bits each):
 $6662 DEFB %10000000 ; #BITGROUPS($6661,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08A4)".
 $6663 DEFB $DF       ; {Word configuration:
 $6664 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6665 DEFB %01101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6665,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08A7)".
 $6666 DEFB $BF       ; {Word configuration:
 $6667 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6668 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6668,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08AA)".
 $6669 DEFB $DF       ; {Word configuration:
 $666A DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $666B DEFB %10010001 ; {Bit-packed letters (2 letters, 5 bits each):
 $666C DEFB %01000000 ; #BITGROUPS($666B,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08AE)".
 $666D DEFB $9F       ; {Word configuration:
 $666E DEFB $44       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $666F DEFB %00110011 ; {Bit-packed letters (4 letters, 5 bits each):
 $6670 DEFB %11100100 ; #BITGROUPS($666F,$04)
 $6671 DEFB %01010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08B3)".
 $6672 DEFB $9F       ; {Word configuration:
 $6673 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6674 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6674,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08B6)".
 $6675 DEFB $D0       ; {Word configuration:
 $6676 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6677 DEFB %01001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6677,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08B9)".
 $6678 DEFB $6F       ; {Word configuration:
 $6679 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $667A DEFB %00011010 ; {Bit-packed letters (2 letters, 5 bits each):
*$667B DEFB %11000000 ; #BITGROUPS($667A,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08BD)".
 $667C DEFB $D0       ; {Word configuration:
 $667D DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $667E DEFB %01110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $667F DEFB %11000000 ; #BITGROUPS($667E,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08C1)".
 $6680 DEFB $DF       ; {Word configuration:
 $6681 DEFB $31       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6682 DEFB %01011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6682,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08C4)".
 $6683 DEFB $DF       ; {Word configuration:
 $6684 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6685 DEFB %01111101 ; {Bit-packed letters (5 letters, 5 bits each):
 $6686 DEFB %01001110 ; #BITGROUPS($6685,$05)
 $6687 DEFB %10001010 ;
 $6688 DEFB %00000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08CA)".
 $6689 DEFB $5F       ; {Word configuration:
 $668A DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $668B DEFB %10010001 ; {Bit-packed letters (3 letters, 5 bits each):
 $668C DEFB %01001010 ; #BITGROUPS($668B,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08CE)".
 $668D DEFB $7F       ; {Word configuration:
 $668E DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $668F DEFB %01111101 ; {Bit-packed letters (4 letters, 5 bits each):
 $6690 DEFB %01001110 ; #BITGROUPS($668F,$04)
 $6691 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08D3)".
 $6692 DEFB $6F       ; {Word configuration:
 $6693 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6694 DEFB %01001001 ; {Bit-packed letters (3 letters, 5 bits each):
 $6695 DEFB %01001000 ; #BITGROUPS($6694,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08D7)".
 $6696 DEFB $DF       ; {Word configuration:
 $6697 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6698 DEFB %01101001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6699 DEFB %01000000 ; #BITGROUPS($6698,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08DB)".
 $669A DEFB $7F       ; {Word configuration:
 $669B DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $669C DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($669C,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08DE)".
 $669D DEFB $D4       ; {Word configuration:
 $669E DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $669F DEFB %01100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($669F,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08E1)".
 $66A0 DEFB $7F       ; {Word configuration:
 $66A1 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66A2 DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($66A2,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08E4)".
 $66A3 DEFB $DF       ; {Word configuration:
 $66A4 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66A5 DEFB %10000000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($66A5,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08E7)".
 $66A6 DEFB $6F       ; {Word configuration:
 $66A7 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66A8 DEFB %10010011 ; {Bit-packed letters (2 letters, 5 bits each):
 $66A9 DEFB %10000000 ; #BITGROUPS($66A8,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08EB)".
 $66AA DEFB $5F       ; {Word configuration:
 $66AB DEFB $04       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66AC DEFB %10010000 ; {Bit-packed letters (4 letters, 5 bits each):
 $66AD DEFB %01010010 ; #BITGROUPS($66AC,$04)
 $66AE DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08F0)".
 $66AF DEFB $6F       ; {Word configuration:
 $66B0 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66B1 DEFB %10011010 ; {Bit-packed letters (2 letters, 5 bits each):
 $66B2 DEFB %00000000 ; #BITGROUPS($66B1,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08F4)".
 $66B3 DEFB $D5       ; {Word configuration:
 $66B4 DEFB $24       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66B5 DEFB %10110001 ; {Bit-packed letters (4 letters, 5 bits each):
 $66B6 DEFB %01011000 ; #BITGROUPS($66B5,$04)
 $66B7 DEFB %11000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08F9)".
 $66B8 DEFB $6F       ; {Word configuration:
 $66B9 DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66BA DEFB %01001000 ; {Bit-packed letters (4 letters, 5 bits each):
 $66BB DEFB %11010010 ; #BITGROUPS($66BA,$04)
 $66BC DEFB %00010000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($08FE)".
 $66BD DEFB $6F       ; {Word configuration:
 $66BE DEFB $51       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66BF DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($66BF,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0901)".
 $66C0 DEFB $DF       ; {Word configuration:
 $66C1 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66C2 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($66C2,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0904)".
 $66C3 DEFB $D0       ; {Word configuration:
 $66C4 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66C5 DEFB %10101100 ; {Bit-packed letters (3 letters, 5 bits each):
 $66C6 DEFB %10011100 ; #BITGROUPS($66C5,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0908)".
 $66C7 DEFB $5F       ; {Word configuration:
 $66C8 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66C9 DEFB %10111011 ; {Bit-packed letters (2 letters, 5 bits each):
 $66CA DEFB %11000000 ; #BITGROUPS($66C9,$02)}

; Table Dictionary: "U"
;
; All dictionary words starting with "U".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($090C)".
@Table_Dictionary_U
g$66CB DEFB $0F       ; {Word configuration:
 $66CC DEFB $80       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66CD DEFW $093C     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0910)".
 $66CF DEFB $6F       ; {Word configuration:
 $66D0 DEFB $0A       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66D1 DEFB %01110000 ; {Bit-packed letters (10 letters, 5 bits each):
 $66D2 DEFB %11011110 ; #BITGROUPS($66D1,$0A)
 $66D3 DEFB %11101001 ;
 $66D4 DEFB %10001101 ;
 $66D5 DEFB %00101111 ;
 $66D6 DEFB %10101100 ;
 $66D7 DEFB %11000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0919)".
 $66D8 DEFB $DF       ; {Word configuration:
 $66D9 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66DA DEFB %00100001 ; {Bit-packed letters (3 letters, 5 bits each):
 $66DB DEFB %01100100 ; #BITGROUPS($66DA,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($091D)".
 $66DC DEFB $6F       ; {Word configuration:
 $66DD DEFB $18       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66DE DEFB %00110010 ; {Bit-packed letters (8 letters, 5 bits each):
 $66DF DEFB %01011100 ; #BITGROUPS($66DE,$08)
 $66E0 DEFB %10011001 ;
 $66E1 DEFB %10100000 ;
 $66E2 DEFB %10100100 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0924)".
 $66E3 DEFB $D8       ; {Word configuration:
 $66E4 DEFB $28       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66E5 DEFB %01111100 ; {Bit-packed letters (8 letters, 5 bits each):
 $66E6 DEFB %10101001 ; #BITGROUPS($66E5,$08)
 $66E7 DEFB %01010111 ;
 $66E8 DEFB %00000110 ;
 $66E9 DEFB %10000101 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($092B)".
 $66EA DEFB $3F       ; {Word configuration:
 $66EB DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66EC DEFB %01100011 ; {Bit-packed letters (4 letters, 5 bits each):
 $66ED DEFB %11000110 ; #BITGROUPS($66EC,$04)
 $66EE DEFB %10110000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0930)".
 $66EF DEFB $6F       ; {Word configuration:
 $66F0 DEFB $52       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66F1 DEFB %00101001 ; {Bit-packed letters (2 letters, 5 bits each):
 $66F2 DEFB %00000000 ; #BITGROUPS($66F1,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0934)".
 $66F3 DEFB $DF       ; {Word configuration:
 $66F4 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66F5 DEFB %01101010 ; {Bit-packed letters (2 letters, 5 bits each):
 $66F6 DEFB %00000000 ; #BITGROUPS($66F5,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0938)".
 $66F7 DEFB $7F       ; {Word configuration:
 $66F8 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66F9 DEFB %10100010 ; {Bit-packed letters (3 letters, 5 bits each):
 $66FA DEFB %01011000 ; #BITGROUPS($66F9,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($093C)".
 $66FB DEFB $2F       ; {Word configuration:
 $66FC DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $66FD DEFB %10000000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($66FD,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($093F)".
 $66FE DEFB $DF       ; {Word configuration:
 $66FF DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6700 DEFB %01111011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6701 DEFB %10000000 ; #BITGROUPS($6700,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0943)".
 $6702 DEFB $DF       ; {Word configuration:
 $6703 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6704 DEFB %10011010 ; {Bit-packed letters (2 letters, 5 bits each):
 $6705 DEFB %00000000 ; #BITGROUPS($6704,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0947)".
 $6706 DEFB $DF       ; {Word configuration:
 $6707 DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6708 DEFB %10110010 ; {Bit-packed letters (2 letters, 5 bits each):
 $6709 DEFB %11000000 ; #BITGROUPS($6708,$02)}

; Table Dictionary: "V"
;
; All dictionary words starting with "V".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($094B)".
@Table_Dictionary_V
g$670A DEFB $DF       ; {Word configuration:
 $670B DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $670C DEFB %00101100 ; {Bit-packed letters (3 letters, 5 bits each):
 $670D DEFB %10110010 ; #BITGROUPS($670C,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($094F)".
 $670E DEFB $6F       ; {Word configuration:
 $670F DEFB $07       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6710 DEFB %01001000 ; {Bit-packed letters (7 letters, 5 bits each):
 $6711 DEFB %11101000 ; #BITGROUPS($6710,$07)
 $6712 DEFB %11111001 ;
 $6713 DEFB %00100100 ;
 $6714 DEFB %00100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0956)".
 $6715 DEFB $E6       ; {Word configuration:
 $6716 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6717 DEFB %10011010 ; {Bit-packed letters (3 letters, 5 bits each):
 $6718 DEFB %01101000 ; #BITGROUPS($6717,$03)}

; Table Dictionary: "W"
;
; All dictionary words starting with "W".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($095A)".
@Table_Dictionary_W
g$6719 DEFB $2F       ; {Word configuration:
 $671A DEFB $80       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $671B DEFW $0992     ; Synonym reference:
                      ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($095E)".
 $671D DEFB $30       ; {Word configuration:
 $671E DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $671F DEFB %00001010 ; {Bit-packed letters (3 letters, 5 bits each):
 $6720 DEFB %01101000 ; #BITGROUPS($671F,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0962)".
 $6721 DEFB $6F       ; {Word configuration:
 $6722 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6723 DEFB %01100011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6724 DEFB %00000000 ; #BITGROUPS($6723,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0966)".
 $6725 DEFB $08       ; {Word configuration:
 $6726 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6727 DEFB %10010011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6728 DEFB %01000000 ; #BITGROUPS($6727,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($096A)".
 $6729 DEFB $8F       ; {Word configuration:
 $672A DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $672B DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($672B,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($096D)".
 $672C DEFB $DF       ; {Word configuration:
 $672D DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $672E DEFB %10100000 ; {Bit-packed letters (3 letters, 5 bits each):
 $672F DEFB %11010000 ; #BITGROUPS($672E,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0971)".
 $6730 DEFB $5F       ; {Word configuration:
 $6731 DEFB $23       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6732 DEFB %10011011 ; {Bit-packed letters (3 letters, 5 bits each):
 $6733 DEFB %11011100 ; #BITGROUPS($6732,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0975)".
 $6734 DEFB $6F       ; {Word configuration:
 $6735 DEFB $51       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6736 DEFB %10011000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6736,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0978)".
 $6737 DEFB $DF       ; {Word configuration:
 $6738 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6739 DEFB %11001000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6739,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($097B)".
 $673A DEFB $DF       ; {Word configuration:
 $673B DEFB $01       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $673C DEFB %00101000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($673C,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($097E)".
 $673D DEFB $DF       ; {Word configuration:
 $673E DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $673F DEFB %00001100 ; {Bit-packed letters (4 letters, 5 bits each):
*$6740 DEFB %00011110 ; #BITGROUPS($673F,$04)
 $6741 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0983)".
 $6742 DEFB $3F       ; {Word configuration:
 $6743 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6744 DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6744,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0986)".
 $6745 DEFB $DF       ; {Word configuration:
 $6746 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6747 DEFB %01100011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6748 DEFB %00000000 ; #BITGROUPS($6747,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($098A)".
 $6749 DEFB $DF       ; {Word configuration:
 $674A DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $674B DEFB %01110101 ; {Bit-packed letters (2 letters, 5 bits each):
 $674C DEFB %00000000 ; #BITGROUPS($674B,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($098E)".
 $674D DEFB $DF       ; {Word configuration:
 $674E DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $674F DEFB %10010001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6750 DEFB %01000000 ; #BITGROUPS($674F,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0992)".
 $6751 DEFB $2F       ; {Word configuration:
 $6752 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6753 DEFB %10011101 ; {Bit-packed letters (2 letters, 5 bits each):
 $6754 DEFB %00000000 ; #BITGROUPS($6753,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($0996)".
 $6755 DEFB $6F       ; {Word configuration:
 $6756 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6757 DEFB %01000000 ; {Bit-packed letters (3 letters, 5 bits each):
 $6758 DEFB %01101000 ; #BITGROUPS($6757,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($099A)".
 $6759 DEFB $DF       ; {Word configuration:
 $675A DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $675B DEFB %00101011 ; {Bit-packed letters (2 letters, 5 bits each):
 $675C DEFB %10000000 ; #BITGROUPS($675B,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($099E)".
 $675D DEFB $DF       ; {Word configuration:
 $675E DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $675F DEFB %10010001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6760 DEFB %01000000 ; #BITGROUPS($675F,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09A2)".
 $6761 DEFB $DF       ; {Word configuration:
 $6762 DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6763 DEFB %01001011 ; {Bit-packed letters (3 letters, 5 bits each):
 $6764 DEFB %00001010 ; #BITGROUPS($6763,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09A6)".
 $6765 DEFB $DF       ; {Word configuration:
 $6766 DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6767 DEFB %01111000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6767,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09A9)".
 $6768 DEFB $6F       ; {Word configuration:
 $6769 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $676A DEFB %01001001 ; {Bit-packed letters (3 letters, 5 bits each):
 $676B DEFB %00001010 ; #BITGROUPS($676A,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09AD)".
 $676C DEFB $DF       ; {Word configuration:
 $676D DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $676E DEFB %00110001 ; {Bit-packed letters (2 letters, 5 bits each):
 $676F DEFB %01000000 ; #BITGROUPS($676E,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09B1)".
 $6770 DEFB $8F       ; {Word configuration:
 $6771 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6772 DEFB %01100011 ; {Bit-packed letters (2 letters, 5 bits each):
 $6773 DEFB %00000000 ; #BITGROUPS($6772,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09B5)".
 $6774 DEFB $6F       ; {Word configuration:
 $6775 DEFB $15       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6776 DEFB %01110001 ; {Bit-packed letters (5 letters, 5 bits each):
 $6777 DEFB %00010010 ; #BITGROUPS($6776,$05)
 $6778 DEFB %11100011 ;
 $6779 DEFB %10000000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09BB)".
 $677A DEFB $50       ; {Word configuration:
 $677B DEFB $32       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $677C DEFB %01111101 ; {Bit-packed letters (2 letters, 5 bits each):
 $677D DEFB %11000000 ; #BITGROUPS($677C,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09BF)".
 $677E DEFB $7F       ; {Word configuration:
 $677F DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6780 DEFB %10100010 ; {Bit-packed letters (2 letters, 5 bits each):
 $6781 DEFB %00000000 ; #BITGROUPS($6780,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09C3)".
 $6782 DEFB $DF       ; {Word configuration:
 $6783 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6784 DEFB %01111010 ; {Bit-packed letters (3 letters, 5 bits each):
 $6785 DEFB %11001010 ; #BITGROUPS($6784,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09C7)".
 $6786 DEFB $DF       ; {Word configuration:
 $6787 DEFB $31       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6788 DEFB %01110000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($6788,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09CA)".
 $6789 DEFB $DF       ; {Word configuration:
 $678A DEFB $13       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $678B DEFB %01101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $678C DEFB %01011100 ; #BITGROUPS($678B,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09CE)".
 $678D DEFB $6F       ; {Word configuration:
 $678E DEFB $14       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $678F DEFB %01111001 ; {Bit-packed letters (4 letters, 5 bits each):
 $6790 DEFB %00001010 ; #BITGROUPS($678F,$04)
 $6791 DEFB %11100000 ; }
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09D3)".
 $6792 DEFB $D5       ; {Word configuration:
 $6793 DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6794 DEFB %10010010 ; {Bit-packed letters (2 letters, 5 bits each):
 $6795 DEFB %11000000 ; #BITGROUPS($6794,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09D7)".
 $6796 DEFB $D0       ; {Word configuration:
 $6797 DEFB $22       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $6798 DEFB %01100001 ; {Bit-packed letters (2 letters, 5 bits each):
 $6799 DEFB %00000000 ; #BITGROUPS($6798,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09DB)".
 $679A DEFB $D4       ; {Word configuration:
 $679B DEFB $12       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $679C DEFB %10101011 ; {Bit-packed letters (2 letters, 5 bits each):
 $679D DEFB %00000000 ; #BITGROUPS($679C,$02)}

; Table Dictionary: "X"
;
; All dictionary words starting with "X".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09DF)".
@Table_Dictionary_X
g$679E DEFB $DF       ; {Word configuration:
 $679F DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $67A0 DEFB %01100001 ; {Bit-packed letters (2 letters, 5 bits each):
 $67A1 DEFB %01000000 ; #BITGROUPS($67A0,$02)}

; Table Dictionary: "Y"
;
; All dictionary words starting with "Y".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09E3)".
@Table_Dictionary_Y
g$67A2 DEFB $5F       ; {Word configuration:
 $67A3 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $67A4 DEFB %00001100 ; {Bit-packed letters (3 letters, 5 bits each):
 $67A5 DEFB %10001000 ; #BITGROUPS($67A4,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09E7)".
 $67A6 DEFB $D0       ; {Word configuration:
 $67A7 DEFB $03       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $67A8 DEFB %00101000 ; {Bit-packed letters (3 letters, 5 bits each):
 $67A9 DEFB %01100100 ; #BITGROUPS($67A8,$03)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09EB)".
 $67AA DEFB $DF       ; {Word configuration:
 $67AB DEFB $11       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $67AC DEFB %10100000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($67AC,$01)
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09EE)".
 $67AD DEFB $5F       ; {Word configuration:
 $67AE DEFB $02       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $67AF DEFB %01111101 ; {Bit-packed letters (2 letters, 5 bits each):
 $67B0 DEFB %01000000 ; #BITGROUPS($67AF,$02)}
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09F2)".
 $67B1 DEFB $6F       ; {Word configuration:
 $67B2 DEFB $21       ; #TABLE(default,centre,centre)
                      ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                      ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                      ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                      ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                      ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                      ; TABLE#}
 $67B3 DEFB %10010000 ; Bit-packed letters (1 letters, 5 bits each):
                      ; #BITGROUPS($67B3,$01)

; Table Dictionary: "Z"
;
; All dictionary words starting with "Z".
;
; .
;
; Word #N(#PC-$5DBF,$04,$04): "#TOKEN($09F5)".
@Table_Dictionary_Z
g$67B4 DEFB $DF      ; {Word configuration:
 $67B5 DEFB $00      ; #TABLE(default,centre,centre)
                     ; { =h Type | #WORDTYPES(#PEEK(#PC)) }
                     ; { =h Flection | #N(#PEEK(#PC)&$0F) }
                     ; { =h Synonym | #IF((#PEEK(#PC+$01)&$80)>>$07)(YES,NO) }
                     ; { =h Letters From Previous | #N((#PEEK(#PC+$01)&$70)>>$04) }
                     ; { =h Length | #N(#PEEK(#PC+$01)&$0F) }
                     ; TABLE#}
 $67B6 DEFB $00      ; Terminator.

; Table: Common Words
@label=Table_CommonWords
g$67B7 DEFW $089D                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67B9 DEFW $08DB                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67BB DEFW $0001                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67BD DEFW $005D                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67BF DEFW $09EE                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67C1 DEFW $05EC                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67C3 DEFW $0899                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67C5 DEFW $0485                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67C7 DEFW $0450                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67C9 DEFW $096A                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67CB DEFW $009A                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67CD DEFW $042D                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67CF DEFW $0488                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67D1 DEFW $05D5                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67D3 DEFW $03DF                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67D5 DEFW $0263                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67D7 DEFW $0986                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67D9 DEFW $094B                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67DB DEFW $09BF                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67DD DEFW $03FC                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67DF DEFW $0794                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67E1 DEFW $015E                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67E3 DEFW $03E3                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67E5 DEFW $05FF                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67E7 DEFW $007A                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67E9 DEFW $0620                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67EB DEFW $0351                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67ED DEFW $05E0                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67EF DEFW $00C0                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67F1 DEFW $0996                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67F3 DEFW $0414                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67F5 DEFW $0594                           ; Reference:
                                            ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $67F7 DEFB $06,$0A,$02,$87,$79,$87,$13,$1F
 $67FF DEFB $0B,$F8,$FF,$22,$1F,$0B,$F3,$FF
 $6807 DEFB $61,$07,$22,$1F

; Data block at 680B
b$680B DEFB $C6,$02,$80,$5A,$84,$31,$C9,$DB
 $6813 DEFB $89,$01,$66,$1E,$07,$67,$1F,$0B
 $681B DEFB $E5,$FF,$88,$12,$2C,$F4,$2D,$81
 $6823 DEFB $7F,$6F,$66,$7B,$2E,$22,$1D

; Data block at 682A
b$682A DEFB $0B,$DA,$FF,$18,$22,$1E

; Data block at 6830
b$6830 DEFB $0B,$D4,$FF,$19,$22,$1E,$6C,$20
 $6838 DEFB $45,$A3,$E8,$16,$4C,$20,$1F,$64
 $6840 DEFB $6F,$6D,$6E,$B2,$93,$20,$42,$23
 $6848 DEFB $DC,$27,$40,$A0,$7C,$20,$44,$9A
 $6850 DEFB $58,$CC,$80,$2E,$1F,$0B,$F0,$FF
 $6858 DEFB $1D,$6B,$6F,$6D,$D4,$AD,$60,$20
 $6860 DEFB $43,$BB,$E4,$40,$22,$1F,$7D,$20
 $6868 DEFB $3F,$1D,$6B,$6F,$6D,$D4,$AD,$60
 $6870 DEFB $20,$43,$B1,$64,$20,$22,$01,$01
 $6878 DEFB $01,$01,$22,$1D,$01,$01,$01,$00
 $6880 DEFB $01,$01,$01,$F9,$96,$20,$3F,$1F
 $6888 DEFB $20,$44,$BA,$12,$34,$00,$01,$01
 $6890 DEFB $01,$20,$3F,$1F,$6B,$74,$01,$01
 $6898 DEFB $01,$01,$66,$64,$81,$7C,$01,$01
 $68A0 DEFB $01,$1D,$64,$81,$7F,$01,$01,$01
 $68A8 DEFB $60,$01,$01,$01,$1D,$10,$C1,$8F
 $68B0 DEFB $1F

; Data block at 68B1
b$68B1 DEFB $13,$C1,$8F,$1F,$7D,$1D,$10,$C1
 $68B9 DEFB $8F,$07,$1E

; Data block at 68BC
b$68BC DEFB $61,$60,$1F,$7D,$1D,$6C,$67,$88
 $68C4 DEFB $E1,$82,$1E,$61,$74,$85,$87,$20
 $68CC DEFB $43,$2B,$26,$50,$1E

; Data block at 68D1
b$68D1 DEFB $88,$12,$6C,$67,$88,$E1,$B2,$1E
 $68D9 DEFB $88,$AA,$01,$1F

; Data block at 68DD
b$68DD DEFB $10

; Data block at 68DE
w$68DE DEFW $2222
 $68E0 DEFW $061F
 $68E2 DEFW $1F74

; Data block at 68E4
b$68E4 DEFB $06,$81,$7C,$74,$1F

; Data block at 68E9
b$68E9 DEFB $88,$AA,$67,$1F,$00,$C2,$98,$1E
 $68F1 DEFB $20,$46,$B2,$66,$91,$30,$A0,$20
 $68F9 DEFB $44,$2E,$13,$49,$80,$78,$1F,$E5
 $6901 DEFB $DB,$83,$96,$0F,$C5,$7E,$14,$C5
 $6909 DEFB $7E,$15,$80,$1E,$16,$80,$1E,$17
 $6911 DEFB $C2,$A8,$20,$1F,$F4,$07,$1E,$0A
 $6919 DEFB $02,$83,$F5,$0B,$E6,$FF,$1F,$06
 $6921 DEFB $87,$79,$22,$0B,$F4,$FF,$22,$1E

; Data block at 6929
b$6929 DEFB $06,$87,$79,$61,$07,$02,$F5,$FF
 $6931 DEFB $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D
 $6939 DEFB $1F,$0B,$F7,$FF,$6B,$6F,$6D,$88
 $6941 DEFB $C1,$64,$78,$C2,$68,$88,$E1,$70
 $6949 DEFB $2C,$C8,$75,$F7,$A9,$F4,$17,$C1
 $6951 DEFB $F4,$6F,$62,$20,$45,$11,$69,$42
 $6959 DEFB $C8,$20,$42,$53,$C4,$20,$43,$A2
 $6961 DEFB $02,$E0,$64,$6E,$82,$6A,$87,$F9
 $6969 DEFB $82,$F1,$2E,$C6,$73,$64,$C7,$B7
 $6971 DEFB $89,$01,$B0,$25,$0B,$BC,$FF,$C0
 $6979 DEFB $03,$60,$F5,$42,$C2,$98,$F4,$DC
 $6981 DEFB $C0,$9D,$61,$20,$45,$0C,$A4,$59
 $6989 DEFB $D0,$84,$11,$2E,$60,$F5,$42,$20
 $6991 DEFB $44,$24,$83,$79,$80,$62,$83,$B4
 $6999 DEFB $63,$C3,$15,$20,$45,$BA,$58,$46
 $69A1 DEFB $64,$6A,$F4,$DC,$2C,$89,$A6,$C6
 $69A9 DEFB $E6,$7E,$20,$47,$91,$6C,$F6,$58
 $69B1 DEFB $B2,$63,$C4,$94,$F5,$42,$F3,$0A
 $69B9 DEFB $72,$62,$87,$D9,$B7,$B4,$0B,$72
 $69C1 DEFB $FF,$84,$6B,$F4,$DC,$C7,$79,$61
 $69C9 DEFB $64,$22,$70,$F4,$17,$66,$20,$44
 $69D1 DEFB $BC,$83,$09,$80,$89,$3C,$C8,$B6
 $69D9 DEFB $81,$91,$2C,$88,$12,$64,$89,$8E
 $69E1 DEFB $6D,$65,$85,$7A,$83,$F9,$75,$64
 $69E9 DEFB $81,$7F,$D8,$07,$40,$28,$88,$A4
 $69F1 DEFB $80,$40,$64,$D4,$AD,$2E,$22,$2E
 $69F9 DEFB $20,$46,$21,$67,$04,$D0,$A0,$7E
 $6A01 DEFB $20,$49,$0C,$E7,$59,$05,$C3,$2C
 $6A09 DEFB $C0,$64,$81,$7F,$83,$F9,$20,$46
 $6A11 DEFB $31,$4A,$C4,$B8,$E0,$88,$AA,$C7
 $6A19 DEFB $B7,$7C,$85,$7A,$61,$C8,$B6,$81
 $6A21 DEFB $91,$2E,$02,$49,$FF,$0B,$0B,$FF
 $6A29 DEFB $84,$6B,$F4,$DC,$C2,$98,$63,$02
 $6A31 DEFB $96,$FF,$0B,$FE,$FE,$6D,$C6,$02
 $6A39 DEFB $6E,$64,$20,$45,$30,$52,$C2,$90
 $6A41 DEFB $61,$D8,$07,$40,$28,$60,$C1,$FB
 $6A49 DEFB $6A,$D3,$CA,$75,$60,$C5,$7E,$C6
 $6A51 DEFB $48,$D1,$8B,$62,$87,$1D,$65,$F5
 $6A59 DEFB $81,$F1,$47,$20,$43,$63,$E7,$40
 $6A61 DEFB $86,$9E,$C0,$C3,$C3,$41,$63,$20
 $6A69 DEFB $43,$9B,$D8,$40,$61,$62,$20,$46
 $6A71 DEFB $33,$E4,$54,$9D,$C0,$20,$44,$83
 $6A79 DEFB $EE,$59,$00,$2E,$87,$D1,$C8,$B6
 $6A81 DEFB $20,$44,$69,$42,$E9,$80,$20,$47
 $6A89 DEFB $22,$66,$19,$D0,$B2,$83,$3E,$60
 $6A91 DEFB $83,$48,$D9,$D7,$6C,$C7,$97,$66
 $6A99 DEFB $64,$63,$F4,$6B,$F4,$DC,$78,$20
 $6AA1 DEFB $48,$22,$66,$79,$04,$65,$20,$83
 $6AA9 DEFB $3E,$20,$46,$61,$69,$44,$B8,$E0
 $6AB1 DEFB $C8,$B6,$20,$45,$40,$61,$02,$B8
 $6AB9 DEFB $2E,$02,$B2,$FE,$0B,$74,$FE,$64
 $6AC1 DEFB $6E,$82,$6A,$20,$48,$2E,$29,$22
 $6AC9 DEFB $B4,$AC,$C8,$70,$61,$D8,$07,$40
 $6AD1 DEFB $28,$60,$81,$91,$6A,$D3,$CA,$02
 $6AD9 DEFB $74,$FF,$0B,$56,$FE,$C0,$03,$F0
 $6AE1 DEFB $B9,$C2,$98,$76,$20,$43,$99,$4B
 $6AE9 DEFB $30,$64,$63,$C6,$E6,$62,$83,$B4
 $6AF1 DEFB $2E,$1F,$0B,$E8,$FF,$72,$20,$48
 $6AF9 DEFB $9D,$61,$24,$CD,$2E,$38,$20,$46
 $6B01 DEFB $09,$D2,$C4,$D3,$20,$F9,$71,$20
 $6B09 DEFB $45,$85,$66,$82,$CC,$64,$79,$65
 $6B11 DEFB $60,$89,$78,$65,$F0,$BD,$83,$1F
 $6B19 DEFB $87,$B4,$20,$47,$0B,$18,$FB,$A5
 $6B21 DEFB $C7,$F4,$DC,$88,$D7,$61,$D6,$E2
 $6B29 DEFB $7E,$83,$B4,$63,$20,$46,$18,$61
 $6B31 DEFB $4A,$C8,$A0,$60,$20,$47,$1D,$59
 $6B39 DEFB $09,$26,$93,$2E,$C0,$03,$20,$49
 $6B41 DEFB $4B,$87,$22,$91,$22,$61,$40,$C0
 $6B49 DEFB $03,$6C,$85,$58,$D7,$97,$64,$6E
 $6B51 DEFB $C8,$07,$C8,$B6,$81,$91,$2E,$64
 $6B59 DEFB $20,$44,$A4,$AA,$CC,$80,$20,$46
 $6B61 DEFB $21,$66,$59,$58,$A0,$60,$20,$44
 $6B69 DEFB $A2,$68,$C2,$80,$65,$C9,$D7,$20
 $6B71 DEFB $47,$3C,$8A,$1A,$16,$74,$B2,$3D
 $6B79 DEFB $0B,$62,$FF,$72,$7E,$20,$44,$AC
 $6B81 DEFB $EA,$16,$00,$20,$44,$9A,$D2,$C6
 $6B89 DEFB $00,$7E,$83,$1F,$87,$B4,$20,$47
 $6B91 DEFB $22,$67,$07,$CC,$B3,$65,$64,$2E
 $6B99 DEFB $02,$D3,$FD,$7D,$1D,$64,$6E,$61
 $6BA1 DEFB $D3,$81,$84,$77,$60,$D1,$64,$83
 $6BA9 DEFB $1F,$2E,$1F,$0B,$6C,$FD,$83,$B7
 $6BB1 DEFB $27,$42,$73,$E4,$2E,$1F,$0B,$4D
 $6BB9 DEFB $FC,$87,$32,$83,$B7,$27,$42,$73
 $6BC1 DEFB $E4,$66,$89,$B1,$7C,$1F,$06,$2C
 $6BC9 DEFB $89,$A6,$7B,$C0,$76,$61,$7C,$20
 $6BD1 DEFB $46,$39,$69,$44,$B8,$E0,$D6,$F6
 $6BD9 DEFB $40,$28,$20,$47,$09,$D3,$40,$D0
 $6BE1 DEFB $A4,$2C,$C7,$79,$22,$7D,$80,$05
 $6BE9 DEFB $85,$5B,$85,$75,$83,$B7,$27,$42
 $6BF1 DEFB $73,$E4,$3F,$22,$1E,$72,$62,$86
 $6BF9 DEFB $CB,$20,$44,$33,$12,$35,$80,$65
 $6C01 DEFB $60,$87,$0A,$2C,$06,$20,$44,$6B
 $6C09 DEFB $EC,$59,$80,$77,$82,$72,$60,$D8
 $6C11 DEFB $61,$68,$D7,$8A,$65,$D6,$1B,$C2
 $6C19 DEFB $F4,$1E,$70,$78,$89,$7B,$20,$43
 $6C21 DEFB $3B,$D2,$E0,$27,$20,$47,$0B,$B3
 $6C29 DEFB $74,$16,$45,$83,$B7,$27,$42,$73
 $6C31 DEFB $E4,$3F,$1F,$06,$20,$46,$91,$60
 $6C39 DEFB $C4,$96,$60,$22,$88,$12,$83,$B7
 $6C41 DEFB $27,$42,$73,$E4,$F4,$2D,$81,$7F
 $6C49 DEFB $D3,$81,$88,$AA,$7A,$27,$42,$2C
 $6C51 DEFB $8A,$22,$1E,$06,$20,$45,$9A,$1F
 $6C59 DEFB $5A,$4C,$22,$64,$D1,$05,$40,$C8
 $6C61 DEFB $20,$43,$9B,$9E,$20,$2C,$89,$6D
 $6C69 DEFB $79,$84,$36,$89,$7B,$82,$AC,$85
 $6C71 DEFB $60,$80,$25,$22,$1E,$7D,$1D,$70
 $6C79 DEFB $F4,$17,$64,$6E,$C3,$41,$79,$7F
 $6C81 DEFB $20,$47,$9A,$02,$D2,$9A,$AC,$87
 $6C89 DEFB $8F,$2C,$F4,$2D,$80,$57,$20,$47
 $6C91 DEFB $09,$08,$91,$D0,$A4,$61,$C8,$B6
 $6C99 DEFB $20,$43,$B2,$58,$50,$86,$0F,$63
 $6CA1 DEFB $F4,$2D,$20,$46,$1B,$DC,$62,$CE
 $6CA9 DEFB $60,$2C,$C8,$B6,$67,$89,$9E,$F4
 $6CB1 DEFB $2D,$69,$84,$C5,$85,$AE,$2E,$1F
 $6CB9 DEFB $89,$3F,$C7,$94,$60,$81,$17,$F5
 $6CC1 DEFB $42,$F3,$0A,$C9,$04,$C2,$29,$20
 $6CC9 DEFB $43,$80,$58,$50,$2C,$88,$A7,$2C
 $6CD1 DEFB $20,$49,$91,$46,$FB,$16,$49,$71
 $6CD9 DEFB $C0,$2C,$C9,$04,$63,$C7,$79,$22
 $6CE1 DEFB $84,$6B,$F4,$DC,$2C,$6F,$64,$D4
 $6CE9 DEFB $AD,$89,$A6,$C2,$44,$C8,$B6,$89
 $6CF1 DEFB $EB,$3F,$22,$1E,$86,$A8,$84,$E2
 $6CF9 DEFB $85,$5B,$86,$59,$85,$F2,$2C,$F4
 $6D01 DEFB $2D,$85,$90,$74,$1F,$64,$81,$7F
 $6D09 DEFB $20,$44,$13,$1E,$35,$80,$7F,$89
 $6D11 DEFB $78,$85,$F2,$2C,$F4,$2D,$80,$57
 $6D19 DEFB $62,$D1,$B7,$D3,$4C,$65,$1F,$0A
 $6D21 DEFB $02,$0B,$D3,$FF,$0B,$E1,$FF,$F5
 $6D29 DEFB $84,$F4,$8B,$2E,$1F,$84,$6B,$F4
 $6D31 DEFB $2D,$80,$57,$06,$62,$71,$D1,$B7
 $6D39 DEFB $20,$4A,$0C,$6A,$14,$BA,$81,$70
 $6D41 DEFB $CA,$65,$F5,$84,$F4,$8B,$63,$F4
 $6D49 DEFB $2D,$20,$45,$21,$5A,$17,$10,$61
 $6D51 DEFB $74,$73,$6A,$20,$43,$7B,$86,$50
 $6D59 DEFB $2E,$1F,$7D,$1D,$06,$C4,$AB,$60
 $6D61 DEFB $86,$B5,$85,$46,$89,$10,$7A,$B0
 $6D69 DEFB $DC,$C7,$94,$60,$89,$10,$86,$B5
 $6D71 DEFB $85,$46,$2C,$06,$C0,$9D,$61,$20
 $6D79 DEFB $45,$91,$6C,$9B,$14,$84,$11,$2E
 $6D81 DEFB $C0,$03,$76,$C1,$D4,$61,$76,$C7
 $6D89 DEFB $79,$22,$6C,$69,$60,$F5,$42,$2C
 $6D91 DEFB $76,$81,$79,$7A,$80,$DC,$2E,$22
 $6D99 DEFB $1E

; Data block at 6D9A
b$6D9A DEFB $0B,$6A,$FA,$6B,$80,$57,$88,$12
 $6DA2 DEFB $20,$42,$9A,$64,$75,$F4,$2D,$6E
 $6DAA DEFB $7F,$20,$45,$7C,$88,$59,$4C,$2C
 $6DB2 DEFB $85,$B3,$86,$04,$67,$61,$D3,$81
 $6DBA DEFB $81,$61,$2E,$22,$1E,$84,$6B,$2C
 $6DC2 DEFB $C8,$B6,$20,$48,$39,$5D,$46,$15
 $6DCA DEFB $A1,$70,$20,$46,$4B,$A6,$99,$D2
 $6DD2 DEFB $60,$76,$C4,$AD,$F5,$84,$F4,$8B
 $6DDA DEFB $63,$20,$45,$BA,$66,$82,$CC,$61
 $6DE2 DEFB $D2,$98,$60,$84,$1D,$2E,$1F,$7D
 $6DEA DEFB $1D,$89,$71,$C5,$23,$89,$3C,$7A
 $6DF2 DEFB $60,$D6,$48,$63,$C7,$79,$22,$83
 $6DFA DEFB $96,$C5,$7E,$F4,$17,$2E,$22,$1D
 $6E02 DEFB $72,$80,$5A,$20,$46,$2E,$06,$9A
 $6E0A DEFB $14,$80,$D5,$23,$77,$7E,$82,$DD
 $6E12 DEFB $06,$C7,$79,$22,$70,$83,$FF,$67
 $6E1A DEFB $62,$81,$91,$66,$85,$58,$84,$71
 $6E22 DEFB $64,$2C,$6C,$C7,$97,$66,$89,$08
 $6E2A DEFB $D1,$B7,$C3,$4C,$2C,$62,$F5,$84
 $6E32 DEFB $F1,$43,$63,$62,$F5,$84,$F4,$8B
 $6E3A DEFB $2C,$89,$8E,$C5,$8B,$84,$C5,$85
 $6E42 DEFB $AE,$68,$20,$47,$99,$60,$19,$06
 $6E4A DEFB $85,$C4,$55,$80,$4D,$C0,$70,$72
 $6E52 DEFB $60,$87,$66,$89,$7E,$2E,$60,$C1
 $6E5A DEFB $FB,$20,$47,$78,$C7,$59,$48,$A4
 $6E62 DEFB $6A,$88,$A0,$20,$49,$91,$67,$02
 $6E6A DEFB $8E,$89,$B1,$40,$20,$44,$43,$DA
 $6E72 DEFB $59,$80,$68,$60,$20,$47,$A3,$EE
 $6E7A DEFB $E9,$A1,$30,$65,$F4,$CD,$F3,$E6
 $6E82 DEFB $63,$2C,$80,$C5,$65,$60,$20,$43
 $6E8A DEFB $60,$46,$B0,$65,$D5,$8B,$89,$7E
 $6E92 DEFB $63,$D0,$70,$20,$45,$6B,$E8,$9B
 $6E9A DEFB $14,$2C,$60,$85,$0B,$86,$B5,$78
 $6EA2 DEFB $20,$49,$1B,$DB,$06,$16,$85,$66
 $6EAA DEFB $40,$20,$46,$10,$4C,$66,$14,$80
 $6EB2 DEFB $2E,$88,$B3,$6E,$C1,$70,$89,$3F
 $6EBA DEFB $F7,$7E,$F9,$E3,$83,$3E,$20,$49
 $6EC2 DEFB $0C,$E6,$99,$D0,$2E,$19,$40,$63
 $6ECA DEFB $6C,$C0,$76,$66,$60,$C2,$E9,$82
 $6ED2 DEFB $3D,$F4,$6B,$F3,$84,$F4,$DC,$83
 $6EDA DEFB $D8,$D8,$87,$40,$70,$80,$5A,$84
 $6EE2 DEFB $71,$68,$60,$81,$91,$63,$89,$B1
 $6EEA DEFB $7C,$C3,$90,$61,$60,$20,$44,$98
 $6EF2 DEFB $CA,$E2,$80,$C8,$B6,$C5,$7E,$2E
 $6EFA DEFB $22,$1D,$06,$C5,$23,$89,$3C,$C0
 $6F02 DEFB $03,$64,$D2,$98,$20,$45,$98,$72
 $6F0A DEFB $97,$1C,$22,$83,$F5,$88,$AA,$F4
 $6F12 DEFB $17,$2C,$84,$90,$62,$20,$45,$6A
 $6F1A DEFB $5D,$5A,$14,$7B,$2D,$02,$F8,$FE
 $6F22 DEFB $66,$67,$81,$35,$F4,$17,$1F,$0B
 $6F2A DEFB $F9,$FF,$2C,$F4,$2D,$6F,$6D,$D4
 $6F32 DEFB $AD,$84,$21,$64,$6F,$6C,$1F,$20
 $6F3A DEFB $42,$BA,$32,$6F,$64,$88,$C1,$66
 $6F42 DEFB $05,$1F,$84,$21,$C2,$44,$64,$82
 $6F4A DEFB $AC,$20,$45,$21,$49,$51,$94,$02
 $6F52 DEFB $F0,$FF,$0B,$AB,$F8,$0A,$02,$0B
 $6F5A DEFB $C9,$FF,$0B,$CD,$FF,$2E,$22,$1E
 $6F62 DEFB $0B,$9D,$F8,$70,$6F,$64,$88,$C1
 $6F6A DEFB $88,$AA,$67,$88,$0A,$20,$49,$1B
 $6F72 DEFB $DC,$E2,$8E,$89,$7B,$80,$80,$EB
 $6F7A DEFB $00,$63,$00,$3F,$22,$1E,$0B,$7F
 $6F82 DEFB $F8,$0A,$02,$0B,$B4,$FF,$0B,$BC
 $6F8A DEFB $FF,$3F,$22,$1E,$7D,$1D,$20,$43
 $6F92 DEFB $59,$4B,$00,$85,$5B,$20,$45,$83
 $6F9A DEFB $E7,$42,$90,$77,$20,$42,$0B,$B2
 $6FA2 DEFB $D5,$AB,$D2,$A8,$41,$A4,$C0,$2E
 $6FAA DEFB $1F,$87,$F9,$F5,$84,$F1,$43,$84
 $6FB2 DEFB $98,$84,$02,$2C,$82,$D0,$F4,$17
 $6FBA DEFB $2C,$80,$60,$81,$35,$20,$49,$1B
 $6FC2 DEFB $DC,$36,$56,$69,$7B,$80,$2E,$1F
 $6FCA DEFB $81,$35,$F4,$17,$0B,$5E,$FF,$2E
 $6FD2 DEFB $22,$2E,$76,$C1,$6C,$83,$3E,$62
 $6FDA DEFB $81,$D8,$89,$A6,$20,$44,$61,$42
 $6FE2 DEFB $49,$80,$60,$71,$20,$49,$22,$67
 $6FEA DEFB $49,$16,$73,$29,$00,$F5,$84,$F4
 $6FF2 DEFB $8B,$79,$65,$60,$D7,$47,$84,$77
 $6FFA DEFB $60,$20,$45,$21,$61,$44,$4C,$65
 $7002 DEFB $F7,$7E,$89,$E3,$2E,$1F,$70,$6C
 $700A DEFB $C5,$23,$C0,$03,$20,$45,$A2,$1F
 $7012 DEFB $53,$A0,$60,$F5,$42,$67,$20,$42
 $701A DEFB $7D,$64,$85,$46,$2E,$1F,$0B,$E8
 $7022 DEFB $FF,$7F,$85,$64,$78,$79,$D5,$23
 $702A DEFB $42,$4B,$8E,$83,$3E,$84,$11,$7B
 $7032 DEFB $2E,$1F,$70,$88,$A7,$81,$D8,$F4
 $703A DEFB $2D,$87,$9D,$D7,$22,$61,$60,$F9
 $7042 DEFB $E3,$63,$20,$48,$0C,$21,$22,$A0
 $704A DEFB $AE,$20,$C8,$B6,$F5,$42,$F3,$0A
 $7052 DEFB $2E,$F9,$EE,$85,$58,$20,$45,$91
 $705A DEFB $5A,$FB,$14,$60,$20,$45,$13,$C8
 $7062 DEFB $92,$CC,$7B,$63,$D8,$8F,$60,$C6
 $706A DEFB $1B,$88,$B3,$78,$83,$48,$61,$D3
 $7072 DEFB $8D,$2E,$1F,$64,$02,$F7,$FF,$87
 $707A DEFB $32,$88,$A7,$F4,$17,$89,$7B,$85
 $7082 DEFB $90,$20,$44,$45,$65,$2C,$80,$84
 $708A DEFB $36,$89,$7B,$78,$61,$20,$44,$18
 $7092 DEFB $68,$34,$00,$88,$A4,$2E,$1F,$71
 $709A DEFB $83,$96,$F4,$17,$2C,$F0,$B9,$89
 $70A2 DEFB $B1,$C4,$FA,$89,$01,$61,$20,$43
 $70AA DEFB $99,$58,$C0,$88,$A4,$2C,$89,$7B
 $70B2 DEFB $85,$90,$C3,$11,$89,$9E,$60,$87
 $70BA DEFB $62,$85,$0F,$67,$2E,$1F,$6E,$64
 $70C2 DEFB $C3,$41,$02,$F2,$FF,$6B,$80,$57
 $70CA DEFB $20,$45,$09,$A4,$14,$90,$66,$F0
 $70D2 DEFB $B9,$83,$D8,$20,$45,$2B,$2A,$42
 $70DA DEFB $90,$20,$41,$AC,$C0,$F4,$17,$2E
 $70E2 DEFB $1F,$6B,$6F,$6D,$74,$60,$84,$46
 $70EA DEFB $65,$66,$F4,$17,$2E,$1F,$71,$83
 $70F2 DEFB $96,$F4,$17,$2C,$F4,$2D,$87,$9D
 $70FA DEFB $D7,$22,$61,$F4,$CD,$83,$E6,$20
 $7102 DEFB $47,$A3,$DA,$F9,$49,$F7,$61,$6E
 $710A DEFB $80,$60,$D5,$23,$C0,$84,$2E,$1F
 $7112 DEFB $7D,$67,$C3,$90,$77,$83,$FF,$81
 $711A DEFB $D8,$3F,$1F,$D1,$D4,$72,$85,$5B
 $7122 DEFB $86,$A8,$2E,$1F,$0B,$D9,$F6,$6B
 $712A DEFB $C9,$DB,$84,$F7,$64,$61,$87,$0E
 $7132 DEFB $83,$FF,$86,$A8,$2E,$22,$1D,$20
 $713A DEFB $43,$68,$56,$50,$D8,$75,$60,$F5
 $7142 DEFB $42,$C2,$66,$6D,$20,$44,$61,$43
 $714A DEFB $62,$80,$81,$D8,$2E,$1F,$6E,$89
 $7152 DEFB $F2,$85,$64,$C7,$8A,$60,$87,$3B
 $715A DEFB $83,$3E,$60,$83,$B4,$89,$EB,$3F
 $7162 DEFB $1F,$7B,$7D,$C7,$97,$61,$7C,$60
 $716A DEFB $20,$46,$84,$9E,$26,$15,$A0,$83
 $7172 DEFB $FF,$3F,$1F,$70,$88,$A7,$D7,$BB
 $717A DEFB $85,$5B,$61,$60,$F1,$43,$27,$40
 $7182 DEFB $98,$82,$A2,$86,$A8,$2E,$1F,$87
 $718A DEFB $32,$88,$A7,$F1,$D8,$89,$B1,$64
 $7192 DEFB $D7,$BB,$85,$5B,$61,$F5,$71,$F8
 $719A DEFB $4F,$63,$F5,$81,$F6,$7C,$86,$A8
 $71A2 DEFB $2E,$1F,$81,$9E,$F1,$D8,$F4,$2D
 $71AA DEFB $89,$B1,$74,$60,$20,$44,$9D,$02
 $71B2 DEFB $63,$00,$7B,$2E,$1F,$70,$F4,$2D
 $71BA DEFB $85,$90,$D7,$79,$C8,$B6,$67,$80
 $71C2 DEFB $40,$71,$20,$48,$1B,$DC,$6A,$CD
 $71CA DEFB $2E,$38,$2C,$C6,$73,$F4,$2D,$C7
 $71D2 DEFB $B7,$D9,$56,$60,$82,$A2,$65,$F5
 $71DA DEFB $84,$F4,$8B,$7B,$2E,$1F,$70,$2C
 $71E2 DEFB $F4,$17,$82,$ED,$C7,$94,$64,$83
 $71EA DEFB $FF,$2E,$1F

; Data block at 71ED
b$71ED DEFB $06,$72,$62,$20,$48,$9D,$65,$09
 $71F5 DEFB $26,$65,$20,$D5,$23,$77,$7E,$82
 $71FD DEFB $DD,$2C,$C7,$79,$22,$0B,$DE,$FF
 $7205 DEFB $22,$1E

; Data block at 7207
b$7207 DEFB $0B,$F8,$F5,$07,$F4,$2D,$C9,$DB
 $720F DEFB $84,$F7,$64,$61,$85,$60,$F5,$81
 $7217 DEFB $F7,$A9,$F4,$17,$2C,$F4,$17,$C8
 $721F DEFB $B6,$67,$07,$22,$1E

; Data block at 7224
b$7224 DEFB $0B,$DB,$F5,$0B,$B9,$FF,$02,$E0
 $722C DEFB $FF

; Data block at 722D
b$722D DEFB $0B,$D2,$F5,$70,$81,$7C,$64,$D6
 $7235 DEFB $DF,$40,$28,$66,$05,$89,$EB,$2C
 $723D DEFB $F4,$17,$20,$3F,$22,$1E,$0B,$BC
 $7245 DEFB $F5,$7D,$22,$1E,$0B,$B6,$F5,$66
 $724D DEFB $85,$58,$70,$7C,$2C,$F4,$17,$2C
 $7255 DEFB $F4,$2D,$89,$B1,$88,$C1,$80,$05
 $725D DEFB $6C,$1F,$0B,$EA,$FF,$2E,$22,$1D
 $7265 DEFB $0B,$E4,$FF,$2C,$75,$F4,$2D,$6E
 $726D DEFB $D6,$1B,$D1,$91,$40,$98,$61,$D8
 $7275 DEFB $07,$40,$28,$87,$32,$7B,$2E,$22
 $727D DEFB $1D,$0B,$81,$F5,$C8,$99,$20,$43
 $7285 DEFB $32,$5C,$50,$F4,$17,$75,$7D,$C2
 $728D DEFB $66,$6C,$D6,$DF,$40,$28,$22,$1E
 $7295 DEFB $0B,$6A,$F5,$7D,$20,$44,$84,$9E
 $729D DEFB $F3,$00,$6F,$64,$6E,$66,$05,$22
 $72A5 DEFB $1E,$0B,$59,$F5,$6B,$6F,$6D,$80
 $72AD DEFB $E1,$66,$64,$6E,$60,$82,$B7,$61
 $72B5 DEFB $D6,$DF,$40,$28,$66,$02,$E9,$FF
 $72BD DEFB $0B,$42,$F5,$66,$67,$70,$63,$83
 $72C5 DEFB $96,$2C,$75,$F4,$2D,$6F,$6D,$74
 $72CD DEFB $84,$21,$6C,$C6,$DF,$66,$02,$D0
 $72D5 DEFB $FF,$86,$04,$D8,$BD,$6A,$62,$88
 $72DD DEFB $D7,$F4,$17,$1F,$6B,$81,$7F,$20
 $72E5 DEFB $45,$08,$C6,$58,$50,$66,$05,$2E
 $72ED DEFB $1F,$7D,$1D,$84,$6B,$F4,$2D,$C9
 $72F5 DEFB $DB,$84,$F7,$64,$61,$85,$60,$F0
 $72FD DEFB $B9,$F6,$7C,$63,$F2,$16,$F8,$4F
 $7305 DEFB $2E,$80,$B9,$2C,$F2,$16,$C8,$B6
 $730D DEFB $67,$F4,$6B,$F4,$DC,$7A,$F7,$7E
 $7315 DEFB $F9,$E3,$2E,$1F,$20,$42,$C9,$66
 $731D DEFB $F4,$6B,$2C,$C9,$24,$85,$DB,$69
 $7325 DEFB $C3,$41,$2E,$1F,$83,$F5,$F4,$6B
 $732D DEFB $2C,$83,$96,$65,$64,$61,$D1,$D4
 $7335 DEFB $87,$F9,$C6,$EB,$2E,$1F,$22,$85
 $733D DEFB $60,$85,$5B,$81,$61,$60,$81,$30
 $7345 DEFB $6A,$1F,$0B,$F4,$FF,$20,$43,$40
 $734D DEFB $58,$60,$86,$59,$20,$45,$A5,$CA
 $7355 DEFB $CB,$14,$2E,$6B,$6E,$88,$0A,$71
 $735D DEFB $84,$4D,$C5,$AB,$2E,$20,$C7,$C8
 $7365 DEFB $2E,$20,$40,$80,$2E,$20,$40,$30
 $736D DEFB $2E,$22,$2E,$1F,$20,$45,$20,$5A
 $7375 DEFB $E2,$90,$20,$45,$9D,$12,$35,$E4
 $737D DEFB $20,$47,$15,$66,$97,$16,$73,$C8
 $7385 DEFB $B6,$2C,$89,$7B,$20,$47,$91,$46
 $738D DEFB $92,$D8,$A4,$62,$87,$1D,$20,$44
 $7395 DEFB $28,$64,$CC,$80,$C8,$B6,$C5,$7E
 $739D DEFB $7A,$60,$83,$70,$89,$3C,$6A,$60
 $73A5 DEFB $F1,$43,$27,$40,$98,$82,$A2,$66
 $73AD DEFB $F5,$84,$F1,$43,$83,$BA,$80,$D3
 $73B5 DEFB $C5,$8B,$2E,$70,$F4,$2D,$27,$41
 $73BD DEFB $63,$00,$D8,$8F,$64,$F4,$2D,$6E
 $73C5 DEFB $80,$D3,$86,$B5,$81,$9E,$83,$FF
 $73CD DEFB $83,$3E,$85,$4C,$62,$D9,$E7,$7B
 $73D5 DEFB $63,$F4,$2D,$6E,$85,$A7,$87,$9A
 $73DD DEFB $C0,$03,$85,$9D,$62,$86,$8D,$65
 $73E5 DEFB $D9,$D3,$C0,$03,$C8,$B6,$2E,$20
 $73ED DEFB $46,$1B,$0A,$19,$33,$20,$87,$A2
 $73F5 DEFB $69,$87,$B4,$7A,$D1,$B7,$20,$44
 $73FD DEFB $90,$5C,$72,$80,$2C,$60,$81,$52
 $7405 DEFB $D2,$98,$42,$4B,$8E,$60,$87,$32
 $740D DEFB $20,$45,$A1,$5B,$06,$14,$63,$20
 $7415 DEFB $46,$2E,$13,$44,$B8,$E0,$7A,$60
 $741D DEFB $84,$D8,$87,$BE,$2E,$6B,$C9,$DB
 $7425 DEFB $D7,$79,$66,$87,$A2,$69,$82,$25
 $742D DEFB $80,$D7,$73,$81,$17,$20,$42,$42
 $7435 DEFB $68,$60,$83,$A5,$2E,$60,$C6,$02
 $743D DEFB $20,$43,$1B,$2A,$50,$87,$F9,$82
 $7445 DEFB $F1,$67,$62,$85,$D8,$87,$03,$0B
 $744D DEFB $FB,$FE,$C0,$03,$84,$36,$80,$40
 $7455 DEFB $C8,$B6,$69,$6D,$20,$42,$10,$48
 $745D DEFB $82,$93,$2C,$89,$9A,$F4,$2D,$89
 $7465 DEFB $8A,$20,$44,$93,$EA,$E2,$00,$61
 $746D DEFB $F5,$84,$F4,$8B,$84,$1D,$61,$D1
 $7475 DEFB $29,$60,$C5,$AB,$61,$73,$2C,$88
 $747D DEFB $B3,$89,$8E,$71,$D1,$B7,$C3,$4C
 $7485 DEFB $64,$D4,$AD,$2C,$F4,$2D,$69,$20
 $748D DEFB $45,$33,$E4,$32,$90,$61,$D1,$29
 $7495 DEFB $84,$77,$60,$84,$1D,$2C,$6D,$C0
 $749D DEFB $C3,$20,$43,$08,$98,$50,$61,$20
 $74A5 DEFB $44,$93,$EB,$32,$80,$80,$66,$2E
 $74AD DEFB $84,$39,$7F,$20,$44,$9A,$1E,$35
 $74B5 DEFB $80,$89,$9A,$F4,$2D,$D2,$98,$41
 $74BD DEFB $29,$00,$60,$84,$EA,$61,$C3,$11
 $74C5 DEFB $F5,$84,$F4,$8B,$C5,$2F,$82,$25
 $74CD DEFB $77,$60,$81,$F0,$2C,$73,$82,$DD
 $74D5 DEFB $80,$40,$75,$20,$44,$13,$1F,$77
 $74DD DEFB $00,$80,$A3,$81,$61,$7D,$C0,$76
 $74E5 DEFB $61,$7C,$60,$87,$66,$83,$B4,$66
 $74ED DEFB $84,$98,$F5,$84,$F1,$43,$2E,$6A
 $74F5 DEFB $60,$86,$CF,$60,$C6,$02,$86,$67
 $74FD DEFB $89,$A6,$D7,$97,$61,$7C,$C4,$81
 $7505 DEFB $78,$60,$83,$70,$63,$7E,$89,$AD
 $750D DEFB $2C,$60,$81,$DF,$2C,$63,$60,$85
 $7515 DEFB $3B,$80,$43,$72,$F5,$84,$F1,$43
 $751D DEFB $27,$40,$98,$20,$44,$72,$4A,$32
 $7525 DEFB $80,$F2,$16,$F8,$4F,$63,$73,$20
 $752D DEFB $46,$32,$42,$E1,$94,$A0,$F0,$B9
 $7535 DEFB $F6,$7C,$2E,$6B,$6E,$20,$44,$0C
 $753D DEFB $D6,$52,$00,$88,$A4,$80,$40,$61
 $7545 DEFB $87,$0E,$6A,$60,$84,$1D,$83,$3E
 $754D DEFB $60,$86,$CF,$2E,$1F,$06,$C7,$97
 $7555 DEFB $6A,$62,$20,$43,$63,$E7,$30,$2C
 $755D DEFB $D5,$23,$42,$4B,$8E,$20,$46,$33
 $7565 DEFB $E4,$C7,$C9,$C0,$63,$C2,$0A,$C6
 $756D DEFB $F2,$61,$B4,$02,$7D,$1D,$C0,$03
 $7575 DEFB $64,$D2,$98,$06,$20,$44,$BA,$13
 $757D DEFB $09,$80,$7E,$20,$45,$43,$E5,$32
 $7585 DEFB $CC,$84,$77,$20,$45,$08,$E8,$97
 $758D DEFB $B8,$63,$20,$45,$9C,$0A,$52,$4C
 $7595 DEFB $85,$EF,$82,$72,$60,$B7,$3F,$F0
 $759D DEFB $B9,$C2,$98,$63,$C7,$79,$22,$F4
 $75A5 DEFB $17,$2C,$89,$F2,$20,$4B,$4B,$A8
 $75AD DEFB $59,$18,$B2,$2B,$86,$50,$67,$20
 $75B5 DEFB $47,$11,$46,$F6,$A5,$C7,$20,$47
 $75BD DEFB $0B,$9C,$FC,$A5,$C7,$2E,$22,$2E
 $75C5 DEFB $C6,$E2,$62,$83,$B4,$76,$87,$AF
 $75CD DEFB $64,$2E,$02,$9D,$F3,$F0,$B9,$02
 $75D5 DEFB $CD,$FF,$62,$20,$48,$69,$67,$32
 $75DD DEFB $B8,$E5,$90,$C0,$8C,$6A,$60,$82
 $75E5 DEFB $6E,$2C,$1F,$0B,$EF,$FF,$C8,$87
 $75ED DEFB $62,$85,$D8,$7A,$F0,$B9,$63,$20
 $75F5 DEFB $49,$22,$67,$30,$C0,$A1,$94,$C0
 $75FD DEFB $82,$72,$60,$D8,$61,$1E,$0B,$D4
 $7605 DEFB $FF,$C3,$89,$62,$85,$D8,$61,$02
 $760D DEFB $E5,$FF,$7D,$1D,$60,$88,$EB,$C6
 $7615 DEFB $E6,$79,$65,$60,$B8,$3E,$7D,$1D
 $761D DEFB $6B,$80,$57,$88,$12,$F4,$2D,$81
 $7625 DEFB $7F,$83,$F9,$64,$72,$66,$2E,$1F
 $762D DEFB $88,$F9,$69,$D0,$FE,$42,$4B,$8E
 $7635 DEFB $F5,$84,$F1,$43,$80,$05,$D8,$0A
 $763D DEFB $44,$A2,$12,$E3,$80,$2E,$1F,$0B
 $7645 DEFB $E9,$FF,$6B,$84,$90,$C1,$F4,$6D
 $764D DEFB $84,$E2,$73,$84,$24,$7F,$D3,$4C
 $7655 DEFB $84,$F7,$66,$87,$F9,$F4,$2D,$20
 $765D DEFB $46,$83,$02,$E7,$14,$80,$61,$D3
 $7665 DEFB $81,$20,$42,$92,$48,$65,$73,$2E
 $766D DEFB $F4,$2D,$83,$BA,$85,$B3,$20,$43
 $7675 DEFB $49,$0A,$10,$66,$87,$A2,$83,$BA
 $767D DEFB $80,$47,$84,$98,$86,$BA,$F7,$71
 $7685 DEFB $2E,$1F,$20,$41,$7A,$00,$7F,$20
 $768D DEFB $42,$3B,$C8,$2C,$64,$C3,$41,$79
 $7695 DEFB $2C,$F4,$2D,$80,$57,$C7,$07,$F5
 $769D DEFB $84,$F4,$8B,$2E,$02,$A3,$FF,$87
 $76A5 DEFB $A2,$69,$F5,$81,$F1,$47,$D7,$8F
 $76AD DEFB $42,$0C,$B2,$80,$D7,$76,$C2,$47
 $76B5 DEFB $2C,$F4,$2D,$88,$C1,$87,$A2,$69
 $76BD DEFB $87,$D9,$88,$A7,$63,$F4,$2D,$6F
 $76C5 DEFB $6D,$88,$C1,$87,$A2,$82,$AC,$20
 $76CD DEFB $46,$68,$65,$24,$94,$80,$2E,$6C
 $76D5 DEFB $27,$40,$98,$20,$44,$35,$5C,$EC
 $76DD DEFB $80,$64,$C7,$B7,$20,$46,$69,$5D
 $76E5 DEFB $44,$BD,$C0,$73,$2C,$89,$7B,$C0
 $76ED DEFB $53,$20,$43,$AC,$CA,$40,$61,$D7
 $76F5 DEFB $79,$84,$21,$20,$44,$0B,$12,$B2
 $76FD DEFB $80,$87,$A2,$63,$86,$BA,$F5,$84
 $7705 DEFB $F4,$8B,$89,$8E,$2E,$C0,$03,$82
 $770D DEFB $F1,$C0,$03,$F4,$2D,$D4,$AD,$87
 $7715 DEFB $A2,$C5,$00,$68,$F6,$BE,$D8,$61
 $771D DEFB $68,$F5,$1B,$2E,$1F,$6B,$84,$FC
 $7725 DEFB $68,$F7,$C2,$D8,$61,$2E,$1F,$68
 $772D DEFB $F5,$1B,$F4,$2D,$84,$FC,$68,$F1
 $7735 DEFB $74,$D8,$61,$2E,$6A,$F4,$CD,$83
 $773D DEFB $E6,$F4,$2D,$D8,$43,$6A,$62,$C7
 $7745 DEFB $17,$84,$1D,$68,$F1,$CA,$84,$BD
 $774D DEFB $2E,$1F,$85,$84,$F1,$43,$27,$40
 $7755 DEFB $98,$C4,$28,$69,$84,$98,$80,$05
 $775D DEFB $20,$43,$32,$6C,$50,$C9,$E7,$80
 $7765 DEFB $2E,$2C,$76,$69,$62,$88,$E4,$20
 $776D DEFB $48,$98,$D2,$57,$51,$33,$A0,$C9
 $7775 DEFB $D3,$77,$88,$0A,$87,$8F,$86,$D9
 $777D DEFB $2E,$C0,$70,$88,$AA,$69,$88,$0A
 $7785 DEFB $20,$46,$6E,$67,$42,$CB,$20,$C4
 $778D DEFB $81,$68,$7E,$D2,$29,$75,$85,$DB
 $7795 DEFB $69,$82,$AC,$20,$49,$22,$66,$37
 $779D DEFB $D8,$B2,$29,$00,$63,$F4,$2D,$83
 $77A5 DEFB $EA,$60,$86,$9E,$83,$3E,$7E,$86
 $77AD DEFB $D9,$89,$8E,$85,$A7,$87,$9A,$80
 $77B5 DEFB $25,$2E,$87,$A2,$69,$71,$70,$C4
 $77BD DEFB $F4,$81,$61,$60,$86,$67,$C0,$84
 $77C5 DEFB $83,$FF,$2E,$1F,$85,$84,$F4,$8B
 $77CD DEFB $69,$62,$20,$44,$BA,$48,$FB,$80
 $77D5 DEFB $2C,$73,$C4,$28,$C3,$DF,$C2,$47
 $77DD DEFB $80,$05,$20,$44,$2A,$4E,$8A,$00
 $77E5 DEFB $C9,$E7,$80,$2E,$2E,$6A,$60,$88
 $77ED DEFB $D7,$87,$A2,$81,$79,$83,$FF,$61
 $77F5 DEFB $84,$FC,$20,$43,$71,$43,$20,$73
 $77FD DEFB $20,$47,$62,$4C,$56,$3D,$C7,$D3
 $7805 DEFB $4C,$F5,$84,$F1,$43,$2E,$1F,$6B
 $780D DEFB $80,$57,$88,$12,$75,$F4,$2D,$80
 $7815 DEFB $57,$6D,$6A,$20,$46,$62,$44,$59
 $781D DEFB $53,$20,$61,$D7,$79,$7D,$F4,$2D
 $7825 DEFB $69,$C2,$68,$6A,$60,$88,$D7,$65
 $782D DEFB $60,$D5,$8B,$75,$F4,$2D,$81,$7C
 $7835 DEFB $D8,$8F,$64,$66,$F4,$2D,$69,$68
 $783D DEFB $F5,$1B,$80,$40,$66,$85,$AE,$2E
 $7845 DEFB $1F,$6B,$69,$20,$45,$0C,$D8,$52
 $784D DEFB $C0,$84,$C5,$85,$AE,$89,$9A,$60
 $7855 DEFB $D8,$16,$65,$62,$83,$B4,$87,$B4
 $785D DEFB $89,$C3,$85,$5B,$2C,$89,$9A,$F4
 $7865 DEFB $2D,$89,$8A,$79,$61,$60,$83,$6A
 $786D DEFB $F4,$2D,$C3,$41,$73,$C5,$2F,$88
 $7875 DEFB $AA,$2E,$7F,$89,$AD,$83,$FF,$83
 $787D DEFB $BA,$20,$44,$92,$66,$57,$00,$89
 $7885 DEFB $9A,$F4,$2D,$81,$79,$80,$A7,$84
 $788D DEFB $77,$60,$84,$1D,$63,$60,$20,$48
 $7895 DEFB $1B,$DA,$D7,$D1,$2F,$70,$83,$BA
 $789D DEFB $89,$C7,$60,$85,$3B,$2E,$89,$9A
 $78A5 DEFB $C8,$BD,$83,$BA,$20,$45,$18,$58
 $78AD DEFB $D2,$90,$82,$72,$62,$80,$FB,$89
 $78B5 DEFB $7B,$20,$43,$99,$5D,$40,$60,$85
 $78BD DEFB $3B,$C0,$84,$61,$60,$86,$B5,$88
 $78C5 DEFB $3E,$63,$60,$81,$D8,$C4,$AD,$60
 $78CD DEFB $20,$43,$91,$67,$40,$2E,$1F,$76
 $78D5 DEFB $69,$62,$83,$96,$D3,$4C,$65,$86
 $78DD DEFB $BA,$F5,$84,$F4,$8B,$2C,$80,$5A
 $78E5 DEFB $20,$41,$2E,$00,$F4,$5B,$20,$43
 $78ED DEFB $0C,$9B,$90,$85,$46,$F4,$2D,$80
 $78F5 DEFB $E1,$2E,$1F,$6B,$C0,$53,$88,$C4
 $78FD DEFB $66,$76,$69,$88,$69,$62,$20,$43
 $7905 DEFB $72,$46,$50,$82,$F7,$2C,$75,$84
 $790D DEFB $C5,$20,$43,$B9,$4A,$B0,$F4,$2D
 $7915 DEFB $69,$C2,$68,$88,$0A,$D9,$D3,$86
 $791D DEFB $29,$6A,$F5,$84,$F4,$8B,$63,$F4
 $7925 DEFB $2D,$C1,$F4,$6D,$83,$F9,$86,$2D
 $792D DEFB $73,$63,$60,$F5,$42,$20,$47,$32
 $7935 DEFB $4E,$8A,$25,$C7,$2E,$6B,$6F,$6D
 $793D DEFB $D4,$AD,$7D,$6C,$69,$80,$40,$80
 $7945 DEFB $05,$75,$6C,$C8,$16,$71,$85,$9D
 $794D DEFB $2E,$1F,$6B,$69,$89,$C7,$84,$C5
 $7955 DEFB $85,$AE,$C0,$03,$7F,$C4,$28,$20
 $795D DEFB $44,$0C,$9F,$32,$80,$63,$84,$D8
 $7965 DEFB $60,$D7,$47,$2C,$C0,$C3,$62,$71
 $796D DEFB $83,$ED,$D7,$F0,$41,$2C,$80,$F4
 $7975 DEFB $2D,$C2,$44,$6D,$83,$EA,$60,$83
 $797D DEFB $B4,$2E,$89,$9A,$76,$C7,$22,$63
 $7985 DEFB $C8,$DE,$85,$5B,$7D,$83,$BA,$83
 $798D DEFB $D2,$70,$F4,$2D,$84,$90,$C1,$F4
 $7995 DEFB $6D,$80,$E1,$6C,$2C,$F4,$2D,$84
 $799D DEFB $90,$81,$7F,$84,$39,$89,$A6,$C9
 $79A5 DEFB $DB,$20,$43,$B8,$5D,$40,$61,$84
 $79AD DEFB $24,$88,$69,$62,$20,$44,$9D,$CA
 $79B5 DEFB $5A,$00,$20,$43,$60,$49,$90,$84
 $79BD DEFB $F7,$F5,$84,$F1,$43,$2E,$1F,$70
 $79C5 DEFB $F4,$2D,$6F,$6D,$84,$F7,$61,$20
 $79CD DEFB $44,$9C,$0A,$15,$80,$20,$42,$4B
 $79D5 DEFB $18,$65,$80,$66,$75,$F4,$2D,$C2
 $79DD DEFB $44,$86,$2D,$F0,$B9,$63,$F2,$16
 $79E5 DEFB $20,$46,$0C,$8F,$54,$B8,$E0,$71
 $79ED DEFB $20,$47,$9D,$24,$F7,$1D,$99,$80
 $79F5 DEFB $05,$F5,$84,$F1,$47,$89,$B1,$2E
 $79FD DEFB $6C,$C7,$97,$66,$80,$C5,$65,$F2
 $7A05 DEFB $16,$27,$40,$98,$20,$47,$0B,$18
 $7A0D DEFB $90,$B8,$65,$72,$F0,$B9,$F5,$84
 $7A15 DEFB $F1,$43,$83,$BA,$20,$42,$1D,$68
 $7A1D DEFB $73,$79,$65,$60,$89,$B1,$2C,$F4
 $7A25 DEFB $2D,$6F,$6D,$88,$C1,$87,$A2,$88
 $7A2D DEFB $C4,$71,$70,$65,$84,$11,$2E,$1F
 $7A35 DEFB $6B,$83,$9A,$89,$C7,$81,$61,$62
 $7A3D DEFB $85,$27,$65,$20,$44,$73,$D3,$32
 $7A45 DEFB $80,$79,$68,$60,$83,$C2,$63,$89
 $7A4D DEFB $9A,$F4,$2D,$89,$8A,$79,$61,$74
 $7A55 DEFB $60,$83,$70,$C8,$DE,$85,$5B,$80
 $7A5D DEFB $05,$F5,$84,$F1,$43,$2E,$6B,$84
 $7A65 DEFB $90,$20,$42,$11,$68,$66,$F0,$B9
 $7A6D DEFB $27,$40,$98,$83,$9A,$D8,$0A,$44
 $7A75 DEFB $A2,$12,$E3,$80,$61,$6F,$72,$C8
 $7A7D DEFB $B6,$2C,$F4,$2D,$85,$A7,$C2,$44
 $7A85 DEFB $84,$F7,$84,$11,$2E,$22,$6A,$C8
 $7A8D DEFB $B6,$20,$47,$7D,$68,$2A,$CA,$74
 $7A95 DEFB $60,$81,$DF,$C9,$04,$61,$73,$63
 $7A9D DEFB $C7,$79,$22,$20,$43,$45,$66,$80
 $7AA5 DEFB $20,$44,$1A,$12,$C2,$00,$2C,$64
 $7AAD DEFB $C7,$B7,$6D,$D7,$79,$C8,$BD,$84
 $7AB5 DEFB $F7,$66,$2E,$1F,$70,$F4,$2D,$69
 $7ABD DEFB $68,$7F,$80,$CE,$6A,$60,$84,$1D
 $7AC5 DEFB $F4,$2D,$80,$57,$C7,$1B,$82,$72
 $7ACD DEFB $60,$87,$3F,$2E,$6B,$C8,$43,$89
 $7AD5 DEFB $3C,$D6,$F6,$40,$28,$20,$43,$60
 $7ADD DEFB $68,$50,$20,$46,$83,$03,$94,$B8
 $7AE5 DEFB $E0,$F1,$A6,$77,$60,$86,$82,$2C
 $7AED DEFB $88,$A7,$89,$8A,$61,$80,$CB,$2E
 $7AF5 DEFB $1F,$C9,$24,$F4,$2D,$6F,$6D,$D4
 $7AFD DEFB $AD,$71,$85,$87,$87,$D1,$60,$83
 $7B05 DEFB $1F,$F4,$2D,$20,$43,$5B,$8B,$70
 $7B0D DEFB $65,$C8,$B6,$20,$47,$43,$E5,$24
 $7B15 DEFB $89,$85,$20,$43,$21,$4A,$40,$69
 $7B1D DEFB $89,$9A,$60,$86,$B5,$C0,$88,$63
 $7B25 DEFB $F1,$D8,$F8,$55,$C4,$A6,$77,$7F
 $7B2D DEFB $80,$CE,$82,$6E,$2E,$22,$6A,$C8
 $7B35 DEFB $B6,$F2,$16,$C1,$29,$82,$72,$63
 $7B3D DEFB $20,$45,$9D,$03,$2A,$4C,$61,$D2
 $7B45 DEFB $0A,$20,$46,$9B,$C4,$24,$B8,$E0
 $7B4D DEFB $22,$6C,$67,$88,$93,$84,$90,$88
 $7B55 DEFB $93,$2E,$1F,$7D,$1D,$C0,$03,$64
 $7B5D DEFB $D7,$8A,$60,$87,$3B,$F4,$DC,$C1
 $7B65 DEFB $D4,$86,$29,$61,$83,$F9,$2E,$76
 $7B6D DEFB $20,$47,$9D,$2A,$D1,$30,$B3,$63
 $7B75 DEFB $20,$45,$9B,$12,$42,$CC,$82,$72
 $7B7D DEFB $60,$80,$AF,$63,$20,$46,$73,$E8
 $7B85 DEFB $91,$96,$60,$62,$20,$44,$3B,$0A
 $7B8D DEFB $16,$80,$68,$60,$20,$44,$B8,$68
 $7B95 DEFB $59,$00,$2E,$20,$47,$91,$42,$34
 $7B9D DEFB $25,$C7,$68,$76,$C6,$E6,$79,$62
 $7BA5 DEFB $83,$B4,$88,$D3,$61,$62,$84,$C1
 $7BAD DEFB $87,$43,$63,$20,$47,$2E,$06,$C0
 $7BB5 DEFB $A5,$B3,$22,$82,$D0,$F4,$17,$2C
 $7BBD DEFB $82,$D0,$2E,$22,$1E,$68,$86,$04
 $7BC5 DEFB $81,$E3,$65,$60,$87,$A5,$67,$62
 $7BCD DEFB $71,$87,$F4,$20,$43,$A1,$43,$20
 $7BD5 DEFB $2E,$1F,$62,$71,$87,$F4,$86,$8D
 $7BDD DEFB $65,$20,$44,$1B,$1F,$44,$00,$67
 $7BE5 DEFB $20,$45,$18,$6A,$74,$50,$77,$60
 $7BED DEFB $D9,$BB,$20,$44,$34,$82,$D2,$80
 $7BF5 DEFB $2E,$1F,$6C,$83,$D8,$80,$D3,$20
 $7BFD DEFB $44,$9D,$EA,$E3,$80,$80,$A3,$7A
 $7C05 DEFB $60,$89,$62,$C7,$27,$62,$87,$F4
 $7C0D DEFB $D7,$47,$80,$DC,$2E,$1F,$C0,$03
 $7C15 DEFB $64,$D7,$51,$89,$F2,$C3,$CA,$86
 $7C1D DEFB $29,$60,$C1,$1B,$64,$20,$44,$A3
 $7C25 DEFB $EA,$34,$00,$62,$84,$0D,$20,$45
 $7C2D DEFB $9C,$24,$97,$1C,$63,$72,$62,$85
 $7C35 DEFB $27,$65,$20,$47,$1C,$8A,$15,$A5
 $7C3D DEFB $C7,$60,$81,$1F,$20,$45,$9D,$D2
 $7C45 DEFB $E3,$CC,$02,$BB,$FF,$82,$C1,$65
 $7C4D DEFB $60,$87,$32,$D3,$CA,$C7,$2C,$82
 $7C55 DEFB $1E,$20,$47,$9C,$0A,$35,$B0,$A4
 $7C5D DEFB $D5,$4F,$43,$4B,$8F,$30,$66,$20
 $7C65 DEFB $47,$91,$66,$56,$89,$85,$20,$45
 $7C6D DEFB $83,$EE,$42,$C8,$D1,$57,$40,$98
 $7C75 DEFB $2E,$1F,$C8,$59,$88,$AA,$78,$85
 $7C7D DEFB $B3,$D7,$C8,$40,$98,$65,$20,$44
 $7C85 DEFB $92,$5C,$79,$80,$86,$13,$20,$48
 $7C8D DEFB $51,$6E,$56,$30,$B2,$C8,$77,$20
 $7C95 DEFB $45,$2A,$68,$82,$C8,$D3,$CA,$2E
 $7C9D DEFB $1F,$D1,$B7,$20,$49,$4B,$A7,$02
 $7CA5 DEFB $8E,$89,$7B,$80,$C7,$2C,$62,$87
 $7CAD DEFB $F4,$20,$43,$1A,$13,$00,$68,$60
 $7CB5 DEFB $20,$44,$9D,$1E,$E2,$80,$D9,$D3
 $7CBD DEFB $66,$67,$82,$BD,$D6,$F6,$40,$28
 $7CC5 DEFB $D5,$AB,$2E,$6C,$C5,$23,$84,$F7
 $7CCD DEFB $62,$83,$ED,$20,$47,$69,$68,$16
 $7CD5 DEFB $31,$23,$20,$45,$78,$94,$51,$D0
 $7CDD DEFB $83,$D8,$20,$45,$9D,$25,$51,$AC
 $7CE5 DEFB $6C,$1E,$D1,$83,$82,$C1,$C7,$BB
 $7CED DEFB $66,$60,$82,$76,$83,$D8,$62,$82
 $7CF5 DEFB $E5,$81,$24,$2E,$1F,$7D,$1D,$60
 $7CFD DEFB $89,$08,$81,$3B,$C9,$BB,$68,$1F
 $7D05 DEFB $60,$83,$1F,$20,$43,$90,$73,$30
 $7D0D DEFB $65,$84,$F0,$20,$45,$32,$59,$42
 $7D15 DEFB $C8,$88,$A0,$89,$78,$88,$CE,$02
 $7D1D DEFB $E0,$FF,$60,$88,$72,$D8,$5D,$40
 $7D25 DEFB $98,$68,$0B,$D5,$FF,$1F,$89,$08
 $7D2D DEFB $81,$3B,$C9,$BB,$20,$49,$4B,$19
 $7D35 DEFB $56,$A5,$C1,$A1,$40,$1F,$60,$20
 $7D3D DEFB $47,$9D,$5C,$C4,$9D,$14,$20,$44
 $7D45 DEFB $30,$48,$59,$80,$88,$CE,$02,$B1
 $7D4D DEFB $FF,$64,$81,$7C,$74,$60,$84,$F0
 $7D55 DEFB $65,$62,$C3,$27,$83,$74,$84,$B9
 $7D5D DEFB $88,$CE,$02,$9D,$FF,$0F,$0B,$A2
 $7D65 DEFB $FF,$14,$0B,$B8,$FF,$15,$0B,$C0
 $7D6D DEFB $FF,$16,$0B,$CC,$FF,$17,$0B,$DB
 $7D75 DEFB $FF,$89,$F2,$87,$E0,$D7,$47,$2E
 $7D7D DEFB $88,$AA,$67,$62,$86,$95,$86,$F9
 $7D85 DEFB $61,$60,$87,$32,$65,$60,$87,$FC
 $7D8D DEFB $2E,$81,$52,$86,$B1,$C5,$4F,$78
 $7D95 DEFB $60,$20,$46,$31,$43,$4A,$C8,$A0
 $7D9D DEFB $65,$86,$04,$89,$62,$2C,$63,$81
 $7DA5 DEFB $9A,$63,$82,$49,$20,$43,$32,$58
 $7DAD DEFB $C0,$80,$60,$2E,$80,$5A,$80,$14
 $7DB5 DEFB $88,$31,$88,$82,$C7,$DD,$68,$60
 $7DBD DEFB $81,$E3,$2E,$1F,$C3,$27,$83,$74
 $7DC5 DEFB $D4,$B9,$40,$98,$D6,$DF,$42,$49
 $7DCD DEFB $0A,$82,$93,$84,$F0,$61,$20,$43
 $7DD5 DEFB $18,$67,$40,$20,$46,$9A,$02,$47
 $7DDD DEFB $DE,$60,$2E,$1F,$10,$C8,$F4,$60
 $7DE5 DEFB $C8,$61,$65,$F5,$1B,$68,$62,$83
 $7DED DEFB $CE,$D1,$64,$2C,$17,$02,$CF,$FF
 $7DF5 DEFB $60,$88,$72,$20,$45,$9A,$12,$E2
 $7DFD DEFB $CC,$88,$CE,$60,$C9,$BB,$86,$07
 $7E05 DEFB $89,$F2,$82,$DD,$2E,$1F,$10,$68
 $7E0D DEFB $62,$D1,$64,$C8,$F4,$C5,$32,$80
 $7E15 DEFB $43,$20,$44,$93,$EA,$74,$00,$D1
 $7E1D DEFB $F7,$41,$96,$40,$D7,$3F,$40,$98
 $7E25 DEFB $2E,$1F

; Data block at 7E27
b$7E27 DEFB $10,$C8,$F4,$80,$43,$60,$F5,$1B
 $7E2F DEFB $D9,$19,$45,$3C,$9F,$57,$10,$20
 $7E37 DEFB $46,$90,$52,$CB,$87,$20,$68,$62
 $7E3F DEFB $88,$4C,$88,$EB,$2E,$1F,$10,$C7
 $7E47 DEFB $2E,$68,$62,$88,$4C,$88,$EB,$88
 $7E4F DEFB $CE,$60,$20,$4A,$82,$47,$4A,$C8
 $7E57 DEFB $B3,$8D,$4A,$F2,$8D,$D1,$F7,$45
 $7E5F DEFB $96,$66,$92,$14,$2E,$1F,$10,$C7
 $7E67 DEFB $2E,$68,$62,$88,$4C,$88,$EB,$C0
 $7E6F DEFB $C3,$20,$46,$9A,$2A,$EA,$14,$80
 $7E77 DEFB $80,$EB,$D6,$A2,$40,$98,$2E,$1F
 $7E7F DEFB $10,$68,$F5,$42,$F3,$0A,$D7,$47
 $7E87 DEFB $68,$60,$81,$10,$84,$1D,$2E,$6C
 $7E8F DEFB $67,$87,$F4,$63,$D8,$0A,$43,$BA
 $7E97 DEFB $03,$40,$20,$46,$1C,$9F,$72,$14
 $7E9F DEFB $80,$2E,$84,$5B,$80,$8F,$2C,$85
 $7EA7 DEFB $4C,$71,$D8,$59,$2C,$20,$45,$62
 $7EAF DEFB $69,$42,$C8,$60,$D7,$47,$2E,$1F
 $7EB7 DEFB $10,$68,$62,$84,$C1,$20,$47,$60
 $7EBF DEFB $6C,$99,$A1,$99,$20,$48,$21,$46
 $7EC7 DEFB $F9,$06,$85,$20,$80,$CE,$2C,$62
 $7ECF DEFB $81,$3B,$D9,$BB,$D6,$29,$44,$63
 $7ED7 DEFB $DE,$B9,$80,$62,$87,$F4,$84,$BD
 $7EDF DEFB $20,$46,$61,$42,$44,$B8,$E0,$85
 $7EE7 DEFB $C3,$2E,$1F,$10,$6A,$86,$A2,$86
 $7EEF DEFB $04,$65,$1F,$10,$6A,$86,$A2,$89
 $7EF7 DEFB $08,$65,$1F,$0B,$F0,$FF,$F0,$31
 $7EFF DEFB $88,$3E,$2E,$1F,$0B,$EF,$FF,$02
 $7F07 DEFB $F7,$FF,$0B,$E1,$FF,$F4,$9C,$82
 $7F0F DEFB $00,$88,$3E,$2E,$1F,$0B,$DE,$FF
 $7F17 DEFB $02,$F5,$FF,$10,$6A,$86,$A2,$88
 $7F1F DEFB $CA,$65,$02,$EB,$FF,$10,$6A,$86
 $7F27 DEFB $A2,$83,$45,$65,$02,$E1,$FF,$0B
 $7F2F DEFB $BC,$FF,$F6,$36,$88,$3E,$2E,$1F
 $7F37 DEFB $0B,$BB,$FF,$02,$F7,$FF,$0B,$AD
 $7F3F DEFB $FF,$F9,$4F,$88,$3E,$2E,$1F,$0B
 $7F47 DEFB $AC,$FF,$02,$F7,$FF,$0B,$9E,$FF
 $7F4F DEFB $F4,$CD,$F3,$E6,$88,$3E,$2E,$1F
 $7F57 DEFB $0B,$9B,$FF,$02,$F5,$FF,$7D,$1D
 $7F5F DEFB $7D,$1D,$88,$B3,$78,$61,$F5,$84
 $7F67 DEFB $F1,$43,$7A,$F8,$F9,$63,$D0,$76
 $7F6F DEFB $61,$7C,$D0,$FE,$84,$E5,$2E,$1F
 $7F77 DEFB $88,$B3,$78,$D4,$B4,$42,$61,$48
 $7F7F DEFB $22,$88,$F9,$2E,$83,$02,$2E,$22
 $7F87 DEFB $2E,$1F,$60,$80,$CB,$67,$20,$45
 $7F8F DEFB $AB,$9A,$12,$14,$63,$86,$04,$87
 $7F97 DEFB $A5,$67,$C2,$04,$89,$3C,$77,$88
 $7F9F DEFB $E4,$2E,$1F,$60,$20,$44,$6D,$66
 $7FA7 DEFB $91,$80,$77,$60,$86,$82,$67,$F0
 $7FAF DEFB $B3,$2E,$1F,$77,$60,$83,$9D,$67
 $7FB7 DEFB $62,$20,$45,$91,$46,$F9,$10,$65
 $7FBF DEFB $F1,$A6,$F5,$B6,$2E,$1F,$6C,$67
 $7FC7 DEFB $C0,$18,$61,$F5,$84,$F1,$43,$63
 $7FCF DEFB $C6,$FD,$0B,$6A,$F3,$2E,$2E,$2E
 $7FD7 DEFB $22,$2E,$1F,$60,$83,$2D,$67,$D2
 $7FDF DEFB $88,$75,$60,$84,$B4,$C6,$FD,$22
 $7FE7 DEFB $88,$E4,$F7,$8F,$2E,$20,$47,$6A
 $7FEF DEFB $58,$9A,$06,$59,$86,$9E,$2E,$22
 $7FF7 DEFB $2E,$1F,$F0,$6B,$7A,$62,$C2,$E1
 $7FFF DEFB $D5,$AB,$63,$20,$45,$AB,$AB,$32
 $8007 DEFB $90,$20,$47,$13,$1F,$4A,$25,$C7
 $800F DEFB $20,$42,$80,$48,$60,$82,$34,$88
 $8017 DEFB $E4,$67,$D2,$88,$2E,$1F,$89,$A2
 $801F DEFB $60,$20,$46,$10,$58,$17,$0C,$A0
 $8027 DEFB $68,$60,$80,$0E,$67,$71,$20,$43
 $802F DEFB $42,$4E,$80,$60,$20,$46,$2B,$A9
 $8037 DEFB $24,$96,$60,$68,$60,$D1,$1B,$20
 $803F DEFB $47,$4B,$88,$91,$86,$85,$66,$20
 $8047 DEFB $4A,$9D,$45,$3A,$05,$D4,$48,$58
 $804F DEFB $63,$20,$46,$91,$4F,$56,$06,$40
 $8057 DEFB $72,$46,$24,$83,$70,$B2,$60,$6E
 $805F DEFB $80,$D3,$85,$38,$20,$47,$91,$46
 $8067 DEFB $57,$51,$99,$2E,$60,$80,$0E,$20
 $806F DEFB $43,$70,$5A,$50,$67,$F5,$84,$F1
 $8077 DEFB $43,$2E,$1F,$20,$43,$21,$43,$20
 $807F DEFB $F7,$A9,$2C,$F4,$2D,$6E,$83,$92
 $8087 DEFB $80,$A7,$61,$60,$86,$C4,$61,$74
 $808F DEFB $62,$83,$07,$20,$47,$80,$68,$92
 $8097 DEFB $BA,$93,$2E,$89,$B1,$7C,$80,$A7
 $809F DEFB $84,$C9,$2E,$20,$20,$20,$20,$20
 $80A7 DEFB $89,$71,$2E,$1F,$1B,$87,$5A,$2E
 $80AF DEFB $20,$40,$B0,$2E,$0D,$62,$20,$42
 $80B7 DEFB $13,$2C,$20,$43,$9B,$92,$80,$89
 $80BF DEFB $43,$20,$44,$CD,$DC,$25,$80,$2E
 $80C7 DEFB $20,$43,$C3,$0B,$40,$20,$44,$CD
 $80CF DEFB $03,$14,$00,$20,$41,$0A,$C0,$20
 $80D7 DEFB $49,$74,$62,$8C,$D5,$D2,$BA,$00
 $80DF DEFB $2E,$20,$42,$BA,$2A,$20,$41,$32
 $80E7 DEFB $00,$20,$43,$68,$99,$60,$20,$44
 $80EF DEFB $B4,$D1,$44,$00,$89,$DF,$20,$1B
 $80F7 DEFB $1F,$1B,$20,$43,$B0,$57,$30,$89
 $80FF DEFB $43,$20,$43,$5B,$AE,$80,$20,$41
 $8107 DEFB $AB,$00,$89,$34,$20,$44,$CD,$DD
 $810F DEFB $14,$00,$2E,$89,$34,$20,$43,$8B
 $8117 DEFB $A8,$80,$20,$42,$35,$16,$20,$45
 $811F DEFB $95,$19,$61,$2C,$20,$44,$3A,$1D
 $8127 DEFB $59,$80,$20,$42,$9B,$96,$20,$46
 $812F DEFB $5D,$5D,$4A,$A0,$E0,$89,$43,$20
 $8137 DEFB $45,$CB,$2E,$18,$A0,$20,$45,$13
 $813F DEFB $16,$11,$40,$20,$45,$75,$18,$51
 $8147 DEFB $1C,$2E,$20,$20,$20,$20,$20,$20
 $814F DEFB $20,$44,$93,$96,$1B,$80,$2E,$1B
 $8157 DEFB $1F,$1B,$20,$44,$24,$EF,$98,$00
 $815F DEFB $2E,$0D,$20,$43,$3C,$EB,$60,$20
 $8167 DEFB $46,$1D,$6C,$B9,$D6,$00,$20,$43
 $816F DEFB $1C,$EB,$80,$20,$43,$3C,$D2,$30
 $8177 DEFB $20,$43,$84,$32,$10,$20,$42,$3C
 $817F DEFB $12,$89,$47,$20,$41,$5C,$C0,$20
 $8187 DEFB $45,$D2,$C7,$9B,$2C,$20,$42,$4B
 $818F DEFB $16,$20,$41,$5C,$C0,$20,$44,$BE
 $8197 DEFB $27,$07,$80,$89,$47,$20,$42,$D4
 $819F DEFB $88,$20,$43,$84,$32,$C0,$20,$40
 $81A7 DEFB $C8,$2E,$20,$20,$20,$20,$20,$20
 $81AF DEFB $40,$B0,$2E,$84,$B0,$2E,$1B,$1F
 $81B7 DEFB $F8,$9D,$85,$D8,$C6,$FD,$22,$6B
 $81BF DEFB $6E,$88,$0A,$C5,$AB,$65,$20,$44
 $81C7 DEFB $B2,$68,$16,$00,$84,$46,$66,$F4
 $81CF DEFB $2D,$C9,$DB,$84,$F7,$61,$20,$46
 $81D7 DEFB $22,$66,$3A,$CE,$60,$72,$64,$6A
 $81DF DEFB $89,$F2,$20,$4A,$1B,$DD,$62,$B9
 $81E7 DEFB $25,$70,$CA,$2E,$C7,$C8,$2E,$88
 $81EF DEFB $F9,$F3,$02,$2E,$22,$1F,$64,$74
 $81F7 DEFB $60,$81,$17,$65,$62,$20,$45,$6A
 $81FF DEFB $48,$46,$14,$20,$43,$09,$CA,$40
 $8207 DEFB $89,$CA,$2E,$73,$82,$DD,$67,$20
 $820F DEFB $47,$9D,$24,$50,$AC,$A4,$72,$20
 $8217 DEFB $44,$24,$92,$52,$00,$81,$05,$2E
*$821F DEFB $1F,$F4,$88,$C6,$FD,$02,$23,$F1
 $8227 DEFB $64,$74,$60,$81,$17,$65,$62,$89
 $822F DEFB $CA,$89,$A6,$69,$87,$B4,$68,$60
 $8237 DEFB $83,$E6,$2E,$60,$82,$DD,$67,$7B
 $823F DEFB $20,$48,$6D,$68,$96,$06,$85,$20
 $8247 DEFB $20,$45,$11,$72,$F7,$10,$20,$4A
 $824F DEFB $91,$46,$F3,$B9,$34,$4B,$DC,$2E
 $8257 DEFB $1F,$7D

; Game status buffer entry at 8259
g$8259 DEFB $C3,$05,$00,$00,$00,$00,$8D,$03
 $8261 DEFB $1A,$08,$00,$00,$00,$00,$8D,$03
 $8269 DEFB $84,$02,$00,$00,$00,$00,$8D,$03
 $8271 DEFB $92,$09,$00,$00,$00,$00,$8D,$03
 $8279 DEFB $C7,$05,$00,$00,$00,$00,$8D,$03
 $8281 DEFB $D0,$05,$00,$00,$00,$00,$8D,$03
 $8289 DEFB $1E,$08,$00,$00,$00,$00,$8D,$03
 $8291 DEFB $27,$08,$00,$00,$00,$00,$8D,$03
 $8299 DEFB $3C,$09,$00,$00,$00,$00,$8D,$03
 $82A1 DEFB $72,$02,$00,$00,$00,$00,$8D,$03
 $82A9 DEFB $8B,$81,$00,$00,$00,$80,$00,$40
 $82B1 DEFB $B2,$81,$77,$24,$00,$00,$00,$50
 $82B9 DEFB $B2,$81,$20,$26,$EC,$05,$00,$C0
 $82C1 DEFB $B7,$81,$00,$00,$00,$00,$00,$40
 $82C9 DEFB $F7,$81,$00,$00,$00,$00,$00,$40
 $82D1 DEFB $7C,$82,$00,$00,$00,$80,$00,$00
 $82D9 DEFB $7C,$C2,$50,$04,$00,$00,$00,$40
 $82E1 DEFB $98,$82,$00,$90,$00,$00,$00,$00
 $82E9 DEFB $CA,$82,$00,$00,$00,$00,$00,$40
 $82F1 DEFB $CA,$82,$00,$00,$00,$00,$BE,$41
 $82F9 DEFB $33,$93,$00,$10,$00,$40,$00,$00
 $8301 DEFB $D4,$91,$BF,$39,$00,$40,$00,$00
 $8309 DEFB $81,$83,$00,$00,$00,$00,$00,$40
 $8311 DEFB $81,$83,$77,$24,$00,$00,$00,$40
 $8319 DEFB $81,$83,$20,$26,$EC,$05,$00,$C0
 $8321 DEFB $89,$C3,$DB,$08,$00,$10,$00,$60
 $8329 DEFB $8D,$83,$77,$B4,$00,$00,$00,$00
 $8331 DEFB $8D,$83,$CE,$28,$00,$00,$00,$00
 $8339 DEFB $8D,$93,$DB,$B8,$00,$00,$00,$40
 $8341 DEFB $8D,$93,$DB,$B8,$00,$00,$63,$43
 $8349 DEFB $BE,$93,$00,$00,$00,$00,$00,$10
 $8351 DEFB $F5,$03,$00,$10,$00,$00,$00,$00
 $8359 DEFB $7A,$04,$00,$10,$00,$00,$00,$40
 $8361 DEFB $23,$05,$00,$10,$00,$00,$00,$00
 $8369 DEFB $23,$85,$CE,$28,$00,$00,$00,$00
 $8371 DEFB $0B,$86,$00,$00,$00,$00,$00,$40
 $8379 DEFB $64,$C6,$DB,$08,$00,$D0,$00,$20
 $8381 DEFB $E8,$C6,$50,$04,$00,$00,$00,$40
 $8389 DEFB $E8,$C6,$FF,$05,$00,$00,$00,$40
 $8391 DEFB $DD,$87,$50,$24,$00,$00,$00,$40
 $8399 DEFB $87,$88,$00,$00,$00,$00,$00,$40
 $83A1 DEFB $87,$C8,$51,$03,$00,$00,$00,$40
 $83A9 DEFB $87,$98,$EF,$25,$00,$00,$00,$40
 $83B1 DEFB $87,$C8,$20,$06,$EC,$05,$00,$40
 $83B9 DEFB $87,$D8,$DB,$58,$00,$40,$00,$00
 $83C1 DEFB $8B,$88,$DB,$28,$00,$40,$00,$00
 $83C9 DEFB $8F,$D8,$00,$10,$00,$40,$00,$00
 $83D1 DEFB $8F,$D8,$05,$10,$00,$40,$00,$00
 $83D9 DEFB $5E,$09,$FF,$03,$00,$00,$00,$00
 $83E1 DEFB $5E,$89,$38,$39,$00,$C0,$00,$00
 $83E9 DEFB $83,$89,$00,$00,$00,$00,$00,$40
 $83F1 DEFB $94,$04,$00,$00,$00,$00,$00,$00
 $83F9 DEFB $14,$85,$00,$00,$00,$00,$00,$40
 $8401 DEFB $2B,$89,$00,$00,$00,$00,$00,$40
 $8409 DEFB $00,$00

; Table: Locations
@label=Table_Locations
g$840B DEFW $84E1    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $840D DEFW $84EB    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $840F DEFW $84F5    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8411 DEFW $84FF    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8413 DEFW $8509    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8415 DEFW $8513    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8417 DEFW $8520    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8419 DEFW $8530    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $841B DEFW $8540    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $841D DEFW $8550    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $841F DEFW $855D    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8421 DEFW $856A    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8423 DEFW $8577    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8425 DEFW $8584    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8427 DEFW $8591    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8429 DEFW $859E    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $842B DEFW $85AE    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $842D DEFW $85BE    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $842F DEFW $85CB    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8431 DEFW $85D8    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8433 DEFW $85E8    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8435 DEFW $85F8    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8437 DEFW $8608    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8439 DEFW $8618    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $843B DEFW $8625    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $843D DEFW $8632    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $843F DEFW $8642    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8441 DEFW $8652    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8443 DEFW $865F    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8445 DEFW $866C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8447 DEFW $867C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8449 DEFW $868C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $844B DEFW $8699    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $844D DEFW $86A9    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $844F DEFW $86BC    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8451 DEFW $86D2    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8453 DEFW $86E2    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8455 DEFW $86F2    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
*$8457 DEFW $86FF    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8459 DEFW $870C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $845B DEFW $8719    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $845D DEFW $8726    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $845F DEFW $8739    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8461 DEFW $8746    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8463 DEFW $8756    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8465 DEFW $8763    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8467 DEFW $8770    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8469 DEFW $8780    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $846B DEFW $8793    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $846D DEFW $87A0    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $846F DEFW $87AD    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8471 DEFW $87C6    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8473 DEFW $87D9    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8475 DEFW $87EC    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8477 DEFW $87FC    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8479 DEFW $880C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $847B DEFW $8819    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $847D DEFW $882C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $847F DEFW $883F    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8481 DEFW $884C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8483 DEFW $885C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8485 DEFW $886C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8487 DEFW $887C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8489 DEFW $888C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $848B DEFW $889C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $848D DEFW $88AF    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $848F DEFW $88BF    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8491 DEFW $88CC    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8493 DEFW $88DC    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8495 DEFW $88EC    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8497 DEFW $8905    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $8499 DEFW $891B    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $849B DEFW $8928    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $849D DEFW $8938    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $849F DEFW $8948    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84A1 DEFW $8955    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84A3 DEFW $8962    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84A5 DEFW $8978    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84A7 DEFW $8988    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84A9 DEFW $899B    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84AB DEFW $89B4    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84AD DEFW $89C7    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84AF DEFW $89E0    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84B1 DEFW $89F3    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84B3 DEFW $8A09    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84B5 DEFW $8A19    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84B7 DEFW $8A29    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84B9 DEFW $8A3C    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84BB DEFW $8A4F    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84BD DEFW $8A62    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84BF DEFW $8A78    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84C1 DEFW $8A8B    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84C3 DEFW $8AA1    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84C5 DEFW $8AB1    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84C7 DEFW $8AC1    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84C9 DEFW $8AD1    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84CB DEFW $8ADE    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84CD DEFW $8AF4    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84CF DEFW $8B04    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84D1 DEFW $8B11    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84D3 DEFW $8B21    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84D5 DEFW $8B31    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84D7 DEFW $8B3E    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84D9 DEFW $8B4E    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84DB DEFW $8B58    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84DD DEFW $8B65    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".
 $84DF DEFW $8B6F    ; Room #N((#PC-$840B)/$02): "#ROOM((#PC-$840B)/$02)".

; Room #N$00: "#ROOM$00"
@label=Room_00
g$84E1 DEFB %00000100 ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $84E2 DEFW $0000
 $84E4 DEFW $0000
 $84E6 DEFW $0000
 $84E8 DEFW $0000
 $84EA DEFB $FF       ; Terminator.

; Room #N$01: "#ROOM$01"
@label=Room_01
g$84EB DEFB %10000100 ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $84EC DEFW $1164     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $84EE DEFW $03CE     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $84F0 DEFW $0000
 $84F2 DEFW $7DE1     ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
 $84F4 DEFB $FF       ; Terminator.

; Room #N$02: "#ROOM$02"
@label=Room_02
g$84F5 DEFB %10000100 ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $84F6 DEFW $18EB     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $84F8 DEFW $084C     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $84FA DEFW $0000
 $84FC DEFW $7E27     ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
 $84FE DEFB $FF       ; Terminator.

; Room #N$03: "#ROOM$03"
@label=Room_03
g$84FF DEFB %10000100 ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8500 DEFW $18EB     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8502 DEFW $084C     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8504 DEFW $0000
 $8506 DEFW $7E45     ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
 $8508 DEFB $FF       ; Terminator.

; Room #N$04: "#ROOM$04"
@label=Room_04
g$8509 DEFB %10000100 ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $850A DEFW $18EB     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $850C DEFW $084C     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $850E DEFW $0000
 $8510 DEFW $7E65     ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
 $8512 DEFB $FF       ; Terminator.

; Room #N$05: "#ROOM$05"
@label=Room_05
g$8513 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8514 DEFW $8861       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8516 DEFW $00AB       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8518 DEFW $0000
 $851A DEFW $0000
; Room exits:
 $851C DEFB $01,$13,$06 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($851C) }
                        ; TABLE#
 $851F DEFB $FF         ; Terminator.

; Room #N$06: "#ROOM$06"
@label=Room_06
g$8520 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8521 DEFW $23C6       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8523 DEFW $029C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8525 DEFW $0000
 $8527 DEFW $0000
; Room exits:
 $8529 DEFB $09,$14,$07 ; {#TABLE(default,centre,centre,centre)
 $852C DEFB $02,$13,$05 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8529) }
                        ; { #MOVEMENT($852C) }
                        ; TABLE#}
 $852F DEFB $FF         ; Terminator.

; Room #N$07: "#ROOM$07"
@label=Room_07
g$8530 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8531 DEFW $13C2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8533 DEFW $0000
 $8535 DEFW $0000
 $8537 DEFW $0000
; Room exits:
 $8539 DEFB $03,$15,$08 ; {#TABLE(default,centre,centre,centre)
 $853C DEFB $0A,$14,$06 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8539) }
                        ; { #MOVEMENT($853C) }
                        ; TABLE#}
 $853F DEFB $FF         ; Terminator.

; Room #N$08: "#ROOM$08"
@label=Room_08
g$8540 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8541 DEFW $8747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8543 DEFW $09F2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8545 DEFW $0000
 $8547 DEFW $7D62       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $8549 DEFB $04,$15,$07 ; {#TABLE(default,centre,centre,centre)
 $854C DEFB $01,$32,$09 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8549) }
                        ; { #MOVEMENT($854C) }
                        ; TABLE#}
 $854F DEFB $FF         ; Terminator.

; Room #N$09: "#ROOM$09"
@label=Room_09
g$8550 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8551 DEFW $11C2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8553 DEFW $07F4       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8555 DEFW $0000
 $8557 DEFW $0000
; Room exits:
 $8559 DEFB $02,$32,$08 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8559) }
                        ; TABLE#
 $855C DEFB $FF         ; Terminator.

; Room #N$0A: "#ROOM$0A"
@label=Room_10
g$855D DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $855E DEFW $8861       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8560 DEFW $064C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8562 DEFW $0000
*$8564 DEFW $0000
; Room exits:
 $8566 DEFB $03,$00,$0B ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8566) }
                        ; TABLE#
 $8569 DEFB $FF         ; Terminator.

; Room #N$0B: "#ROOM$0B"
@label=Room_11
g$856A DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $856B DEFW $89E3       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $856D DEFW $077E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $856F DEFW $0000
 $8571 DEFW $0000
; Room exits:
 $8573 DEFB $04,$00,$0A ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8573) }
                        ; TABLE#
 $8576 DEFB $FF         ; Terminator.

; Room #N$0C: "#ROOM$0C"
@label=Room_12
g$8577 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8578 DEFW $8861       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $857A DEFW $07EA       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $857C DEFW $0000
 $857E DEFW $0000
; Room exits:
 $8580 DEFB $01,$1D,$0D ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8580) }
                        ; TABLE#
 $8583 DEFB $FF         ; Terminator.

; Room #N$0D: "#ROOM$0D"
@label=Room_13
g$8584 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8585 DEFW $1231       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8587 DEFW $025F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8589 DEFW $060F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $858B DEFW $0000
; Room exits:
 $858D DEFB $02,$00,$0C ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($858D) }
                        ; TABLE#
 $8590 DEFB $FF         ; Terminator.

; Room #N$0E: "#ROOM$0E"
@label=Room_14
g$8591 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8592 DEFW $8861       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8594 DEFW $0031       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8596 DEFW $0000
 $8598 DEFW $0000
; Room exits:
 $859A DEFB $06,$00,$0F ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($859A) }
                        ; TABLE#
 $859D DEFB $FF         ; Terminator.

; Room #N$0F: "#ROOM$0F"
@label=Room_15
g$859E DEFB %10001000   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $859F DEFW $883E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85A1 DEFW $0031       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85A3 DEFW $0000
 $85A5 DEFW $0000
; Room exits:
 $85A7 DEFB $07,$00,$0E ; {#TABLE(default,centre,centre,centre)
 $85AA DEFB $06,$00,$10 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($85A7) }
                        ; { #MOVEMENT($85AA) }
                        ; TABLE#}
 $85AD DEFB $FF         ; Terminator.

; Room #N$10: "#ROOM$10"
@label=Room_16
g$85AE DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $85AF DEFW $8604       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85B1 DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85B3 DEFW $0000
 $85B5 DEFW $7EFA       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $85B7 DEFB $07,$00,$0F ; {#TABLE(default,centre,centre,centre)
 $85BA DEFB $06,$00,$11 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($85B7) }
                        ; { #MOVEMENT($85BA) }
                        ; TABLE#}
 $85BD DEFB $FF         ; Terminator.

; Room #N$11: "#ROOM$11"
@label=Room_17
g$85BE DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $85BF DEFW $8908       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85C1 DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85C3 DEFW $0000
 $85C5 DEFW $7F03       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $85C7 DEFB $07,$00,$10 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($85C7) }
                        ; TABLE#
 $85CA DEFB $FF         ; Terminator.

; Room #N$12: "#ROOM$12"
@label=Room_18
g$85CB DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $85CC DEFW $873F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85CE DEFW $049C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85D0 DEFW $0200       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85D2 DEFW $0000
; Room exits:
 $85D4 DEFB $05,$00,$13 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($85D4) }
                        ; TABLE#
 $85D7 DEFB $FF         ; Terminator.

; Room #N$13: "#ROOM$13"
@label=Room_19
g$85D8 DEFB %10001000   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $85D9 DEFW $883E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85DB DEFW $049C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85DD DEFW $0200       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85DF DEFW $0000
; Room exits:
 $85E1 DEFB $08,$00,$12 ; {#TABLE(default,centre,centre,centre)
 $85E4 DEFB $05,$00,$14 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($85E1) }
                        ; { #MOVEMENT($85E4) }
                        ; TABLE#}
 $85E7 DEFB $FF         ; Terminator.

; Room #N$14: "#ROOM$14"
@label=Room_20
g$85E8 DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $85E9 DEFW $8604       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85EB DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85ED DEFW $0000
 $85EF DEFW $7F09       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $85F1 DEFB $08,$00,$13 ; {#TABLE(default,centre,centre,centre)
 $85F4 DEFB $05,$00,$15 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($85F1) }
                        ; { #MOVEMENT($85F4) }
                        ; TABLE#}
 $85F7 DEFB $FF         ; Terminator.

; Room #N$15: "#ROOM$15"
@label=Room_21
g$85F8 DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $85F9 DEFW $8908       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85FB DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $85FD DEFW $0000
 $85FF DEFW $7F14       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $8601 DEFB $08,$00,$14 ; {#TABLE(default,centre,centre,centre)
 $8604 DEFB $05,$00,$16 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8601) }
                        ; { #MOVEMENT($8604) }
                        ; TABLE#}
 $8607 DEFB $FF         ; Terminator.

; Room #N$16: "#ROOM$16"
@label=Room_22
g$8608 DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8609 DEFW $88CA       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $860B DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $860D DEFW $0000
 $860F DEFW $7F1A       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $8611 DEFB $08,$00,$15 ; {#TABLE(default,centre,centre,centre)
 $8614 DEFB $05,$00,$17 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8611) }
                        ; { #MOVEMENT($8614) }
                        ; TABLE#}
 $8617 DEFB $FF         ; Terminator.

; Room #N$17: "#ROOM$17"
@label=Room_23
g$8618 DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8619 DEFW $8345       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $861B DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $861D DEFW $0000
 $861F DEFW $7F24       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $8621 DEFB $08,$00,$16 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8621) }
                        ; TABLE#
 $8624 DEFB $FF         ; Terminator.

; Room #N$18: "#ROOM$18"
@label=Room_24
g$8625 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8626 DEFW $873F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8628 DEFW $00F5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $862A DEFW $0000
 $862C DEFW $0000
; Room exits:
 $862E DEFB $07,$00,$19 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($862E) }
                        ; TABLE#
 $8631 DEFB $FF         ; Terminator.

; Room #N$19: "#ROOM$19"
@label=Room_25
g$8632 DEFB %10001000   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8633 DEFW $883E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8635 DEFW $0636       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8637 DEFW $0000
 $8639 DEFW $0000
; Room exits:
 $863B DEFB $06,$00,$18 ; {#TABLE(default,centre,centre,centre)
 $863E DEFB $07,$00,$1A ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($863B) }
                        ; { #MOVEMENT($863E) }
                        ; TABLE#}
 $8641 DEFB $FF         ; Terminator.

; Room #N$1A: "#ROOM$1A"
;
; Used by the routine at #R$E691.
@label=Room_26
g$8642 DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8643 DEFW $8604       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8645 DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8647 DEFW $0000
 $8649 DEFW $7F2E       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $864B DEFB $06,$00,$19 ; {#TABLE(default,centre,centre,centre)
 $864E DEFB $07,$00,$1B ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($864B) }
                        ; { #MOVEMENT($864E) }
                        ; TABLE#}
 $8651 DEFB $FF         ; Terminator.

; Room #N$1B: "#ROOM$1B"
@label=Room_27
g$8652 DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8653 DEFW $8908       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8655 DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8657 DEFW $0000
 $8659 DEFW $7F37       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $865B DEFB $06,$00,$1A ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($865B) }
                        ; TABLE#
 $865E DEFB $FF         ; Terminator.

; Room #N$1C: "#ROOM$1C"
@label=Room_28
g$865F DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8660 DEFW $873F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8662 DEFW $014A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8664 DEFW $063E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8666 DEFW $0000
; Room exits:
 $8668 DEFB $03,$00,$1D ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8668) }
                        ; TABLE#
 $866B DEFB $FF         ; Terminator.

; Room #N$1D: "#ROOM$1D"
@label=Room_29
g$866C DEFB %10001000   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $866D DEFW $883E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $866F DEFW $094F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8671 DEFW $0000
 $8673 DEFW $0000
; Room exits:
 $8675 DEFB $04,$00,$1C ; {#TABLE(default,centre,centre,centre)
 $8678 DEFB $03,$00,$1E ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8675) }
                        ; { #MOVEMENT($8678) }
                        ; TABLE#}
 $867B DEFB $FF         ; Terminator.

; Room #N$1E: "#ROOM$1E"
@label=Room_30
g$867C DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $867D DEFW $8604       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $867F DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8681 DEFW $0000
 $8683 DEFW $7F3D       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $8685 DEFB $04,$00,$1D ; {#TABLE(default,centre,centre,centre)
 $8688 DEFB $03,$00,$1F ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8685) }
                        ; { #MOVEMENT($8688) }
                        ; TABLE#}
 $868B DEFB $FF         ; Terminator.

; Room #N$1F: "#ROOM$1F"
@label=Room_31
g$868C DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $868D DEFW $8908       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $868F DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8691 DEFW $0000
 $8693 DEFW $7F46       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $8695 DEFB $04,$00,$1E ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8695) }
                        ; TABLE#
 $8698 DEFB $FF         ; Terminator.

; Room #N$20: "#ROOM$20"
@label=Room_32
g$8699 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $869A DEFW $8861       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $869C DEFW $0174       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $869E DEFW $0000
 $86A0 DEFW $0000
; Room exits:
 $86A2 DEFB $05,$5B,$21 ; {#TABLE(default,centre,centre,centre)
 $86A5 DEFB $03,$00,$66 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($86A2) }
                        ; { #MOVEMENT($86A5) }
                        ; TABLE#}
 $86A8 DEFB $FF         ; Terminator.

; Room #N$21: "#ROOM$21"
@label=Room_33
g$86A9 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $86AA DEFW $23C2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86AC DEFW $029C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86AE DEFW $0000
 $86B0 DEFW $0000
; Room exits:
 $86B2 DEFB $08,$5B,$20 ; {#TABLE(default,centre,centre,centre)
 $86B5 DEFB $05,$00,$22 ; { =h Direction | =h Via | =h Destination }
 $86B8 DEFB $07,$2D,$23 ; { #MOVEMENT($86B2) }
                        ; { #MOVEMENT($86B5) }
                        ; { #MOVEMENT($86B8) }
                        ; TABLE#}
 $86BB DEFB $FF         ; Terminator.

; Room #N$22: "#ROOM$22"
@label=Room_34
g$86BC DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $86BD DEFW $1653       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86BF DEFW $0000
 $86C1 DEFW $0000
 $86C3 DEFW $0000
; Room exits:
 $86C5 DEFB $08,$00,$21 ; {#TABLE(default,centre,centre,centre)
 $86C8 DEFB $05,$32,$24 ; { =h Direction | =h Via | =h Destination }
 $86CB DEFB $06,$31,$25 ; { #MOVEMENT($86C5) }
 $86CE DEFB $07,$37,$26 ; { #MOVEMENT($86C8) }
                        ; { #MOVEMENT($86CB) }
                        ; { #MOVEMENT($86CE) }
                        ; TABLE#}
 $86D1 DEFB $FF         ; Terminator.

; Room #N$23: "#ROOM$23"
@label=Room_35
g$86D2 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $86D3 DEFW $80CE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86D5 DEFW $00BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86D7 DEFW $0000
 $86D9 DEFW $0000
; Room exits:
 $86DB DEFB $06,$2D,$21 ; {#TABLE(default,centre,centre,centre)
 $86DE DEFB $08,$4F,$66 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($86DB) }
                        ; { #MOVEMENT($86DE) }
                        ; TABLE#}
 $86E1 DEFB $FF         ; Terminator.

; Room #N$24: "#ROOM$24"
@label=Room_36
g$86E2 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $86E3 DEFW $84A0       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86E5 DEFW $00BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86E7 DEFW $0000
 $86E9 DEFW $0000
; Room exits:
 $86EB DEFB $08,$32,$22 ; {#TABLE(default,centre,centre,centre)
 $86EE DEFB $05,$4A,$27 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($86EB) }
                        ; { #MOVEMENT($86EE) }
                        ; TABLE#}
 $86F1 DEFB $FF         ; Terminator.

; Room #N$25: "#ROOM$25"
@label=Room_37
g$86F2 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $86F3 DEFW $8747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86F5 DEFW $00BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86F7 DEFW $024F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $86F9 DEFW $0000
; Room exits:
 $86FB DEFB $07,$31,$22 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($86FB) }
                        ; TABLE#
 $86FE DEFB $FF         ; Terminator.

; Room #N$26: "#ROOM$26"
@label=Room_38
g$86FF DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8700 DEFW $84EA       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8702 DEFW $00BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8704 DEFW $0000
 $8706 DEFW $0000
; Room exits:
 $8708 DEFB $06,$37,$22 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8708) }
                        ; TABLE#
 $870B DEFB $FF         ; Terminator.

; Room #N$27: "#ROOM$27"
@label=Room_39
g$870C DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $870D DEFW $89E3       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $870F DEFW $00BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8711 DEFW $0000
 $8713 DEFW $0000
; Room exits:
 $8715 DEFB $08,$4A,$24 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8715) }
                        ; TABLE#
 $8718 DEFB $FF         ; Terminator.

; Room #N$28: "#ROOM$28"
@label=Room_40
g$8719 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $871A DEFW $8861       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $871C DEFW $07C2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $871E DEFW $0000
 $8720 DEFW $0000
; Room exits:
 $8722 DEFB $06,$30,$29 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8722) }
                        ; TABLE#
 $8725 DEFB $FF         ; Terminator.

; Room #N$29: "#ROOM$29"
@label=Room_41
g$8726 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8727 DEFW $0653       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8729 DEFW $053F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $872B DEFW $0000
 $872D DEFW $0000
; Room exits:
 $872F DEFB $07,$30,$28 ; {#TABLE(default,centre,centre,centre)
 $8732 DEFB $05,$37,$2A ; { =h Direction | =h Via | =h Destination }
 $8735 DEFB $09,$14,$2B ; { #MOVEMENT($872F) }
                        ; { #MOVEMENT($8732) }
                        ; { #MOVEMENT($8735) }
                        ; TABLE#}
 $8738 DEFB $FF         ; Terminator.

; Room #N$2A: "#ROOM$2A"
@label=Room_42
g$8739 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $873A DEFW $052A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $873C DEFW $0703       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $873E DEFW $0000
 $8740 DEFW $0000
; Room exits:
*$8742 DEFB $08,$37,$29 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8742) }
                        ; TABLE#
 $8745 DEFB $FF         ; Terminator.

; Room #N$2B: "#ROOM$2B"
@label=Room_43
g$8746 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8747 DEFW $0653       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8749 DEFW $0000
 $874B DEFW $0000
 $874D DEFW $0000
; Room exits:
 $874F DEFB $0A,$14,$29 ; {#TABLE(default,centre,centre,centre)
 $8752 DEFB $05,$30,$2C ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($874F) }
                        ; { #MOVEMENT($8752) }
                        ; TABLE#}
 $8755 DEFB $FF         ; Terminator.

; Room #N$2C: "#ROOM$2C"
@label=Room_44
g$8756 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8757 DEFW $8747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8759 DEFW $0542       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $875B DEFW $030A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $875D DEFW $7E7F       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $875F DEFB $08,$30,$2B ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($875F) }
                        ; TABLE#
 $8762 DEFB $FF         ; Terminator.

; Room #N$2D: "#ROOM$2D"
@label=Room_45
g$8763 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8764 DEFW $8861       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8766 DEFW $06BE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8768 DEFW $0000
 $876A DEFW $0000
; Room exits:
 $876C DEFB $02,$67,$2E ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($876C) }
                        ; TABLE#
 $876F DEFB $FF         ; Terminator.

; Room #N$2E: "#ROOM$2E"
@label=Room_46
g$8770 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8771 DEFW $83C2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8773 DEFW $08FE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8775 DEFW $029C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8777 DEFW $0000
; Room exits:
 $8779 DEFB $01,$67,$2D ; {#TABLE(default,centre,centre,centre)
 $877C DEFB $02,$37,$2F ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8779) }
                        ; { #MOVEMENT($877C) }
                        ; TABLE#}
 $877F DEFB $FF         ; Terminator.

; Room #N$2F: "#ROOM$2F"
@label=Room_47
g$8780 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8781 DEFW $852A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8783 DEFW $08FE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8785 DEFW $0000
 $8787 DEFW $0000
; Room exits:
 $8789 DEFB $01,$37,$2E ; {#TABLE(default,centre,centre,centre)
 $878C DEFB $02,$32,$30 ; { =h Direction | =h Via | =h Destination }
 $878F DEFB $03,$33,$31 ; { #MOVEMENT($8789) }
                        ; { #MOVEMENT($878C) }
                        ; { #MOVEMENT($878F) }
                        ; TABLE#}
 $8792 DEFB $FF         ; Terminator.

; Room #N$30: "#ROOM$30"
@label=Room_48
g$8793 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8794 DEFW $84A0       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8796 DEFW $08FE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8798 DEFW $0000
 $879A DEFW $0000
; Room exits:
 $879C DEFB $01,$32,$2F ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($879C) }
                        ; TABLE#
 $879F DEFB $FF         ; Terminator.

; Room #N$31: "#ROOM$31"
@label=Room_49
g$87A0 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $87A1 DEFW $80CE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87A3 DEFW $08FE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87A5 DEFW $0000
 $87A7 DEFW $0000
; Room exits:
 $87A9 DEFB $04,$33,$2F ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($87A9) }
                        ; TABLE#
 $87AC DEFB $FF         ; Terminator.

; Room #N$32: "#ROOM$32"
@label=Room_50
g$87AD DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $87AE DEFW $0861       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87B0 DEFW $053F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87B2 DEFW $0000
 $87B4 DEFW $0000
; Room exits:
 $87B6 DEFB $01,$00,$35 ; {#TABLE(default,centre,centre,centre)
 $87B9 DEFB $04,$00,$3E ; { =h Direction | =h Via | =h Destination }
 $87BC DEFB $03,$00,$5C ; { #MOVEMENT($87B6) }
 $87BF DEFB $02,$00,$33 ; { #MOVEMENT($87B9) }
 $87C2 DEFB $05,$00,$68 ; { #MOVEMENT($87BC) }
                        ; { #MOVEMENT($87BF) }
                        ; { #MOVEMENT($87C2) }
                        ; TABLE#}
 $87C5 DEFB $FF         ; Terminator.

; Room #N$33: "#ROOM$33"
@label=Room_51
g$87C6 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $87C7 DEFW $04BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87C9 DEFW $01CA       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87CB DEFW $0000
 $87CD DEFW $0000
; Room exits:
 $87CF DEFB $01,$00,$32 ; {#TABLE(default,centre,centre,centre)
 $87D2 DEFB $02,$00,$34 ; { =h Direction | =h Via | =h Destination }
 $87D5 DEFB $03,$13,$38 ; { #MOVEMENT($87CF) }
                        ; { #MOVEMENT($87D2) }
                        ; { #MOVEMENT($87D5) }
                        ; TABLE#}
 $87D8 DEFB $FF         ; Terminator.

; Room #N$34: "#ROOM$34"
@label=Room_52
g$87D9 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $87DA DEFW $04BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87DC DEFW $07F4       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87DE DEFW $0000
 $87E0 DEFW $0000
; Room exits:
 $87E2 DEFB $01,$00,$33 ; {#TABLE(default,centre,centre,centre)
 $87E5 DEFB $03,$49,$3C ; { =h Direction | =h Via | =h Destination }
 $87E8 DEFB $04,$4B,$51 ; { #MOVEMENT($87E2) }
                        ; { #MOVEMENT($87E5) }
                        ; { #MOVEMENT($87E8) }
                        ; TABLE#}
 $87EB DEFB $FF         ; Terminator.

; Room #N$35: "#ROOM$35"
@label=Room_53
g$87EC DEFB %10001000   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $87ED DEFW $083E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87EF DEFW $04D3       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87F1 DEFW $0000
 $87F3 DEFW $0000
; Room exits:
 $87F5 DEFB $02,$00,$32 ; {#TABLE(default,centre,centre,centre)
 $87F8 DEFB $01,$00,$36 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($87F5) }
                        ; { #MOVEMENT($87F8) }
                        ; TABLE#}
 $87FB DEFB $FF         ; Terminator.

; Room #N$36: "#ROOM$36"
@label=Room_54
g$87FC DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $87FD DEFW $8604       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $87FF DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8801 DEFW $0000
*$8803 DEFW $7F4C       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $8805 DEFB $02,$00,$35 ; {#TABLE(default,centre,centre,centre)
 $8808 DEFB $01,$00,$37 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8805) }
                        ; { #MOVEMENT($8808) }
                        ; TABLE#}
 $880B DEFB $FF         ; Terminator.

; Room #N$37: "#ROOM$37"
@label=Room_55
g$880C DEFB %10000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $880D DEFW $8908       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $880F DEFW $06A2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8811 DEFW $0000
 $8813 DEFW $7F57       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $8815 DEFB $02,$00,$36 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8815) }
                        ; TABLE#
 $8818 DEFB $FF         ; Terminator.

; Room #N$38: "#ROOM$38"
@label=Room_56
g$8819 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $881A DEFW $23C2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $881C DEFW $029C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $881E DEFW $0000
 $8820 DEFW $0000
; Room exits:
 $8822 DEFB $04,$13,$33 ; {#TABLE(default,centre,centre,centre)
 $8825 DEFB $03,$45,$39 ; { =h Direction | =h Via | =h Destination }
 $8828 DEFB $09,$14,$3D ; { #MOVEMENT($8822) }
                        ; { #MOVEMENT($8825) }
                        ; { #MOVEMENT($8828) }
                        ; TABLE#}
 $882B DEFB $FF         ; Terminator.

; Room #N$39: "#ROOM$39"
@label=Room_57
g$882C DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $882D DEFW $1747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $882F DEFW $052A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8831 DEFW $0000
 $8833 DEFW $0000
; Room exits:
 $8835 DEFB $04,$45,$38 ; {#TABLE(default,centre,centre,centre)
 $8838 DEFB $03,$32,$3B ; { =h Direction | =h Via | =h Destination }
 $883B DEFB $02,$00,$3A ; { #MOVEMENT($8835) }
                        ; { #MOVEMENT($8838) }
                        ; { #MOVEMENT($883B) }
                        ; TABLE#}
 $883E DEFB $FF         ; Terminator.

; Room #N$3A: "#ROOM$3A"
@label=Room_58
g$883F DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8840 DEFW $84EA       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8842 DEFW $00BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8844 DEFW $0000
 $8846 DEFW $0000
; Room exits:
 $8848 DEFB $01,$00,$39 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8848) }
                        ; TABLE#
 $884B DEFB $FF         ; Terminator.

; Room #N$3B: "#ROOM$3B"
@label=Room_59
g$884C DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $884D DEFW $84A0       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $884F DEFW $00BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8851 DEFW $0000
 $8853 DEFW $0000
; Room exits:
 $8855 DEFB $04,$32,$39 ; {#TABLE(default,centre,centre,centre)
 $8858 DEFB $02,$4A,$3C ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8855) }
                        ; { #MOVEMENT($8858) }
                        ; TABLE#}
 $885B DEFB $FF         ; Terminator.

; Room #N$3C: "#ROOM$3C"
@label=Room_60
g$885C DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $885D DEFW $09E3       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $885F DEFW $07F4       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8861 DEFW $0000
 $8863 DEFW $0000
; Room exits:
 $8865 DEFB $01,$4A,$3B ; {#TABLE(default,centre,centre,centre)
 $8868 DEFB $04,$49,$34 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8865) }
                        ; { #MOVEMENT($8868) }
                        ; TABLE#}
 $886B DEFB $FF         ; Terminator.

; Room #N$3D: "#ROOM$3D"
@label=Room_61
g$886C DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $886D DEFW $80CE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $886F DEFW $00BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8871 DEFW $0000
 $8873 DEFW $7EB7       ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
; Room exits:
 $8875 DEFB $0A,$14,$38 ; {#TABLE(default,centre,centre,centre)
 $8878 DEFB $03,$66,$00 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8875) }
                        ; { #MOVEMENT($8878) }
                        ; TABLE#}
 $887B DEFB $FF         ; Terminator.

; Room #N$3E: "#ROOM$3E"
@label=Room_62
g$887C DEFB %00001000   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $887D DEFW $8377       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $887F DEFW $0147       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8881 DEFW $0355       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8883 DEFW $0000
; Room exits:
 $8885 DEFB $02,$0C,$4C ; {#TABLE(default,centre,centre,centre)
 $8888 DEFB $03,$00,$32 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8885) }
                        ; { #MOVEMENT($8888) }
                        ; TABLE#}
 $888B DEFB $FF         ; Terminator.

; Room #N$3F: "#ROOM$3F"
@label=Room_63
g$888C DEFB %00001000   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $888D DEFW $826E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $888F DEFW $0147       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8891 DEFW $0355       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8893 DEFW $0000
; Room exits:
 $8895 DEFB $02,$2D,$40 ; {#TABLE(default,centre,centre,centre)
 $8898 DEFB $01,$00,$4C ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8895) }
                        ; { #MOVEMENT($8898) }
                        ; TABLE#}
 $889B DEFB $FF         ; Terminator.

; Room #N$40: "#ROOM$40"
@label=Room_64
g$889C DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $889D DEFW $23C2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $889F DEFW $029C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $88A1 DEFW $0000
 $88A3 DEFW $0000
; Room exits:
 $88A5 DEFB $03,$30,$43 ; {#TABLE(default,centre,centre,centre)
 $88A8 DEFB $01,$2D,$3F ; { =h Direction | =h Via | =h Destination }
 $88AB DEFB $02,$2C,$45 ; { #MOVEMENT($88A5) }
                        ; { #MOVEMENT($88A8) }
                        ; { #MOVEMENT($88AB) }
                        ; TABLE#}
 $88AE DEFB $FF         ; Terminator.

; Room #N$41: "#ROOM$41"
@label=Room_65
g$88AF DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $88B0 DEFW $14A0       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $88B2 DEFW $04C1       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $88B4 DEFW $0000
 $88B6 DEFW $0000
; Room exits:
 $88B8 DEFB $04,$00,$42 ; {#TABLE(default,centre,centre,centre)
 $88BB DEFB $03,$32,$44 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($88B8) }
                        ; { #MOVEMENT($88BB) }
                        ; TABLE#}
 $88BE DEFB $FF         ; Terminator.

; Room #N$42: "#ROOM$42"
@label=Room_66
g$88BF DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $88C0 DEFW $1643       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
*$88C2 DEFW $0000
 $88C4 DEFW $0000
 $88C6 DEFW $0000
; Room exits:
 $88C8 DEFB $03,$00,$41 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($88C8) }
                        ; TABLE#
 $88CB DEFB $FF         ; Terminator.

; Room #N$43: "#ROOM$43"
@label=Room_67
g$88CC DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $88CD DEFW $0747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $88CF DEFW $07E0       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $88D1 DEFW $0000
 $88D3 DEFW $0000
; Room exits:
 $88D5 DEFB $04,$30,$40 ; {#TABLE(default,centre,centre,centre)
 $88D8 DEFB $02,$31,$44 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($88D5) }
                        ; { #MOVEMENT($88D8) }
                        ; TABLE#}
 $88DB DEFB $FF         ; Terminator.

; Room #N$44: "#ROOM$44"
@label=Room_68
g$88DC DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $88DD DEFW $0747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $88DF DEFW $024F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $88E1 DEFW $0000
 $88E3 DEFW $0000
; Room exits:
 $88E5 DEFB $04,$32,$41 ; {#TABLE(default,centre,centre,centre)
 $88E8 DEFB $01,$31,$43 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($88E5) }
                        ; { #MOVEMENT($88E8) }
                        ; TABLE#}
 $88EB DEFB $FF         ; Terminator.

; Room #N$45: "#ROOM$45"
@label=Room_69
g$88EC DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $88ED DEFW $1653       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $88EF DEFW $0520       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $88F1 DEFW $0000
 $88F3 DEFW $0000
; Room exits:
 $88F5 DEFB $0A,$2C,$40 ; {#TABLE(default,centre,centre,centre)
 $88F8 DEFB $02,$34,$4A ; { =h Direction | =h Via | =h Destination }
 $88FB DEFB $04,$36,$48 ; { #MOVEMENT($88F5) }
 $88FE DEFB $03,$00,$46 ; { #MOVEMENT($88F8) }
 $8901 DEFB $01,$2C,$40 ; { #MOVEMENT($88FB) }
                        ; { #MOVEMENT($88FE) }
                        ; { #MOVEMENT($8901) }
                        ; TABLE#}
 $8904 DEFB $FF         ; Terminator.

; Room #N$46: "#ROOM$46"
@label=Room_70
g$8905 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8906 DEFW $1653       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8908 DEFW $0520       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $890A DEFW $0000
 $890C DEFW $0000
; Room exits:
 $890E DEFB $04,$00,$45 ; {#TABLE(default,centre,centre,centre)
 $8911 DEFB $01,$33,$49 ; { =h Direction | =h Via | =h Destination }
 $8914 DEFB $02,$35,$4B ; { #MOVEMENT($890E) }
 $8917 DEFB $03,$37,$47 ; { #MOVEMENT($8911) }
                        ; { #MOVEMENT($8914) }
                        ; { #MOVEMENT($8917) }
                        ; TABLE#}
 $891A DEFB $FF         ; Terminator.

; Room #N$47: "#ROOM$47"
@label=Room_71
g$891B DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $891C DEFW $04EA       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $891E DEFW $0147       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8920 DEFW $0000
 $8922 DEFW $0000
; Room exits:
 $8924 DEFB $04,$37,$46 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8924) }
                        ; TABLE#
 $8927 DEFB $FF         ; Terminator.

; Room #N$48: "#ROOM$48"
@label=Room_72
g$8928 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8929 DEFW $0865       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $892B DEFW $0147       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $892D DEFW $0000
 $892F DEFW $0000
; Room exits:
 $8931 DEFB $03,$36,$45 ; {#TABLE(default,centre,centre,centre)
 $8934 DEFB $05,$38,$49 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8931) }
                        ; { #MOVEMENT($8934) }
                        ; TABLE#}
 $8937 DEFB $FF         ; Terminator.

; Room #N$49: "#ROOM$49"
@label=Room_73
g$8938 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8939 DEFW $0747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $893B DEFW $0553       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $893D DEFW $00CB       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $893F DEFW $0000
; Room exits:
 $8941 DEFB $04,$38,$48 ; {#TABLE(default,centre,centre,centre)
 $8944 DEFB $02,$33,$46 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8941) }
                        ; { #MOVEMENT($8944) }
                        ; TABLE#}
 $8947 DEFB $FF         ; Terminator.

; Room #N$4A: "#ROOM$4A"
@label=Room_74
g$8948 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8949 DEFW $8747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $894B DEFW $021B       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $894D DEFW $0000
 $894F DEFW $0000
; Room exits:
 $8951 DEFB $01,$34,$45 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8951) }
                        ; TABLE#
 $8954 DEFB $FF         ; Terminator.

; Room #N$4B: "#ROOM$4B"
@label=Room_75
g$8955 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8956 DEFW $0747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8958 DEFW $03AA       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $895A DEFW $0000
 $895C DEFW $0000
; Room exits:
 $895E DEFB $01,$35,$46 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($895E) }
                        ; TABLE#
 $8961 DEFB $FF         ; Terminator.

; Room #N$4C: "#ROOM$4C"
@label=Room_76
g$8962 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8963 DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8965 DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8967 DEFW $0000
 $8969 DEFW $0000
; Room exits:
 $896B DEFB $01,$00,$3E ; {#TABLE(default,centre,centre,centre)
 $896E DEFB $02,$00,$3F ; { =h Direction | =h Via | =h Destination }
 $8971 DEFB $08,$00,$4D ; { #MOVEMENT($896B) }
 $8974 DEFB $03,$00,$56 ; { #MOVEMENT($896E) }
                        ; { #MOVEMENT($8971) }
                        ; { #MOVEMENT($8974) }
                        ; TABLE#}
 $8977 DEFB $FF         ; Terminator.

; Room #N$4D: "#ROOM$4D"
@label=Room_77
g$8978 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8979 DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $897B DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $897D DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $897F DEFW $0000
; Room exits:
 $8981 DEFB $05,$00,$4C ; {#TABLE(default,centre,centre,centre)
 $8984 DEFB $02,$00,$4E ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8981) }
                        ; { #MOVEMENT($8984) }
                        ; TABLE#}
 $8987 DEFB $FF         ; Terminator.

; Room #N$4E: "#ROOM$4E"
@label=Room_78
g$8988 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8989 DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $898B DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $898D DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $898F DEFW $0000
; Room exits:
 $8991 DEFB $01,$00,$4D ; {#TABLE(default,centre,centre,centre)
 $8994 DEFB $08,$00,$59 ; { =h Direction | =h Via | =h Destination }
 $8997 DEFB $07,$00,$4F ; { #MOVEMENT($8991) }
                        ; { #MOVEMENT($8994) }
                        ; { #MOVEMENT($8997) }
                        ; TABLE#}
 $899A DEFB $FF         ; Terminator.

; Room #N$4F: "#ROOM$4F"
@label=Room_79
g$899B DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $899C DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $899E DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89A0 DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89A2 DEFW $0000
; Room exits:
 $89A4 DEFB $06,$00,$4E ; {#TABLE(default,centre,centre,centre)
 $89A7 DEFB $07,$00,$50 ; { =h Direction | =h Via | =h Destination }
 $89AA DEFB $05,$00,$52 ; { #MOVEMENT($89A4) }
 $89AD DEFB $08,$00,$59 ; { #MOVEMENT($89A7) }
 $89B0 DEFB $03,$3B,$00 ; { #MOVEMENT($89AA) }
                        ; { #MOVEMENT($89AD) }
                        ; { #MOVEMENT($89B0) }
                        ; TABLE#}
 $89B3 DEFB $FF         ; Terminator.

; Room #N$50: "#ROOM$50"
@label=Room_80
g$89B4 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $89B5 DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89B7 DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89B9 DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89BB DEFW $0000
; Room exits:
 $89BD DEFB $07,$00,$5B ; {#TABLE(default,centre,centre,centre)
 $89C0 DEFB $04,$00,$4F ; { =h Direction | =h Via | =h Destination }
 $89C3 DEFB $05,$00,$51 ; { #MOVEMENT($89BD) }
                        ; { #MOVEMENT($89C0) }
                        ; { #MOVEMENT($89C3) }
                        ; TABLE#}
 $89C6 DEFB $FF         ; Terminator.

; Room #N$51: "#ROOM$51"
@label=Room_81
g$89C7 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $89C8 DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89CA DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89CC DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89CE DEFW $0000
; Room exits:
 $89D0 DEFB $08,$00,$50 ; {#TABLE(default,centre,centre,centre)
 $89D3 DEFB $01,$00,$53 ; { =h Direction | =h Via | =h Destination }
 $89D6 DEFB $02,$00,$5B ; { #MOVEMENT($89D0) }
 $89D9 DEFB $06,$00,$52 ; { #MOVEMENT($89D3) }
 $89DC DEFB $04,$4B,$34 ; { #MOVEMENT($89D6) }
                        ; { #MOVEMENT($89D9) }
                        ; { #MOVEMENT($89DC) }
                        ; TABLE#}
 $89DF DEFB $FF         ; Terminator.

; Room #N$52: "#ROOM$52"
@label=Room_82
g$89E0 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $89E1 DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89E3 DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89E5 DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89E7 DEFW $0000
; Room exits:
 $89E9 DEFB $05,$00,$53 ; {#TABLE(default,centre,centre,centre)
 $89EC DEFB $04,$00,$4F ; { =h Direction | =h Via | =h Destination }
 $89EF DEFB $07,$00,$51 ; { #MOVEMENT($89E9) }
                        ; { #MOVEMENT($89EC) }
                        ; { #MOVEMENT($89EF) }
                        ; TABLE#}
 $89F2 DEFB $FF         ; Terminator.

; Room #N$53: "#ROOM$53"
@label=Room_83
g$89F3 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $89F4 DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89F6 DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89F8 DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $89FA DEFW $0000
; Room exits:
 $89FC DEFB $01,$00,$54 ; {#TABLE(default,centre,centre,centre)
 $89FF DEFB $06,$00,$56 ; { =h Direction | =h Via | =h Destination }
 $8A02 DEFB $08,$00,$52 ; { #MOVEMENT($89FC) }
 $8A05 DEFB $07,$00,$51 ; { #MOVEMENT($89FF) }
                        ; { #MOVEMENT($8A02) }
                        ; { #MOVEMENT($8A05) }
                        ; TABLE#}
 $8A08 DEFB $FF         ; Terminator.

; Room #N$54: "#ROOM$54"
@label=Room_84
g$8A09 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8A0A DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A0C DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A0E DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A10 DEFW $0000
; Room exits:
 $8A12 DEFB $06,$00,$55 ; {#TABLE(default,centre,centre,centre)
 $8A15 DEFB $02,$00,$53 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8A12) }
                        ; { #MOVEMENT($8A15) }
                        ; TABLE#}
 $8A18 DEFB $FF         ; Terminator.

; Room #N$55: "#ROOM$55"
@label=Room_85
g$8A19 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8A1A DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A1C DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A1E DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A20 DEFW $0000
; Room exits:
 $8A22 DEFB $01,$00,$56 ; {#TABLE(default,centre,centre,centre)
 $8A25 DEFB $03,$00,$54 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8A22) }
                        ; { #MOVEMENT($8A25) }
                        ; TABLE#}
 $8A28 DEFB $FF         ; Terminator.

; Room #N$56: "#ROOM$56"
@label=Room_86
g$8A29 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8A2A DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A2C DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A2E DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A30 DEFW $0000
; Room exits:
 $8A32 DEFB $04,$00,$4C ; {#TABLE(default,centre,centre,centre)
 $8A35 DEFB $07,$00,$53 ; { =h Direction | =h Via | =h Destination }
 $8A38 DEFB $03,$00,$55 ; { #MOVEMENT($8A32) }
                        ; { #MOVEMENT($8A35) }
                        ; { #MOVEMENT($8A38) }
                        ; TABLE#}
 $8A3B DEFB $FF         ; Terminator.

; Room #N$57: "#ROOM$57"
@label=Room_87
g$8A3C DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8A3D DEFW $165C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A3F DEFW $09B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A41 DEFW $036A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A43 DEFW $0000
; Room exits:
 $8A45 DEFB $04,$00,$58 ; {#TABLE(default,centre,centre,centre)
 $8A48 DEFB $03,$00,$5A ; { =h Direction | =h Via | =h Destination }
 $8A4B DEFB $02,$3B,$00 ; { #MOVEMENT($8A45) }
                        ; { #MOVEMENT($8A48) }
                        ; { #MOVEMENT($8A4B) }
                        ; TABLE#}
 $8A4E DEFB $FF         ; Terminator.

; Room #N$58: "#ROOM$58"
@label=Room_88
g$8A4F DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8A50 DEFW $07BE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A52 DEFW $0284       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A54 DEFW $0000
 $8A56 DEFW $0000
; Room exits:
 $8A58 DEFB $04,$39,$59 ; {#TABLE(default,centre,centre,centre)
 $8A5B DEFB $07,$00,$57 ; { =h Direction | =h Via | =h Destination }
 $8A5E DEFB $01,$3B,$00 ; { #MOVEMENT($8A58) }
                        ; { #MOVEMENT($8A5B) }
                        ; { #MOVEMENT($8A5E) }
                        ; TABLE#}
 $8A61 DEFB $FF         ; Terminator.

; Room #N$59: "#ROOM$59"
@label=Room_89
g$8A62 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8A63 DEFW $07BE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A65 DEFW $0992       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A67 DEFW $0000
 $8A69 DEFW $0000
; Room exits:
 $8A6B DEFB $03,$39,$58 ; {#TABLE(default,centre,centre,centre)
 $8A6E DEFB $01,$00,$4E ; { =h Direction | =h Via | =h Destination }
 $8A71 DEFB $05,$00,$4F ; { #MOVEMENT($8A6B) }
 $8A74 DEFB $06,$3B,$00 ; { #MOVEMENT($8A6E) }
                        ; { #MOVEMENT($8A71) }
                        ; { #MOVEMENT($8A74) }
                        ; TABLE#}
 $8A77 DEFB $FF         ; Terminator.

; Room #N$5A: "#ROOM$5A"
@label=Room_90
g$8A78 DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8A79 DEFW $07BE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A7B DEFW $081A       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A7D DEFW $0000
 $8A7F DEFW $0000
; Room exits:
 $8A81 DEFB $04,$00,$57 ; {#TABLE(default,centre,centre,centre)
 $8A84 DEFB $01,$3A,$5B ; { =h Direction | =h Via | =h Destination }
 $8A87 DEFB $07,$3B,$00 ; { #MOVEMENT($8A81) }
                        ; { #MOVEMENT($8A84) }
                        ; { #MOVEMENT($8A87) }
                        ; TABLE#}
 $8A8A DEFB $FF         ; Terminator.

; Room #N$5B: "#ROOM$5B"
@label=Room_91
g$8A8B DEFB %00000110   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8A8C DEFW $07BE       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A8E DEFW $05C3       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8A90 DEFW $0000
 $8A92 DEFW $0000
; Room exits:
 $8A94 DEFB $02,$3A,$5A ; {#TABLE(default,centre,centre,centre)
 $8A97 DEFB $06,$00,$50 ; { =h Direction | =h Via | =h Destination }
 $8A9A DEFB $01,$00,$51 ; { #MOVEMENT($8A94) }
 $8A9D DEFB $05,$3B,$00 ; { #MOVEMENT($8A97) }
                        ; { #MOVEMENT($8A9A) }
                        ; { #MOVEMENT($8A9D) }
                        ; TABLE#}
 $8AA0 DEFB $FF         ; Terminator.

; Room #N$5C: "#ROOM$5C"
@label=Room_92
g$8AA1 DEFB %00001000   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8AA2 DEFW $8377       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AA4 DEFW $048B       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AA6 DEFW $0355       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AA8 DEFW $0000
; Room exits:
 $8AAA DEFB $02,$0B,$5D ; {#TABLE(default,centre,centre,centre)
 $8AAD DEFB $04,$00,$32 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8AAA) }
                        ; { #MOVEMENT($8AAD) }
                        ; TABLE#}
 $8AB0 DEFB $FF         ; Terminator.

; Room #N$5D: "#ROOM$5D"
@label=Room_93
g$8AB1 DEFB %00001000   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8AB2 DEFW $826E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AB4 DEFW $048B       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AB6 DEFW $0355       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AB8 DEFW $0000
; Room exits:
 $8ABA DEFB $02,$13,$60 ; {#TABLE(default,centre,centre,centre)
 $8ABD DEFB $01,$00,$5C ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8ABA) }
                        ; { #MOVEMENT($8ABD) }
                        ; TABLE#}
 $8AC0 DEFB $FF         ; Terminator.

; Room #N$5E: "#ROOM$5E"
@label=Room_94
g$8AC1 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8AC2 DEFW $14EA       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AC4 DEFW $0000
 $8AC6 DEFW $0000
 $8AC8 DEFW $0000
; Room exits:
 $8ACA DEFB $04,$42,$5F ; {#TABLE(default,centre,centre,centre)
 $8ACD DEFB $01,$44,$61 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8ACA) }
                        ; { #MOVEMENT($8ACD) }
                        ; TABLE#}
 $8AD0 DEFB $FF         ; Terminator.

; Room #N$5F: "#ROOM$5F"
@label=Room_95
g$8AD1 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8AD2 DEFW $1747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AD4 DEFW $07F4       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AD6 DEFW $0000
 $8AD8 DEFW $0000
; Room exits:
 $8ADA DEFB $03,$42,$5E ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8ADA) }
                        ; TABLE#
 $8ADD DEFB $FF         ; Terminator.

; Room #N$60: "#ROOM$60"
@label=Room_96
g$8ADE DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8ADF DEFW $83C2       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AE1 DEFW $048B       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AE3 DEFW $029C       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AE5 DEFW $0000
; Room exits:
 $8AE7 DEFB $01,$13,$5D ; {#TABLE(default,centre,centre,centre)
 $8AEA DEFB $07,$31,$63 ; { =h Direction | =h Via | =h Destination }
 $8AED DEFB $04,$45,$61 ; { #MOVEMENT($8AE7) }
 $8AF0 DEFB $09,$14,$64 ; { #MOVEMENT($8AEA) }
                        ; { #MOVEMENT($8AED) }
                        ; { #MOVEMENT($8AF0) }
                        ; TABLE#}
 $8AF3 DEFB $FF         ; Terminator.

; Room #N$61: "#ROOM$61"
@label=Room_97
g$8AF4 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8AF5 DEFW $0747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AF7 DEFW $07E0       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8AF9 DEFW $0000
 $8AFB DEFW $0000
; Room exits:
 $8AFD DEFB $02,$44,$5E ; {#TABLE(default,centre,centre,centre)
 $8B00 DEFB $03,$45,$60 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8AFD) }
                        ; { #MOVEMENT($8B00) }
                        ; TABLE#}
 $8B03 DEFB $FF         ; Terminator.

; Room #N$62: "#ROOM$62"
@label=Room_98
g$8B04 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8B05 DEFW $14A0       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B07 DEFW $0000
 $8B09 DEFW $0000
 $8B0B DEFW $0000
; Room exits:
 $8B0D DEFB $02,$32,$63 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8B0D) }
                        ; TABLE#
 $8B10 DEFB $FF         ; Terminator.

; Room #N$63: "#ROOM$63"
@label=Room_99
g$8B11 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8B12 DEFW $0747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B14 DEFW $024F       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B16 DEFW $0000
 $8B18 DEFW $0000
; Room exits:
 $8B1A DEFB $01,$32,$62 ; {#TABLE(default,centre,centre,centre)
 $8B1D DEFB $06,$31,$60 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8B1A) }
                        ; { #MOVEMENT($8B1D) }
                        ; TABLE#}
 $8B20 DEFB $FF         ; Terminator.

; Room #N$64: "#ROOM$64"
@label=Room_100
g$8B21 DEFB %10000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8B22 DEFW $1653       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B24 DEFW $07F4       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B26 DEFW $0000
 $8B28 DEFW $0000
; Room exits:
 $8B2A DEFB $0A,$14,$60 ; {#TABLE(default,centre,centre,centre)
 $8B2D DEFB $04,$46,$65 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8B2A) }
                        ; { #MOVEMENT($8B2D) }
                        ; TABLE#}
 $8B30 DEFB $FF         ; Terminator.

; Room #N$65: "#ROOM$65"
@label=Room_101
g$8B31 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8B32 DEFW $8747       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B34 DEFW $0584       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B36 DEFW $048B       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B38 DEFW $0000
; Room exits:
 $8B3A DEFB $03,$46,$64 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8B3A) }
                        ; TABLE#
 $8B3D DEFB $FF         ; Terminator.

; Room #N$66: "#ROOM$66"
@label=Room_102
g$8B3E DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8B3F DEFW $89E3       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B41 DEFW $00BD       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B43 DEFW $0355       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B45 DEFW $0000
; Room exits:
 $8B47 DEFB $04,$00,$20 ; {#TABLE(default,centre,centre,centre)
 $8B4A DEFB $05,$4F,$23 ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8B47) }
                        ; { #MOVEMENT($8B4A) }
                        ; TABLE#}
 $8B4D DEFB $FF         ; Terminator.

; Room #N$67: "#ROOM$67"
@label=Room_103
g$8B4E DEFB %00000110 ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8B4F DEFW $073F     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B51 DEFW $05FB     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B53 DEFW $0567     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B55 DEFW $0000
 $8B57 DEFB $FF       ; Terminator.

; Room #N$68: "#ROOM$68"
@label=Room_104
g$8B58 DEFB %00000100   ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8B59 DEFW $083E       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B5B DEFW $04D3       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B5D DEFW $06B5       ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B5F DEFW $0000
; Room exits:
 $8B61 DEFB $08,$00,$32 ; #TABLE(default,centre,centre,centre)
                        ; { =h Direction | =h Via | =h Destination }
                        ; { #MOVEMENT($8B61) }
                        ; TABLE#
 $8B64 DEFB $FF         ; Terminator.

; Room #N$69: "#ROOM$69"
@label=Room_105
g$8B65 DEFB %10000100 ; #LOCATIONATTRIBUTE(#PEEK(#PC))
 $8B66 DEFW $1164     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B68 DEFW $06B5     ; #TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))
 $8B6A DEFW $0000
 $8B6C DEFW $7E0B     ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))"
 $8B6E DEFB $FF       ; Terminator.

; Table: Objects
@label=Table_Objects
g$8B6F DEFB $00      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B70 DEFW $8CBA
 $8B72 DEFB $01      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B73 DEFW $8CCB
 $8B75 DEFB $02      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B76 DEFW $8CDC
 $8B78 DEFB $03      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B79 DEFW $8CED
 $8B7B DEFB $04      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B7C DEFW $8CFE
 $8B7E DEFB $05      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B7F DEFW $8D0F
 $8B81 DEFB $06      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B82 DEFW $8D20
 $8B84 DEFB $07      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B85 DEFW $8D31
 $8B87 DEFB $08      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B88 DEFW $8D42
 $8B8A DEFB $09      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B8B DEFW $8D53
 $8B8D DEFB $0A      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B8E DEFW $8D64
 $8B90 DEFB $0B      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B91 DEFW $8D75
 $8B93 DEFB $0C      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B94 DEFW $8D8C
 $8B96 DEFB $0D      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B97 DEFW $8D9D
 $8B99 DEFB $0E      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B9A DEFW $8DB4
 $8B9C DEFB $0F      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8B9D DEFW $8DC9
 $8B9F DEFB $10      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BA0 DEFW $8DDA
 $8BA2 DEFB $11      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BA3 DEFW $8DEB
 $8BA5 DEFB $12      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BA6 DEFW $8DFC
 $8BA8 DEFB $13      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BA9 DEFW $8E0D
 $8BAB DEFB $14      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BAC DEFW $8E27
 $8BAE DEFB $15      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BAF DEFW $8E3F
 $8BB1 DEFB $16      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BB2 DEFW $8E55
 $8BB4 DEFB $17      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BB5 DEFW $8E66
 $8BB7 DEFB $18      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BB8 DEFW $8E81
 $8BBA DEFB $19      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BBB DEFW $8E9C
 $8BBD DEFB $1A      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BBE DEFW $8EAD
 $8BC0 DEFB $1B      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BC1 DEFW $8EBE
 $8BC3 DEFB $1C      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BC4 DEFW $8ED1
 $8BC6 DEFB $1D      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BC7 DEFW $8EE4
 $8BC9 DEFB $1E      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BCA DEFW $8EF6
 $8BCC DEFB $1F      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BCD DEFW $8F13
 $8BCF DEFB $20      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BD0 DEFW $8F2C
 $8BD2 DEFB $21      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BD3 DEFW $8F3D
 $8BD5 DEFB $22      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BD6 DEFW $8F5A
 $8BD8 DEFB $23      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BD9 DEFW $8F73
 $8BDB DEFB $24      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BDC DEFW $8F84
 $8BDE DEFB $25      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BDF DEFW $8F9D
 $8BE1 DEFB $26      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BE2 DEFW $8FB6
 $8BE4 DEFB $27      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BE5 DEFW $8FCF
 $8BE7 DEFB $28      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BE8 DEFW $8FE8
 $8BEA DEFB $29      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BEB DEFW $9001
 $8BED DEFB $2A      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BEE DEFW $901A
 $8BF0 DEFB $2B      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BF1 DEFW $9033
 $8BF3 DEFB $2C      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BF4 DEFW $904C
 $8BF6 DEFB $2D      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BF7 DEFW $905E
 $8BF9 DEFB $2E      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BFA DEFW $9076
 $8BFC DEFB $2F      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8BFD DEFW $9087
 $8BFF DEFB $30      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C00 DEFW $9098
 $8C02 DEFB $31      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C03 DEFW $90B2
 $8C05 DEFB $32      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C06 DEFW $90CC
 $8C08 DEFB $33      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C09 DEFW $90EA
 $8C0B DEFB $34      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C0C DEFW $9102
 $8C0E DEFB $35      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C0F DEFW $9118
 $8C11 DEFB $36      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C12 DEFW $912E
 $8C14 DEFB $37      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C15 DEFW $9144
 $8C17 DEFB $38      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C18 DEFW $9160
 $8C1A DEFB $39      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C1B DEFW $9176
 $8C1D DEFB $3A      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C1E DEFW $9188
 $8C20 DEFB $3B      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C21 DEFW $919A
 $8C23 DEFB $3C      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C24 DEFW $91B2
 $8C26 DEFB $3D      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C27 DEFW $91CD
 $8C29 DEFB $3E      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C2A DEFW $91DE
 $8C2C DEFB $3F      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C2D DEFW $91F5
 $8C2F DEFB $40      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C30 DEFW $920A
 $8C32 DEFB $41      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C33 DEFW $921B
 $8C35 DEFB $42      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C36 DEFW $922C
 $8C38 DEFB $43      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C39 DEFW $9240
 $8C3B DEFB $44      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C3C DEFW $9251
 $8C3E DEFB $45      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C3F DEFW $9267
 $8C41 DEFB $46      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C42 DEFW $927F
 $8C44 DEFB $47      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C45 DEFW $9295
 $8C47 DEFB $48      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C48 DEFW $92A6
 $8C4A DEFB $49      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C4B DEFW $92B7
 $8C4D DEFB $4A      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C4E DEFW $92CD
 $8C50 DEFB $4B      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C51 DEFW $92E5
 $8C53 DEFB $4C      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C54 DEFW $92F7
 $8C56 DEFB $4D      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C57 DEFW $9308
 $8C59 DEFB $4E      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C5A DEFW $9319
 $8C5C DEFB $4F      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C5D DEFW $932A
 $8C5F DEFB $50      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C60 DEFW $9340
 $8C62 DEFB $51      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C63 DEFW $9353
 $8C65 DEFB $52      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C66 DEFW $9364
 $8C68 DEFB $53      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C69 DEFW $9375
 $8C6B DEFB $54      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C6C DEFW $9386
 $8C6E DEFB $55      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C6F DEFW $9397
 $8C71 DEFB $56      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C72 DEFW $93AE
 $8C74 DEFB $57      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C75 DEFW $93C3
 $8C77 DEFB $58      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C78 DEFW $93D4
 $8C7A DEFB $59      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C7B DEFW $93E5
 $8C7D DEFB $5A      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C7E DEFW $93FA
 $8C80 DEFB $5B      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C81 DEFW $940B
 $8C83 DEFB $5C      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C84 DEFW $9421
 $8C86 DEFB $5D      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C87 DEFW $9432
 $8C89 DEFB $5E      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C8A DEFW $9443
 $8C8C DEFB $5F      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C8D DEFW $9454
 $8C8F DEFB $60      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C90 DEFW $946B
 $8C92 DEFB $61      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C93 DEFW $947C
 $8C95 DEFB $62      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C96 DEFW $948D
 $8C98 DEFB $63      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C99 DEFW $949E
 $8C9B DEFB $64      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C9C DEFW $94AF
 $8C9E DEFB $65      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8C9F DEFW $94C0
 $8CA1 DEFB $66      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8CA2 DEFW $94D5
 $8CA4 DEFB $67      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8CA5 DEFW $94E6
 $8CA7 DEFB $68      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8CA8 DEFW $94FC
 $8CAA DEFB $69      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8CAB DEFW $950D
 $8CAD DEFB $6A      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8CAE DEFW $951E
 $8CB0 DEFB $6B      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8CB1 DEFW $952F
 $8CB3 DEFB $6C      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8CB4 DEFW $9540
 $8CB6 DEFB $6D      ; Object #N(#PEEK(#PC)): "#OBJECT(#PEEK(#PC))".
 $8CB7 DEFW $9551
 $8CB9 DEFB $FF      ; Terminator.

; Object #N$00: "#OBJECT$00"
@label=Object_00
g$8CBA DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8CBB DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8CBC DEFB $60       ; Volume (?)
 $8CBD DEFB $40       ; Mass (?)
 $8CBE DEFB $90
 $8CBF DEFB $E0       ; Strength (?)
 $8CC0 DEFB $00
 $8CC1 DEFB %11101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8CC2 DEFB $89,$00   ; {Object Name:
 $8CC4 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8CC6 DEFB $00,$00   ;
 $8CC8 DEFB $00,$08   ; }
 $8CCA DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$01: "#OBJECT$01"
@label=Object_01
g$8CCB DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8CCC DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8CCD DEFB $50       ; Volume (?)
 $8CCE DEFB $40       ; Mass (?)
 $8CCF DEFB $A0
 $8CD0 DEFB $E0       ; Strength (?)
 $8CD1 DEFB $00
 $8CD2 DEFB %01000110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8CD3 DEFB $05,$A2   ; {Object Name:
 $8CD5 DEFB $01,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8CD7 DEFB $00,$00   ;
 $8CD9 DEFB $00,$00   ; }
 $8CDB DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$02: "#OBJECT$02"
@label=Object_02
g$8CDC DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8CDD DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8CDE DEFB $20       ; Volume (?)
 $8CDF DEFB $20       ; Mass (?)
 $8CE0 DEFB $10
 $8CE1 DEFB $E0       ; Strength (?)
 $8CE2 DEFB $00
 $8CE3 DEFB %11011100 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8CE4 DEFB $84,$6B   ; {Object Name:
 $8CE6 DEFB $04,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8CE8 DEFB $00,$00   ;
 $8CEA DEFB $00,$0B   ; }
 $8CEC DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$03: "#OBJECT$03"
@label=Object_03
g$8CED DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8CEE DEFB $18       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8CEF DEFB $60       ; Volume (?)
 $8CF0 DEFB $40       ; Mass (?)
 $8CF1 DEFB $10
 $8CF2 DEFB $E0       ; Strength (?)
 $8CF3 DEFB $00
 $8CF4 DEFB %01110001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8CF5 DEFB $89,$00   ; {Object Name:
 $8CF7 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8CF9 DEFB $00,$00   ;
 $8CFB DEFB $00,$08   ; }
 $8CFD DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$04: "#OBJECT$04"
@label=Object_04
g$8CFE DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8CFF DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D00 DEFB $40       ; Volume (?)
 $8D01 DEFB $50       ; Mass (?)
 $8D02 DEFB $10
 $8D03 DEFB $E0       ; Strength (?)
 $8D04 DEFB $00
 $8D05 DEFB %01010101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8D06 DEFB $88,$9E   ; {Object Name:
 $8D08 DEFB $01,$D8   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8D0A DEFB $01,$00   ;
 $8D0C DEFB $00,$35   ; }
 $8D0E DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$05: "#OBJECT$05"
@label=Object_05
g$8D0F DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8D10 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D11 DEFB $08       ; Volume (?)
 $8D12 DEFB $30       ; Mass (?)
 $8D13 DEFB $40
 $8D14 DEFB $E0       ; Strength (?)
 $8D15 DEFB $00
 $8D16 DEFB %01001111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8D17 DEFB $88,$00   ; {Object Name:
 $8D19 DEFB $00,$16   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8D1B DEFB $02,$00   ;
 $8D1D DEFB $00,$43   ; }
 $8D1F DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$06: "#OBJECT$06"
@label=Object_06
g$8D20 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8D21 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D22 DEFB $15       ; Volume (?)
 $8D23 DEFB $35       ; Mass (?)
 $8D24 DEFB $40
 $8D25 DEFB $E0       ; Strength (?)
 $8D26 DEFB $00
 $8D27 DEFB %01111100 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8D28 DEFB $86,$00   ; {Object Name:
 $8D2A DEFB $00,$B9   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8D2C DEFB $00,$00   ;
 $8D2E DEFB $00,$43   ; }
 $8D30 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$07: "#OBJECT$07"
@label=Object_07
g$8D31 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8D32 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D33 DEFB $40       ; Volume (?)
 $8D34 DEFB $70       ; Mass (?)
 $8D35 DEFB $40
 $8D36 DEFB $E0       ; Strength (?)
 $8D37 DEFB $00
 $8D38 DEFB %00001010 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8D39 DEFB $83,$42   ; {Object Name:
 $8D3B DEFB $05,$6D   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8D3D DEFB $06,$00   ;
 $8D3F DEFB $00,$00   ; }
 $8D41 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$08: "#OBJECT$08"
@label=Object_08
g$8D42 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8D43 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D44 DEFB $15       ; Volume (?)
 $8D45 DEFB $50       ; Mass (?)
 $8D46 DEFB $40
 $8D47 DEFB $E0       ; Strength (?)
 $8D48 DEFB $00
 $8D49 DEFB %01110000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8D4A DEFB $03,$00   ; {Object Name:
 $8D4C DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8D4E DEFB $00,$00   ;
 $8D50 DEFB $00,$41   ; }
 $8D52 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$09: "#OBJECT$09"
@label=Object_09
g$8D53 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8D54 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D55 DEFB $12       ; Volume (?)
 $8D56 DEFB $45       ; Mass (?)
 $8D57 DEFB $40
 $8D58 DEFB $E0       ; Strength (?)
 $8D59 DEFB $00
 $8D5A DEFB %11011111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8D5B DEFB $01,$00   ; {Object Name:
 $8D5D DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8D5F DEFB $00,$00   ;
 $8D61 DEFB $00,$41   ; }
 $8D63 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$0A: "#OBJECT$0A"
@label=Object_10
g$8D64 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8D65 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D66 DEFB $12       ; Volume (?)
 $8D67 DEFB $45       ; Mass (?)
 $8D68 DEFB $40
 $8D69 DEFB $E0       ; Strength (?)
 $8D6A DEFB $00
 $8D6B DEFB %00111011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8D6C DEFB $05,$00   ; {Object Name:
 $8D6E DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8D70 DEFB $00,$00   ;
 $8D72 DEFB $00,$41   ; }
 $8D74 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$0B: "#OBJECT$0B"
@label=Object_11
g$8D75 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8D76 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D77 DEFB $45       ; Volume (?)
 $8D78 DEFB $50       ; Mass (?)
 $8D79 DEFB $10
 $8D7A DEFB $E0       ; Strength (?)
 $8D7B DEFB $00
 $8D7C DEFB %01000110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8D7D DEFB $15,$0B   ; {Object Name:
 $8D7F DEFB $05,$B5   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8D81 DEFB $06,$00   ;
 $8D83 DEFB $00,$5C   ;
 $8D85 DEFB $00,$00   ;
 $8D87 DEFB $1D,$01   ;
 $8D89 DEFB $1E,$02   ; }
 $8D8B DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$0C: "#OBJECT$0C"
@label=Object_12
g$8D8C DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8D8D DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D8E DEFB $45       ; Volume (?)
 $8D8F DEFB $50       ; Mass (?)
 $8D90 DEFB $10
 $8D91 DEFB $E0       ; Strength (?)
 $8D92 DEFB $00
 $8D93 DEFB %01000110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8D94 DEFB $15,$0B   ; {Object Name:
 $8D96 DEFB $05,$B5   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8D98 DEFB $06,$00   ;
 $8D9A DEFB $00,$3E   ; }
 $8D9C DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$0D: "#OBJECT$0D"
@label=Object_13
g$8D9D DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8D9E DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8D9F DEFB $20       ; Volume (?)
 $8DA0 DEFB $30       ; Mass (?)
 $8DA1 DEFB $10
 $8DA2 DEFB $E0       ; Strength (?)
 $8DA3 DEFB $00
 $8DA4 DEFB %00000010 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8DA5 DEFB $83,$F9   ; {Object Name:
 $8DA7 DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8DA9 DEFB $00,$00   ;
 $8DAB DEFB $00,$00   ;
 $8DAD DEFB $00,$00   ;
 $8DAF DEFB $30,$03   ;
 $8DB1 DEFB $2F,$03   ; }
 $8DB3 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$0E: "#OBJECT$0E"
@label=Object_14
g$8DB4 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8DB5 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8DB6 DEFB $80       ; Volume (?)
 $8DB7 DEFB $30       ; Mass (?)
 $8DB8 DEFB $00
 $8DB9 DEFB $A0       ; Strength (?)
 $8DBA DEFB $00
 $8DBB DEFB %01011001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8DBC DEFB $12,$A2   ; {Object Name:
 $8DBE DEFB $01,$49   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8DC0 DEFB $05,$00   ;
 $8DC2 DEFB $00,$09   ;
 $8DC4 DEFB $33,$04   ;
 $8DC6 DEFB $2B,$05   ; }
 $8DC8 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$0F: "#OBJECT$0F"
@label=Object_15
g$8DC9 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8DCA DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8DCB DEFB $00       ; Volume (?)
 $8DCC DEFB $00       ; Mass (?)
 $8DCD DEFB $00
 $8DCE DEFB $80       ; Strength (?)
 $8DCF DEFB $00
 $8DD0 DEFB %10010001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8DD1 DEFB $01,$00   ; {Object Name:
 $8DD3 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8DD5 DEFB $00,$00   ;
 $8DD7 DEFB $00,$00   ; }
 $8DD9 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$10: "#OBJECT$10"
@label=Object_16
g$8DDA DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8DDB DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8DDC DEFB $00       ; Volume (?)
 $8DDD DEFB $00       ; Mass (?)
 $8DDE DEFB $00
 $8DDF DEFB $80       ; Strength (?)
 $8DE0 DEFB $00
 $8DE1 DEFB %11010010 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8DE2 DEFB $83,$96   ; {Object Name:
 $8DE4 DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8DE6 DEFB $00,$00   ;
 $8DE8 DEFB $00,$00   ; }
 $8DEA DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$11: "#OBJECT$11"
@label=Object_17
g$8DEB DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8DEC DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8DED DEFB $00       ; Volume (?)
 $8DEE DEFB $00       ; Mass (?)
 $8DEF DEFB $00
 $8DF0 DEFB $80       ; Strength (?)
 $8DF1 DEFB $00
 $8DF2 DEFB %00111000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8DF3 DEFB $80,$F2   ; {Object Name:
 $8DF5 DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8DF7 DEFB $00,$00   ;
 $8DF9 DEFB $00,$00   ; }
 $8DFB DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$12: "#OBJECT$12"
@label=Object_18
g$8DFC DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8DFD DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8DFE DEFB $00       ; Volume (?)
 $8DFF DEFB $00       ; Mass (?)
 $8E00 DEFB $00
 $8E01 DEFB $80       ; Strength (?)
 $8E02 DEFB $00
 $8E03 DEFB %00011000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8E04 DEFB $80,$F2   ; {Object Name:
 $8E06 DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8E08 DEFB $00,$00   ;
 $8E0A DEFB $00,$00   ; }
 $8E0C DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$13: "#OBJECT$13"
@label=Object_19
g$8E0D DEFB $06       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8E0E DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8E0F DEFB $FF       ; Volume (?)
 $8E10 DEFB $FF       ; Mass (?)
 $8E11 DEFB $00
 $8E12 DEFB $80       ; Strength (?)
 $8E13 DEFB $00
 $8E14 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8E15 DEFB $02,$55   ; {Object Name:
 $8E17 DEFB $03,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8E19 DEFB $00,$00   ;
 $8E1B DEFB $00,$05   ;
 $8E1D DEFB $06,$5D   ;
 $8E1F DEFB $60,$33   ;
 $8E21 DEFB $38,$24   ;
 $8E23 DEFB $06,$0E   ;
 $8E25 DEFB $07       ; }
 $8E26 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$14: "#OBJECT$14"
@label=Object_20
g$8E27 DEFB $08       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8E28 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8E29 DEFB $FF       ; Volume (?)
 $8E2A DEFB $FF       ; Mass (?)
 $8E2B DEFB $00
 $8E2C DEFB $A0       ; Strength (?)
 $8E2D DEFB $00
 $8E2E DEFB %00110111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8E2F DEFB $08,$00   ; {Object Name:
 $8E31 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8E33 DEFB $00,$00   ;
 $8E35 DEFB $00,$06   ;
 $8E37 DEFB $07,$60   ;
 $8E39 DEFB $64,$29   ;
 $8E3B DEFB $2B,$38   ;
 $8E3D DEFB $3D       ; }
 $8E3E DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$15: "#OBJECT$15"
@label=Object_21
g$8E3F DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8E40 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8E41 DEFB $FF       ; Volume (?)
 $8E42 DEFB $FF       ; Mass (?)
 $8E43 DEFB $00
 $8E44 DEFB $80       ; Strength (?)
 $8E45 DEFB $00
 $8E46 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8E47 DEFB $82,$F2   ; {Object Name:
 $8E49 DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8E4B DEFB $00,$00   ;
 $8E4D DEFB $00,$07   ;
 $8E4F DEFB $08,$24   ;
 $8E51 DEFB $06,$0E   ;
 $8E53 DEFB $07       ; }
 $8E54 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$16: "#OBJECT$16"
@label=Object_22
g$8E55 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8E56 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8E57 DEFB $20       ; Volume (?)
 $8E58 DEFB $20       ; Mass (?)
 $8E59 DEFB $80
 $8E5A DEFB $94       ; Strength (?)
 $8E5B DEFB $00
 $8E5C DEFB %10111001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8E5D DEFB $24,$F7   ; {Object Name:
 $8E5F DEFB $05,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8E61 DEFB $00,$00   ;
 $8E63 DEFB $00,$08   ; }
 $8E65 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$17: "#OBJECT$17"
@label=Object_23
g$8E66 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8E67 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8E68 DEFB $FF       ; Volume (?)
 $8E69 DEFB $FF       ; Mass (?)
 $8E6A DEFB $01
 $8E6B DEFB $A0       ; Strength (?)
 $8E6C DEFB $00
 $8E6D DEFB %01111110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8E6E DEFB $80,$F2   ; {Object Name:
 $8E70 DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8E72 DEFB $00,$00   ;
 $8E74 DEFB $00,$08   ;
 $8E76 DEFB $0D,$08   ;
 $8E78 DEFB $0C,$09   ;
 $8E7A DEFB $19,$08   ;
 $8E7C DEFB $18,$09   ;
 $8E7E DEFB $28,$09   ; }
*$8E80 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$18: "#OBJECT$18"
@label=Object_24
g$8E81 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8E82 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8E83 DEFB $FF       ; Volume (?)
 $8E84 DEFB $FF       ; Mass (?)
 $8E85 DEFB $01
 $8E86 DEFB $A0       ; Strength (?)
 $8E87 DEFB $00
 $8E88 DEFB %01111110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8E89 DEFB $80,$75   ; {Object Name:
 $8E8B DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8E8D DEFB $00,$00   ;
 $8E8F DEFB $00,$08   ;
 $8E91 DEFB $0D,$08   ;
 $8E93 DEFB $0C,$09   ;
 $8E95 DEFB $19,$08   ;
 $8E97 DEFB $18,$09   ;
 $8E99 DEFB $28,$09   ; }
 $8E9B DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$19: "#OBJECT$19"
@label=Object_25
g$8E9C DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8E9D DEFB $03       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8E9E DEFB $01       ; Volume (?)
 $8E9F DEFB $01       ; Mass (?)
 $8EA0 DEFB $00
 $8EA1 DEFB $80       ; Strength (?)
 $8EA2 DEFB $00
 $8EA3 DEFB %10101011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8EA4 DEFB $01,$11   ; {Object Name:
 $8EA6 DEFB $02,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8EA8 DEFB $00,$00   ;
 $8EAA DEFB $00,$08   ; }
 $8EAC DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$1A: "#OBJECT$1A"
@label=Object_26
g$8EAD DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8EAE DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8EAF DEFB $01       ; Volume (?)
 $8EB0 DEFB $01       ; Mass (?)
 $8EB1 DEFB $00
 $8EB2 DEFB $80       ; Strength (?)
 $8EB3 DEFB $00
 $8EB4 DEFB %11011000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8EB5 DEFB $15,$00   ; {Object Name:
 $8EB7 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8EB9 DEFB $00,$7A   ;
 $8EBB DEFB $80,$00   ; }
 $8EBD DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$1B: "#OBJECT$1B"
@label=Object_27
g$8EBE DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8EBF DEFB $00       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8EC0 DEFB $05       ; Volume (?)
 $8EC1 DEFB $05       ; Mass (?)
 $8EC2 DEFB $00
 $8EC3 DEFB $80       ; Strength (?)
 $8EC4 DEFB $20
 $8EC5 DEFB %01110101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8EC6 DEFB $85,$60   ; {Object Name:
 $8EC8 DEFB $09,$F2   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8ECA DEFB $09,$00   ;
 $8ECC DEFB $00,$08   ;
 $8ECE DEFB $0F,$0A   ; }
 $8ED0 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$1C: "#OBJECT$1C"
@label=Object_28
g$8ED1 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8ED2 DEFB $02       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8ED3 DEFB $05       ; Volume (?)
 $8ED4 DEFB $05       ; Mass (?)
 $8ED5 DEFB $00
 $8ED6 DEFB $80       ; Strength (?)
 $8ED7 DEFB $20
 $8ED8 DEFB %01110101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8ED9 DEFB $35,$60   ; {Object Name:
 $8EDB DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8EDD DEFB $00,$00   ;
 $8EDF DEFB $00,$0B   ;
 $8EE1 DEFB $0F,$0A   ; }
 $8EE3 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$1D: "#OBJECT$1D"
@label=Object_29
g$8EE4 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8EE5 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8EE6 DEFB $55       ; Volume (?)
 $8EE7 DEFB $FF       ; Mass (?)
 $8EE8 DEFB $00
 $8EE9 DEFB $A0       ; Strength (?)
 $8EEA DEFB $00
 $8EEB DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8EEC DEFB $12,$0D   ; {Object Name:
 $8EEE DEFB $04,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8EF0 DEFB $00,$00   ;
 $8EF2 DEFB $00,$0C   ;
 $8EF4 DEFB $0D       ; }
 $8EF5 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$1E: "#OBJECT$1E"
@label=Object_30
g$8EF6 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8EF7 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8EF8 DEFB $FF       ; Volume (?)
 $8EF9 DEFB $80       ; Mass (?)
 $8EFA DEFB $81
 $8EFB DEFB $B4       ; Strength (?)
 $8EFC DEFB $00
 $8EFD DEFB %01100100 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8EFE DEFB $11,$CE   ; {Object Name:
 $8F00 DEFB $03,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8F02 DEFB $00,$00   ;
 $8F04 DEFB $00,$00   ;
 $8F06 DEFB $17,$0B   ;
 $8F08 DEFB $1F,$0B   ;
 $8F0A DEFB $0D,$08   ;
 $8F0C DEFB $0C,$0C   ;
 $8F0E DEFB $19,$08   ;
 $8F10 DEFB $18,$0C   ; }
 $8F12 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$1F: "#OBJECT$1F"
@label=Object_31
g$8F13 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8F14 DEFB $1E       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8F15 DEFB $10       ; Volume (?)
 $8F16 DEFB $40       ; Mass (?)
 $8F17 DEFB $80
 $8F18 DEFB $C0       ; Strength (?)
 $8F19 DEFB $00
 $8F1A DEFB %01101000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8F1B DEFB $01,$00   ; {Object Name:
 $8F1D DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8F1F DEFB $00,$00   ;
 $8F21 DEFB $00,$00   ;
 $8F23 DEFB $00,$00   ;
 $8F25 DEFB $2D,$0D   ;
 $8F27 DEFB $1D,$0E   ;
 $8F29 DEFB $1E,$0F   ; }
 $8F2B DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$20: "#OBJECT$20"
@label=Object_32
g$8F2C DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8F2D DEFB $1F       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8F2E DEFB $05       ; Volume (?)
 $8F2F DEFB $05       ; Mass (?)
 $8F30 DEFB $00
 $8F31 DEFB $80       ; Strength (?)
 $8F32 DEFB $20
 $8F33 DEFB %01110101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8F34 DEFB $35,$00   ; {Object Name:
 $8F36 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8F38 DEFB $00,$00   ;
 $8F3A DEFB $00,$00   ; }
 $8F3C DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$21: "#OBJECT$21"
@label=Object_33
g$8F3D DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8F3E DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8F3F DEFB $FF       ; Volume (?)
 $8F40 DEFB $80       ; Mass (?)
 $8F41 DEFB $81
 $8F42 DEFB $B4       ; Strength (?)
 $8F43 DEFB $00
 $8F44 DEFB %01100100 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8F45 DEFB $11,$CE   ; {Object Name:
 $8F47 DEFB $03,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8F49 DEFB $00,$00   ;
 $8F4B DEFB $00,$00   ;
 $8F4D DEFB $17,$0B   ;
 $8F4F DEFB $1F,$0B   ;
 $8F51 DEFB $0D,$08   ;
 $8F53 DEFB $0C,$0C   ;
 $8F55 DEFB $19,$08   ;
 $8F57 DEFB $18,$0C   ; }
 $8F59 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$22: "#OBJECT$22"
@label=Object_34
g$8F5A DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8F5B DEFB $21       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8F5C DEFB $10       ; Volume (?)
 $8F5D DEFB $40       ; Mass (?)
 $8F5E DEFB $80
 $8F5F DEFB $C0       ; Strength (?)
 $8F60 DEFB $00
 $8F61 DEFB %01101000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8F62 DEFB $01,$00   ; {Object Name:
 $8F64 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8F66 DEFB $00,$00   ;
 $8F68 DEFB $00,$00   ;
 $8F6A DEFB $00,$00   ;
 $8F6C DEFB $2D,$0D   ;
 $8F6E DEFB $1D,$0E   ;
 $8F70 DEFB $1E,$0F   ; }
 $8F72 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$23: "#OBJECT$23"
@label=Object_35
g$8F73 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8F74 DEFB $22       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8F75 DEFB $05       ; Volume (?)
 $8F76 DEFB $05       ; Mass (?)
 $8F77 DEFB $00
 $8F78 DEFB $80       ; Strength (?)
 $8F79 DEFB $20
 $8F7A DEFB %01110101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8F7B DEFB $35,$00   ; {Object Name:
 $8F7D DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8F7F DEFB $00,$00   ;
 $8F81 DEFB $00,$00   ; }
 $8F83 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$24: "#OBJECT$24"
@label=Object_36
g$8F84 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8F85 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8F86 DEFB $FF       ; Volume (?)
 $8F87 DEFB $FF       ; Mass (?)
 $8F88 DEFB $81
 $8F89 DEFB $34       ; Strength (?)
 $8F8A DEFB $00
 $8F8B DEFB %11101011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8F8C DEFB $18,$4C   ; {Object Name:
 $8F8E DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8F90 DEFB $00,$00   ;
 $8F92 DEFB $00,$02   ;
 $8F94 DEFB $0D,$08   ;
 $8F96 DEFB $0C,$09   ;
 $8F98 DEFB $19,$08   ;
 $8F9A DEFB $18,$09   ; }
 $8F9C DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$25: "#OBJECT$25"
@label=Object_37
g$8F9D DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8F9E DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8F9F DEFB $FF       ; Volume (?)
 $8FA0 DEFB $FF       ; Mass (?)
 $8FA1 DEFB $81
 $8FA2 DEFB $34       ; Strength (?)
 $8FA3 DEFB $00
 $8FA4 DEFB %11101011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8FA5 DEFB $18,$4C   ; {Object Name:
 $8FA7 DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8FA9 DEFB $00,$00   ;
 $8FAB DEFB $00,$02   ;
 $8FAD DEFB $0D,$08   ;
 $8FAF DEFB $0C,$09   ;
 $8FB1 DEFB $19,$08   ;
 $8FB3 DEFB $18,$09   ; }
 $8FB5 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$26: "#OBJECT$26"
@label=Object_38
g$8FB6 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8FB7 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8FB8 DEFB $FF       ; Volume (?)
 $8FB9 DEFB $FF       ; Mass (?)
 $8FBA DEFB $81
 $8FBB DEFB $34       ; Strength (?)
 $8FBC DEFB $00
 $8FBD DEFB %11101011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8FBE DEFB $18,$4C   ; {Object Name:
 $8FC0 DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8FC2 DEFB $00,$00   ;
 $8FC4 DEFB $00,$02   ;
 $8FC6 DEFB $0D,$08   ;
 $8FC8 DEFB $0C,$09   ;
 $8FCA DEFB $19,$08   ;
 $8FCC DEFB $18,$09   ; }
 $8FCE DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$27: "#OBJECT$27"
@label=Object_39
g$8FCF DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8FD0 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8FD1 DEFB $FF       ; Volume (?)
 $8FD2 DEFB $FF       ; Mass (?)
 $8FD3 DEFB $81
 $8FD4 DEFB $34       ; Strength (?)
 $8FD5 DEFB $00
 $8FD6 DEFB %11101011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8FD7 DEFB $18,$4C   ; {Object Name:
 $8FD9 DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8FDB DEFB $00,$00   ;
 $8FDD DEFB $00,$02   ;
 $8FDF DEFB $0D,$08   ;
 $8FE1 DEFB $0C,$09   ;
 $8FE3 DEFB $19,$08   ;
 $8FE5 DEFB $18,$09   ; }
 $8FE7 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$28: "#OBJECT$28"
@label=Object_40
g$8FE8 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $8FE9 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $8FEA DEFB $FF       ; Volume (?)
 $8FEB DEFB $FF       ; Mass (?)
 $8FEC DEFB $81
 $8FED DEFB $34       ; Strength (?)
 $8FEE DEFB $00
 $8FEF DEFB %11101011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $8FF0 DEFB $18,$4C   ; {Object Name:
 $8FF2 DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $8FF4 DEFB $00,$00   ;
 $8FF6 DEFB $00,$02   ;
 $8FF8 DEFB $0D,$08   ;
 $8FFA DEFB $0C,$09   ;
 $8FFC DEFB $19,$08   ;
 $8FFE DEFB $18,$09   ; }
 $9000 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$29: "#OBJECT$29"
@label=Object_41
g$9001 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9002 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9003 DEFB $FF       ; Volume (?)
 $9004 DEFB $FF       ; Mass (?)
 $9005 DEFB $81
 $9006 DEFB $34       ; Strength (?)
 $9007 DEFB $00
 $9008 DEFB %11101011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9009 DEFB $18,$4C   ; {Object Name:
 $900B DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $900D DEFB $00,$00   ;
 $900F DEFB $00,$02   ;
 $9011 DEFB $0D,$08   ;
 $9013 DEFB $0C,$09   ;
 $9015 DEFB $19,$08   ;
 $9017 DEFB $18,$09   ; }
 $9019 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$2A: "#OBJECT$2A"
@label=Object_42
g$901A DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $901B DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $901C DEFB $FF       ; Volume (?)
 $901D DEFB $FF       ; Mass (?)
 $901E DEFB $81
 $901F DEFB $34       ; Strength (?)
 $9020 DEFB $00
 $9021 DEFB %11101011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9022 DEFB $18,$4C   ; {Object Name:
 $9024 DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9026 DEFB $00,$00   ;
 $9028 DEFB $00,$03   ;
 $902A DEFB $0D,$08   ;
 $902C DEFB $0C,$09   ;
 $902E DEFB $19,$08   ;
 $9030 DEFB $18,$09   ; }
 $9032 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$2B: "#OBJECT$2B"
@label=Object_43
g$9033 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9034 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9035 DEFB $FF       ; Volume (?)
 $9036 DEFB $FF       ; Mass (?)
 $9037 DEFB $81
 $9038 DEFB $34       ; Strength (?)
 $9039 DEFB $00
 $903A DEFB %11101011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $903B DEFB $18,$4C   ; {Object Name:
 $903D DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $903F DEFB $00,$00   ;
 $9041 DEFB $00,$03   ;
 $9043 DEFB $0D,$08   ;
 $9045 DEFB $0C,$09   ;
 $9047 DEFB $19,$08   ;
 $9049 DEFB $18,$09   ; }
 $904B DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$2C: "#OBJECT$2C"
@label=Object_44
g$904C DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $904D DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $904E DEFB $FF       ; Volume (?)
 $904F DEFB $FF       ; Mass (?)
 $9050 DEFB $00
 $9051 DEFB $A0       ; Strength (?)
 $9052 DEFB $00
 $9053 DEFB %00110111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9054 DEFB $18,$A9   ; {Object Name:
 $9056 DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9058 DEFB $00,$00   ;
 $905A DEFB $00,$40   ;
 $905C DEFB $45       ; }
 $905D DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$2D: "#OBJECT$2D"
@label=Object_45
g$905E DEFB $04       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $905F DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9060 DEFB $FF       ; Volume (?)
 $9061 DEFB $FF       ; Mass (?)
 $9062 DEFB $00
 $9063 DEFB $80       ; Strength (?)
 $9064 DEFB $00
 $9065 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9066 DEFB $12,$C1   ; {Object Name:
 $9068 DEFB $04,$E8   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $906A DEFB $05,$00   ;
 $906C DEFB $00,$3F   ;
 $906E DEFB $40,$23   ;
 $9070 DEFB $21,$24   ;
 $9072 DEFB $06,$0E   ;
 $9074 DEFB $07       ; }
 $9075 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$2E: "#OBJECT$2E"
@label=Object_46
g$9076 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9077 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9078 DEFB $10       ; Volume (?)
 $9079 DEFB $40       ; Mass (?)
 $907A DEFB $02
 $907B DEFB $A0       ; Strength (?)
 $907C DEFB $00
 $907D DEFB %11101000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $907E DEFB $11,$FD   ; {Object Name:
 $9080 DEFB $02,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9082 DEFB $00,$F5   ;
 $9084 DEFB $81,$58   ; }
 $9086 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$2F: "#OBJECT$2F"
@label=Object_47
g$9087 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9088 DEFB $2E       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9089 DEFB $01       ; Volume (?)
 $908A DEFB $00       ; Mass (?)
 $908B DEFB $00
 $908C DEFB $80       ; Strength (?)
 $908D DEFB $00
 $908E DEFB %11011000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $908F DEFB $15,$04   ; {Object Name:
 $9091 DEFB $02,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9093 DEFB $00,$20   ;
 $9095 DEFB $82,$58   ; }
 $9097 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$30: "#OBJECT$30"
@label=Object_48
g$9098 DEFB $06       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9099 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $909A DEFB $FF       ; Volume (?)
 $909B DEFB $FF       ; Mass (?)
 $909C DEFB $00
 $909D DEFB $80       ; Strength (?)
 $909E DEFB $00
 $909F DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $90A0 DEFB $12,$ED   ; {Object Name:
 $90A2 DEFB $03,$E8   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $90A4 DEFB $05,$00   ;
 $90A6 DEFB $00,$40   ;
 $90A8 DEFB $43,$28   ;
 $90AA DEFB $29,$2B   ;
 $90AC DEFB $2C,$24   ;
 $90AE DEFB $06,$0E   ;
 $90B0 DEFB $07       ; }
 $90B1 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$31: "#OBJECT$31"
@label=Object_49
g$90B2 DEFB $06       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $90B3 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $90B4 DEFB $FF       ; Volume (?)
 $90B5 DEFB $FF       ; Mass (?)
 $90B6 DEFB $00
 $90B7 DEFB $80       ; Strength (?)
 $90B8 DEFB $00
 $90B9 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $90BA DEFB $02,$54   ; {Object Name:
 $90BC DEFB $02,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $90BE DEFB $00,$00   ;
 $90C0 DEFB $00,$43   ;
 $90C2 DEFB $44,$60   ;
 $90C4 DEFB $63,$22   ;
 $90C6 DEFB $25,$24   ;
 $90C8 DEFB $06,$0E   ;
 $90CA DEFB $07       ; }
 $90CB DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$32: "#OBJECT$32"
@label=Object_50
g$90CC DEFB $0A       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $90CD DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $90CE DEFB $FF       ; Volume (?)
 $90CF DEFB $FF       ; Mass (?)
 $90D0 DEFB $00
 $90D1 DEFB $80       ; Strength (?)
 $90D2 DEFB $00
 $90D3 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $90D4 DEFB $12,$99   ; {Object Name:
 $90D6 DEFB $06,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $90D8 DEFB $00,$00   ;
 $90DA DEFB $00,$41   ;
 $90DC DEFB $44,$62   ;
 $90DE DEFB $63,$22   ;
 $90E0 DEFB $24,$08   ;
 $90E2 DEFB $09,$39   ;
 $90E4 DEFB $3B,$24   ;
 $90E6 DEFB $06,$0E   ;
 $90E8 DEFB $07       ; }
 $90E9 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$33: "#OBJECT$33"
@label=Object_51
g$90EA DEFB $04       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $90EB DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $90EC DEFB $FF       ; Volume (?)
 $90ED DEFB $FF       ; Mass (?)
 $90EE DEFB $00
 $90EF DEFB $80       ; Strength (?)
 $90F0 DEFB $00
 $90F1 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $90F2 DEFB $22,$16   ; {Object Name:
 $90F4 DEFB $06,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $90F6 DEFB $00,$00   ;
 $90F8 DEFB $00,$49   ;
 $90FA DEFB $46,$2F   ;
 $90FC DEFB $31,$24   ;
 $90FE DEFB $06,$0E   ;
 $9100 DEFB $07       ; }
 $9101 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$34: "#OBJECT$34"
@label=Object_52
g$9102 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9103 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9104 DEFB $FF       ; Volume (?)
 $9105 DEFB $FF       ; Mass (?)
 $9106 DEFB $00
 $9107 DEFB $80       ; Strength (?)
 $9108 DEFB $00
 $9109 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $910A DEFB $82,$1B   ; {Object Name:
 $910C DEFB $02,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $910E DEFB $00,$00   ;
 $9110 DEFB $00,$4A   ;
 $9112 DEFB $45,$24   ;
 $9114 DEFB $06,$0E   ;
 $9116 DEFB $07       ; }
 $9117 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$35: "#OBJECT$35"
@label=Object_53
g$9118 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9119 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $911A DEFB $FF       ; Volume (?)
 $911B DEFB $FF       ; Mass (?)
 $911C DEFB $00
 $911D DEFB $80       ; Strength (?)
 $911E DEFB $00
 $911F DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9120 DEFB $02,$CE   ; {Object Name:
 $9122 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9124 DEFB $00,$00   ;
 $9126 DEFB $00,$4B   ;
 $9128 DEFB $46,$24   ;
 $912A DEFB $06,$0E   ;
 $912C DEFB $07       ; }
 $912D DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$36: "#OBJECT$36"
@label=Object_54
g$912E DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $912F DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9130 DEFB $FF       ; Volume (?)
 $9131 DEFB $FF       ; Mass (?)
 $9132 DEFB $00
 $9133 DEFB $80       ; Strength (?)
 $9134 DEFB $00
 $9135 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9136 DEFB $02,$CE   ; {Object Name:
 $9138 DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $913A DEFB $00,$00   ;
 $913C DEFB $00,$48   ;
 $913E DEFB $45,$24   ;
 $9140 DEFB $06,$0E   ;
 $9142 DEFB $07       ; }
 $9143 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$37: "#OBJECT$37"
@label=Object_55
g$9144 DEFB $08       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9145 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9146 DEFB $FF       ; Volume (?)
 $9147 DEFB $FF       ; Mass (?)
 $9148 DEFB $00
 $9149 DEFB $80       ; Strength (?)
 $914A DEFB $00
 $914B DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $914C DEFB $02,$B9   ; {Object Name:
 $914E DEFB $08,$ED   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9150 DEFB $03,$00   ;
 $9152 DEFB $00,$46   ;
 $9154 DEFB $47,$2A   ;
 $9156 DEFB $29,$26   ;
 $9158 DEFB $22,$2E   ;
 $915A DEFB $2F,$24   ;
 $915C DEFB $06,$0E   ;
 $915E DEFB $07       ; }
 $915F DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$38: "#OBJECT$38"
@label=Object_56
g$9160 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9161 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9162 DEFB $FF       ; Volume (?)
 $9163 DEFB $FF       ; Mass (?)
 $9164 DEFB $00
 $9165 DEFB $80       ; Strength (?)
 $9166 DEFB $00
 $9167 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9168 DEFB $02,$BE   ; {Object Name:
 $916A DEFB $07,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $916C DEFB $00,$00   ;
 $916E DEFB $00,$48   ;
 $9170 DEFB $49,$24   ;
 $9172 DEFB $06,$0E   ;
 $9174 DEFB $07       ; }
 $9175 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$39: "#OBJECT$39"
@label=Object_57
g$9176 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9177 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9178 DEFB $FF       ; Volume (?)
 $9179 DEFB $FF       ; Mass (?)
 $917A DEFB $02
 $917B DEFB $A0       ; Strength (?)
 $917C DEFB $00
 $917D DEFB %00110000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $917E DEFB $11,$6A   ; {Object Name:
 $9180 DEFB $07,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9182 DEFB $00,$00   ;
 $9184 DEFB $00,$58   ;
 $9186 DEFB $59       ; }
 $9187 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$3A: "#OBJECT$3A"
@label=Object_58
g$9188 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9189 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $918A DEFB $FF       ; Volume (?)
 $918B DEFB $FF       ; Mass (?)
 $918C DEFB $02
 $918D DEFB $A0       ; Strength (?)
 $918E DEFB $00
 $918F DEFB %00110111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9190 DEFB $13,$00   ; {Object Name:
 $9192 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9194 DEFB $00,$00   ;
 $9196 DEFB $00,$5A   ;
 $9198 DEFB $5B       ; }
 $9199 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$3B: "#OBJECT$3B"
@label=Object_59
g$919A DEFB $06       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $919B DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $919C DEFB $0F       ; Volume (?)
 $919D DEFB $0F       ; Mass (?)
 $919E DEFB $00
 $919F DEFB $86       ; Strength (?)
 $91A0 DEFB $00
 $91A1 DEFB %01011101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $91A2 DEFB $18,$2D   ; {Object Name:
 $91A4 DEFB $02,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $91A6 DEFB $00,$00   ;
 $91A8 DEFB $00,$58   ;
 $91AA DEFB $59,$5B   ;
 $91AC DEFB $5A,$4F   ;
 $91AE DEFB $57,$14   ;
 $91B0 DEFB $10       ; }
 $91B1 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$3C: "#OBJECT$3C"
@label=Object_60
g$91B2 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $91B3 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $91B4 DEFB $FF       ; Volume (?)
 $91B5 DEFB $FF       ; Mass (?)
 $91B6 DEFB $02
 $91B7 DEFB $A0       ; Strength (?)
 $91B8 DEFB $00
 $91B9 DEFB %11111100 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $91BA DEFB $17,$AD   ; {Object Name:
 $91BC DEFB $06,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $91BE DEFB $00,$00   ;
 $91C0 DEFB $00,$43   ;
 $91C2 DEFB $0D,$08   ;
 $91C4 DEFB $0C,$09   ;
 $91C6 DEFB $19,$08   ;
 $91C8 DEFB $18,$09   ;
 $91CA DEFB $28,$09   ; }
 $91CC DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$3D: "#OBJECT$3D"
@label=Object_61
g$91CD DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $91CE DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $91CF DEFB $FF       ; Volume (?)
 $91D0 DEFB $FF       ; Mass (?)
 $91D1 DEFB $01
 $91D2 DEFB $A0       ; Strength (?)
 $91D3 DEFB $00
 $91D4 DEFB %00110100 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $91D5 DEFB $12,$C1   ; {Object Name:
 $91D7 DEFB $04,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $91D9 DEFB $00,$F9   ;
 $91DB DEFB $7F,$48   ; }
 $91DD DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$3E: "#OBJECT$3E"
@label=Object_62
g$91DE DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $91DF DEFB $3D       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $91E0 DEFB $80       ; Volume (?)
 $91E1 DEFB $FF       ; Mass (?)
 $91E2 DEFB $01
 $91E3 DEFB $80       ; Strength (?)
 $91E4 DEFB $00
 $91E5 DEFB %01110110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $91E6 DEFB $02,$00   ; {Object Name:
 $91E8 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $91EA DEFB $00,$00   ;
 $91EC DEFB $00,$48   ;
 $91EE DEFB $24,$06   ;
 $91F0 DEFB $0E,$07   ;
 $91F2 DEFB $14,$11   ; }
 $91F4 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$3F: "#OBJECT$3F"
@label=Object_63
g$91F5 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $91F6 DEFB $3E       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $91F7 DEFB $40       ; Volume (?)
 $91F8 DEFB $FF       ; Mass (?)
 $91F9 DEFB $04
 $91FA DEFB $00       ; Strength (?)
 $91FB DEFB $00
 $91FC DEFB %00100100 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $91FD DEFB $11,$E5   ; {Object Name:
 $91FF DEFB $02,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9201 DEFB $00,$00   ;
 $9203 DEFB $00,$48   ;
 $9205 DEFB $24,$06   ;
 $9207 DEFB $0E,$07   ; }
 $9209 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$40: "#OBJECT$40"
@label=Object_64
g$920A DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $920B DEFB $3F       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $920C DEFB $02       ; Volume (?)
 $920D DEFB $02       ; Mass (?)
 $920E DEFB $00
 $920F DEFB $80       ; Strength (?)
 $9210 DEFB $00
 $9211 DEFB %00011011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9212 DEFB $11,$AF   ; {Object Name:
 $9214 DEFB $00,$0E   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9216 DEFB $00,$1D   ;
 $9218 DEFB $80,$48   ; }
 $921A DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$41: "#OBJECT$41"
@label=Object_65
g$921B DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $921C DEFB $3F       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $921D DEFB $02       ; Volume (?)
 $921E DEFB $02       ; Mass (?)
 $921F DEFB $00
 $9220 DEFB $80       ; Strength (?)
 $9221 DEFB $00
 $9222 DEFB %11011000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9223 DEFB $15,$00   ; {Object Name:
 $9225 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9227 DEFB $00,$B7   ;
 $9229 DEFB $81,$48   ; }
 $922B DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$42: "#OBJECT$42"
@label=Object_66
g$922C DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $922D DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $922E DEFB $FF       ; Volume (?)
 $922F DEFB $FF       ; Mass (?)
 $9230 DEFB $00
 $9231 DEFB $80       ; Strength (?)
 $9232 DEFB $00
 $9233 DEFB %00011111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9234 DEFB $11,$00   ; {Object Name:
 $9236 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9238 DEFB $00,$00   ;
 $923A DEFB $00,$5E   ;
 $923C DEFB $5F,$14   ;
 $923E DEFB $12       ; }
 $923F DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$43: "#OBJECT$43"
@label=Object_67
g$9240 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9241 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9242 DEFB $10       ; Volume (?)
 $9243 DEFB $10       ; Mass (?)
 $9244 DEFB $00
 $9245 DEFB $80       ; Strength (?)
 $9246 DEFB $00
 $9247 DEFB %11000101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9248 DEFB $31,$09   ; {Object Name:
 $924A DEFB $01,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $924C DEFB $00,$77   ;
 $924E DEFB $7F,$5F   ; }
 $9250 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$44: "#OBJECT$44"
@label=Object_68
g$9251 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9252 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9253 DEFB $FF       ; Volume (?)
 $9254 DEFB $FF       ; Mass (?)
 $9255 DEFB $00
 $9256 DEFB $80       ; Strength (?)
 $9257 DEFB $00
 $9258 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9259 DEFB $12,$03   ; {Object Name:
 $925B DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $925D DEFB $00,$00   ;
 $925F DEFB $00,$5E   ;
 $9261 DEFB $61,$24   ;
 $9263 DEFB $06,$0E   ;
 $9265 DEFB $07       ; }
 $9266 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$45: "#OBJECT$45"
@label=Object_69
g$9267 DEFB $04       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9268 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9269 DEFB $FF       ; Volume (?)
 $926A DEFB $FF       ; Mass (?)
 $926B DEFB $00
 $926C DEFB $80       ; Strength (?)
 $926D DEFB $00
 $926E DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $926F DEFB $02,$E5   ; {Object Name:
 $9271 DEFB $07,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9273 DEFB $00,$00   ;
 $9275 DEFB $00,$61   ;
 $9277 DEFB $60,$38   ;
 $9279 DEFB $39,$24   ;
 $927B DEFB $06,$0E   ;
 $927D DEFB $07       ; }
 $927E DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$46: "#OBJECT$46"
@label=Object_70
g$927F DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9280 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9281 DEFB $FF       ; Volume (?)
 $9282 DEFB $FF       ; Mass (?)
 $9283 DEFB $00
 $9284 DEFB $80       ; Strength (?)
 $9285 DEFB $00
 $9286 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9287 DEFB $02,$CC   ; {Object Name:
 $9289 DEFB $05,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $928B DEFB $00,$00   ;
 $928D DEFB $00,$64   ;
 $928F DEFB $65,$24   ;
 $9291 DEFB $06,$0E   ;
 $9293 DEFB $07       ; }
 $9294 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$47: "#OBJECT$47"
@label=Object_71
g$9295 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9296 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9297 DEFB $FF       ; Volume (?)
 $9298 DEFB $FF       ; Mass (?)
 $9299 DEFB $02
 $929A DEFB $A0       ; Strength (?)
 $929B DEFB $00
 $929C DEFB %11111100 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $929D DEFB $17,$09   ; {Object Name:
 $929F DEFB $01,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $92A1 DEFB $00,$00   ;
 $92A3 DEFB $00,$5E   ; }
 $92A5 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$48: "#OBJECT$48"
@label=Object_72
g$92A6 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $92A7 DEFB $47       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $92A8 DEFB $40       ; Volume (?)
 $92A9 DEFB $40       ; Mass (?)
 $92AA DEFB $02
 $92AB DEFB $A0       ; Strength (?)
 $92AC DEFB $00
 $92AD DEFB %00010111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $92AE DEFB $11,$00   ; {Object Name:
 $92B0 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $92B2 DEFB $00,$27   ;
 $92B4 DEFB $82,$5E   ; }
 $92B6 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$49: "#OBJECT$49"
@label=Object_73
g$92B7 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $92B8 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $92B9 DEFB $FF       ; Volume (?)
 $92BA DEFB $FF       ; Mass (?)
 $92BB DEFB $00
 $92BC DEFB $80       ; Strength (?)
 $92BD DEFB $00
 $92BE DEFB %01110111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $92BF DEFB $03,$A7   ; {Object Name:
 $92C1 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $92C3 DEFB $00,$00   ;
 $92C5 DEFB $00,$3C   ;
 $92C7 DEFB $34,$24   ;
 $92C9 DEFB $06,$0E   ;
 $92CB DEFB $07       ; }
 $92CC DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$4A: "#OBJECT$4A"
@label=Object_74
g$92CD DEFB $04       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $92CE DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $92CF DEFB $FF       ; Volume (?)
 $92D0 DEFB $FF       ; Mass (?)
 $92D1 DEFB $00
 $92D2 DEFB $80       ; Strength (?)
 $92D3 DEFB $00
 $92D4 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $92D5 DEFB $02,$A7   ; {Object Name:
 $92D7 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $92D9 DEFB $00,$00   ;
 $92DB DEFB $00,$27   ;
 $92DD DEFB $24,$3C   ;
 $92DF DEFB $3B,$24   ;
 $92E1 DEFB $06,$0E   ;
 $92E3 DEFB $07       ; }
 $92E4 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$4B: "#OBJECT$4B"
@label=Object_75
g$92E5 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $92E6 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $92E7 DEFB $FF       ; Volume (?)
 $92E8 DEFB $FF       ; Mass (?)
 $92E9 DEFB $00
 $92EA DEFB $80       ; Strength (?)
 $92EB DEFB $00
 $92EC DEFB %11110001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $92ED DEFB $13,$B9   ; {Object Name:
 $92EF DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $92F1 DEFB $00,$00   ;
 $92F3 DEFB $00,$34   ;
 $92F5 DEFB $51       ; }
 $92F6 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$4C: "#OBJECT$4C"
@label=Object_76
g$92F7 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $92F8 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $92F9 DEFB $FF       ; Volume (?)
 $92FA DEFB $FF       ; Mass (?)
 $92FB DEFB $02
 $92FC DEFB $A0       ; Strength (?)
 $92FD DEFB $00
 $92FE DEFB %11001011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $92FF DEFB $80,$BD   ; {Object Name:
 $9301 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9303 DEFB $00,$89   ;
 $9305 DEFB $7F,$3D   ; }
 $9307 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$4D: "#OBJECT$4D"
@label=Object_77
g$9308 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9309 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $930A DEFB $FF       ; Volume (?)
 $930B DEFB $FF       ; Mass (?)
 $930C DEFB $00
 $930D DEFB $A0       ; Strength (?)
 $930E DEFB $00
 $930F DEFB %10000010 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9310 DEFB $86,$BD   ; {Object Name:
 $9312 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9314 DEFB $00,$A2   ;
 $9316 DEFB $7F,$3D   ; }
 $9318 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$4E: "#OBJECT$4E"
@label=Object_78
g$9319 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $931A DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $931B DEFB $FF       ; Volume (?)
 $931C DEFB $FF       ; Mass (?)
 $931D DEFB $00
 $931E DEFB $A0       ; Strength (?)
 $931F DEFB $00
 $9320 DEFB %10011101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9321 DEFB $13,$00   ; {Object Name:
 $9323 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9325 DEFB $00,$B2   ;
 $9327 DEFB $7F,$3D   ; }
 $9329 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$4F: "#OBJECT$4F"
@label=Object_79
g$932A DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $932B DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $932C DEFB $FF       ; Volume (?)
 $932D DEFB $FF       ; Mass (?)
 $932E DEFB $00
 $932F DEFB $81       ; Strength (?)
 $9330 DEFB $00
 $9331 DEFB %10111011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9332 DEFB $09,$00   ; {Object Name:
 $9334 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9336 DEFB $00,$00   ;
 $9338 DEFB $00,$23   ;
 $933A DEFB $66,$24   ;
 $933C DEFB $06,$0E   ;
 $933E DEFB $07       ; }
 $933F DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$50: "#OBJECT$50"
@label=Object_80
g$9340 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9341 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9342 DEFB $FF       ; Volume (?)
 $9343 DEFB $FF       ; Mass (?)
 $9344 DEFB $01
 $9345 DEFB $A0       ; Strength (?)
 $9346 DEFB $00
 $9347 DEFB %10010001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9348 DEFB $16,$F0   ; {Object Name:
 $934A DEFB $08,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $934C DEFB $00,$00   ;
 $934E DEFB $00,$27   ;
 $9350 DEFB $14,$13   ; }
 $9352 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$51: "#OBJECT$51"
@label=Object_81
g$9353 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9354 DEFB $50       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9355 DEFB $01       ; Volume (?)
 $9356 DEFB $01       ; Mass (?)
 $9357 DEFB $00
 $9358 DEFB $00       ; Strength (?)
 $9359 DEFB $00
 $935A DEFB %11011000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $935B DEFB $15,$E7   ; {Object Name:
 $935D DEFB $08,$D0   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $935F DEFB $01,$F8   ;
 $9361 DEFB $80,$27   ; }
 $9363 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$52: "#OBJECT$52"
@label=Object_82
g$9364 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9365 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9366 DEFB $FF       ; Volume (?)
 $9367 DEFB $20       ; Mass (?)
 $9368 DEFB $01
 $9369 DEFB $A0       ; Strength (?)
 $936A DEFB $00
 $936B DEFB %11110001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $936C DEFB $10,$F4   ; {Object Name:
 $936E DEFB $07,$4B   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9370 DEFB $07,$00   ;
 $9372 DEFB $00,$26   ; }
 $9374 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$53: "#OBJECT$53"
@label=Object_83
g$9375 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9376 DEFB $52       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9377 DEFB $01       ; Volume (?)
 $9378 DEFB $01       ; Mass (?)
 $9379 DEFB $00
 $937A DEFB $80       ; Strength (?)
 $937B DEFB $00
 $937C DEFB %11011000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $937D DEFB $15,$36   ; {Object Name:
 $937F DEFB $07,$D0   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9381 DEFB $01,$AB   ;
 $9383 DEFB $80,$26   ; }
 $9385 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$54: "#OBJECT$54"
@label=Object_84
g$9386 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9387 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9388 DEFB $FF       ; Volume (?)
 $9389 DEFB $FF       ; Mass (?)
 $938A DEFB $01
 $938B DEFB $A0       ; Strength (?)
 $938C DEFB $00
 $938D DEFB %00011001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $938E DEFB $03,$00   ; {Object Name:
 $9390 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9392 DEFB $00,$00   ;
 $9394 DEFB $00,$23   ; }
 $9396 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$55: "#OBJECT$55"
@label=Object_85
g$9397 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9398 DEFB $54       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9399 DEFB $01       ; Volume (?)
 $939A DEFB $01       ; Mass (?)
 $939B DEFB $00
 $939C DEFB $20       ; Strength (?)
 $939D DEFB $00
 $939E DEFB %11011000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $939F DEFB $15,$57   ; {Object Name:
 $93A1 DEFB $01,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $93A3 DEFB $00,$58   ;
 $93A5 DEFB $81,$23   ;
 $93A7 DEFB $29,$14   ;
 $93A9 DEFB $17,$14   ;
 $93AB DEFB $2C,$14   ; }
 $93AD DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$56: "#OBJECT$56"
@label=Object_86
g$93AE DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $93AF DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $93B0 DEFB $30       ; Volume (?)
 $93B1 DEFB $FF       ; Mass (?)
 $93B2 DEFB $01
 $93B3 DEFB $80       ; Strength (?)
 $93B4 DEFB $00
 $93B5 DEFB %01011110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $93B6 DEFB $17,$62   ; {Object Name:
 $93B8 DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $93BA DEFB $00,$00   ;
 $93BC DEFB $00,$2F   ;
 $93BE DEFB $24,$15   ;
 $93C0 DEFB $0E,$07   ; }
 $93C2 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$57: "#OBJECT$57"
@label=Object_87
g$93C3 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $93C4 DEFB $56       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $93C5 DEFB $10       ; Volume (?)
 $93C6 DEFB $10       ; Mass (?)
 $93C7 DEFB $00
 $93C8 DEFB $80       ; Strength (?)
 $93C9 DEFB $00
 $93CA DEFB %11011000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $93CB DEFB $25,$1D   ; {Object Name:
 $93CD DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $93CF DEFB $00,$C5   ;
 $93D1 DEFB $7F,$2F   ; }
 $93D3 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$58: "#OBJECT$58"
@label=Object_88
g$93D4 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $93D5 DEFB $56       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $93D6 DEFB $20       ; Volume (?)
 $93D7 DEFB $10       ; Mass (?)
 $93D8 DEFB $00
 $93D9 DEFB $A0       ; Strength (?)
 $93DA DEFB $00
 $93DB DEFB %00101101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $93DC DEFB $13,$00   ; {Object Name:
 $93DE DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $93E0 DEFB $00,$DA   ;
 $93E2 DEFB $7F,$2F   ; }
 $93E4 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$59: "#OBJECT$59"
@label=Object_89
g$93E5 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $93E6 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $93E7 DEFB $20       ; Volume (?)
 $93E8 DEFB $FF       ; Mass (?)
 $93E9 DEFB $01
 $93EA DEFB $80       ; Strength (?)
 $93EB DEFB $00
 $93EC DEFB %01011110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $93ED DEFB $17,$62   ; {Object Name:
 $93EF DEFB $09,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $93F1 DEFB $00,$00   ;
 $93F3 DEFB $00,$3A   ;
 $93F5 DEFB $24,$15   ;
 $93F7 DEFB $0E,$07   ; }
 $93F9 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$5A: "#OBJECT$5A"
@label=Object_90
g$93FA DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $93FB DEFB $59       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $93FC DEFB $02       ; Volume (?)
 $93FD DEFB $05       ; Mass (?)
 $93FE DEFB $00
 $93FF DEFB $80       ; Strength (?)
 $9400 DEFB $00
 $9401 DEFB %11100101 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9402 DEFB $34,$00   ; {Object Name:
 $9404 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9406 DEFB $00,$61   ;
 $9408 DEFB $7F,$3A   ; }
 $940A DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$5B: "#OBJECT$5B"
@label=Object_91
g$940B DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $940C DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $940D DEFB $20       ; Volume (?)
 $940E DEFB $FF       ; Mass (?)
 $940F DEFB $00
 $9410 DEFB $81       ; Strength (?)
 $9411 DEFB $00
 $9412 DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9413 DEFB $02,$55   ; {Object Name:
 $9415 DEFB $03,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9417 DEFB $00,$00   ;
 $9419 DEFB $00,$20   ;
 $941B DEFB $21,$24   ;
 $941D DEFB $06,$0E   ;
 $941F DEFB $07       ; }
 $9420 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$5C: "#OBJECT$5C"
@label=Object_92
g$9421 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9422 DEFB $5D       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9423 DEFB $02       ; Volume (?)
 $9424 DEFB $05       ; Mass (?)
 $9425 DEFB $00
 $9426 DEFB $A0       ; Strength (?)
 $9427 DEFB $00
 $9428 DEFB %10110100 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9429 DEFB $13,$00   ; {Object Name:
 $942B DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $942D DEFB $00,$00   ;
 $942F DEFB $00,$0B   ; }
 $9431 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$5D: "#OBJECT$5D"
@label=Object_93
g$9432 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9433 DEFB $02       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9434 DEFB $02       ; Volume (?)
 $9435 DEFB $05       ; Mass (?)
 $9436 DEFB $05
 $9437 DEFB $20       ; Strength (?)
 $9438 DEFB $00
 $9439 DEFB %01000011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $943A DEFB $17,$C1   ; {Object Name:
 $943C DEFB $04,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $943E DEFB $00,$00   ;
 $9440 DEFB $00,$0B   ; }
 $9442 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$5E: "#OBJECT$5E"
@label=Object_94
g$9443 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9444 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9445 DEFB $00       ; Volume (?)
 $9446 DEFB $00       ; Mass (?)
 $9447 DEFB $00
 $9448 DEFB $C0       ; Strength (?)
 $9449 DEFB $00
 $944A DEFB %01000011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $944B DEFB $81,$84   ; {Object Name:
 $944D DEFB $05,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $944F DEFB $00,$00   ;
 $9451 DEFB $00,$00   ; }
 $9453 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$5F: "#OBJECT$5F"
@label=Object_95
g$9454 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9455 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9456 DEFB $20       ; Volume (?)
 $9457 DEFB $20       ; Mass (?)
 $9458 DEFB $10
 $9459 DEFB $C0       ; Strength (?)
 $945A DEFB $00
 $945B DEFB %10001011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $945C DEFB $84,$84   ; {Object Name:
 $945E DEFB $05,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9460 DEFB $00,$00   ;
 $9462 DEFB $00,$00   ;
 $9464 DEFB $00,$00   ;
 $9466 DEFB $30,$16   ;
 $9468 DEFB $2F,$16   ; }
 $946A DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$60: "#OBJECT$60"
@label=Object_96
g$946B DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $946C DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $946D DEFB $00       ; Volume (?)
 $946E DEFB $00       ; Mass (?)
 $946F DEFB $00
 $9470 DEFB $80       ; Strength (?)
 $9471 DEFB $00
 $9472 DEFB %00000010 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9473 DEFB $84,$00   ; {Object Name:
 $9475 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9477 DEFB $00,$00   ;
 $9479 DEFB $00,$00   ; }
 $947B DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$61: "#OBJECT$61"
@label=Object_97
g$947C DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $947D DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $947E DEFB $00       ; Volume (?)
 $947F DEFB $00       ; Mass (?)
 $9480 DEFB $00
 $9481 DEFB $80       ; Strength (?)
 $9482 DEFB $00
 $9483 DEFB %10011110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9484 DEFB $06,$00   ; {Object Name:
 $9486 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9488 DEFB $00,$00   ;
 $948A DEFB $00,$00   ; }
 $948C DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$62: "#OBJECT$62"
@label=Object_98
g$948D DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $948E DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $948F DEFB $00       ; Volume (?)
 $9490 DEFB $00       ; Mass (?)
 $9491 DEFB $00
 $9492 DEFB $80       ; Strength (?)
 $9493 DEFB $00
 $9494 DEFB %01100000 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9495 DEFB $84,$00   ; {Object Name:
 $9497 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9499 DEFB $00,$00   ;
 $949B DEFB $00,$00   ; }
 $949D DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$63: "#OBJECT$63"
@label=Object_99
g$949E DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $949F DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $94A0 DEFB $05       ; Volume (?)
 $94A1 DEFB $05       ; Mass (?)
 $94A2 DEFB $00
 $94A3 DEFB $80       ; Strength (?)
 $94A4 DEFB $00
 $94A5 DEFB %00110001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $94A6 DEFB $02,$0F   ; {Object Name:
 $94A8 DEFB $06,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $94AA DEFB $00,$00   ;
 $94AC DEFB $00,$00   ; }
 $94AE DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$64: "#OBJECT$64"
@label=Object_100
g$94AF DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $94B0 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $94B1 DEFB $60       ; Volume (?)
 $94B2 DEFB $40       ; Mass (?)
 $94B3 DEFB $A0
 $94B4 DEFB $E0       ; Strength (?)
 $94B5 DEFB $00
 $94B6 DEFB %01000110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $94B7 DEFB $25,$FB   ; {Object Name:
 $94B9 DEFB $05,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $94BB DEFB $00,$00   ;
 $94BD DEFB $00,$00   ; }
 $94BF DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$65: "#OBJECT$65"
@label=Object_101
g$94C0 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $94C1 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $94C2 DEFB $80       ; Volume (?)
 $94C3 DEFB $30       ; Mass (?)
 $94C4 DEFB $00
 $94C5 DEFB $A0       ; Strength (?)
 $94C6 DEFB $00
 $94C7 DEFB %01011001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $94C8 DEFB $22,$FB   ; {Object Name:
 $94CA DEFB $05,$49   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $94CC DEFB $05,$00   ;
 $94CE DEFB $00,$09   ;
 $94D0 DEFB $33,$17   ;
 $94D2 DEFB $2B,$18   ; }
 $94D4 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$66: "#OBJECT$66"
@label=Object_102
g$94D5 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $94D6 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $94D7 DEFB $FF       ; Volume (?)
 $94D8 DEFB $FF       ; Mass (?)
 $94D9 DEFB $00
 $94DA DEFB $81       ; Strength (?)
 $94DB DEFB $00
 $94DC DEFB %10111011 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $94DD DEFB $09,$00   ; {Object Name:
 $94DF DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $94E1 DEFB $00,$00   ;
 $94E3 DEFB $00,$3D   ; }
 $94E5 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$67: "#OBJECT$67"
@label=Object_103
g$94E6 DEFB $02       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $94E7 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $94E8 DEFB $FF       ; Volume (?)
 $94E9 DEFB $FF       ; Mass (?)
 $94EA DEFB $00
 $94EB DEFB $81       ; Strength (?)
 $94EC DEFB $00
 $94ED DEFB %01101110 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $94EE DEFB $82,$FE   ; {Object Name:
 $94F0 DEFB $08,$55   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $94F2 DEFB $03,$00   ;
 $94F4 DEFB $00,$2D   ;
 $94F6 DEFB $2E,$24   ;
 $94F8 DEFB $06,$0E   ;
 $94FA DEFB $07       ; }
 $94FB DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$68: "#OBJECT$68"
@label=Object_104
g$94FC DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $94FD DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $94FE DEFB $30       ; Volume (?)
 $94FF DEFB $30       ; Mass (?)
 $9500 DEFB $40
 $9501 DEFB $E0       ; Strength (?)
 $9502 DEFB $00
 $9503 DEFB %00101010 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9504 DEFB $10,$7B   ; {Object Name:
 $9506 DEFB $03,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9508 DEFB $00,$00   ;
 $950A DEFB $00,$00   ; }
 $950C DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$69: "#OBJECT$69"
@label=Object_105
g$950D DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $950E DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $950F DEFB $05       ; Volume (?)
 $9510 DEFB $05       ; Mass (?)
 $9511 DEFB $00
 $9512 DEFB $80       ; Strength (?)
 $9513 DEFB $00
 $9514 DEFB %00111111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9515 DEFB $07,$FB   ; {Object Name:
 $9517 DEFB $05,$67   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $9519 DEFB $05,$00   ;
 $951B DEFB $00,$00   ; }
 $951D DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$6A: "#OBJECT$6A"
@label=Object_106
g$951E DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $951F DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9520 DEFB $05       ; Volume (?)
 $9521 DEFB $05       ; Mass (?)
 $9522 DEFB $00
 $9523 DEFB $80       ; Strength (?)
 $9524 DEFB $00
 $9525 DEFB %00001111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9526 DEFB $05,$62   ; {Object Name:
 $9528 DEFB $07,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $952A DEFB $00,$00   ;
 $952C DEFB $00,$00   ; }
 $952E DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$6B: "#OBJECT$6B"
@label=Object_107
g$952F DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9530 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9531 DEFB $05       ; Volume (?)
 $9532 DEFB $05       ; Mass (?)
 $9533 DEFB $00
 $9534 DEFB $80       ; Strength (?)
 $9535 DEFB $00
 $9536 DEFB %10101111 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9537 DEFB $83,$00   ; {Object Name:
 $9539 DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $953B DEFB $00,$00   ;
 $953D DEFB $00,$00   ; }
 $953F DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$6C: "#OBJECT$6C"
@label=Object_108
g$9540 DEFB $01       ; Appears in the game #N(#PEEK(#PC))
                      ; #IF(#PEEK(#PC)>$01)(times,time).
 $9541 DEFB $FF       ; #IF(#PEEK(#PC)==$FF)(No mother object,Mother object:
                      ; #OBJECT(#PEEK(#PC))).
 $9542 DEFB $05       ; Volume (?)
 $9543 DEFB $05       ; Mass (?)
 $9544 DEFB $00
 $9545 DEFB $80       ; Strength (?)
 $9546 DEFB $00
 $9547 DEFB %00110001 ; Attributes:
                      ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                      ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                      ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9548 DEFB $24,$00   ; {Object Name:
 $954A DEFB $00,$00   ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $954C DEFB $00,$00   ;
 $954E DEFB $00,$00   ; }
 $9550 DEFB $FF       ; Terminator #N(#PEEK(#PC)).

; Object #N$6D: "#OBJECT$6D"
@label=Object_109
g$9551 DEFB $01                             ; Appears in the game
                                            ; #N(#PEEK(#PC))
                                            ; #IF(#PEEK(#PC)>$01)(times,time).
 $9552 DEFB $FF                             ; #IF(#PEEK(#PC)==$FF)(No mother
                                            ; object,Mother object:
                                            ; #OBJECT(#PEEK(#PC))).
 $9553 DEFB $FF                             ; Volume (?)
 $9554 DEFB $80                             ; Mass (?)
 $9555 DEFB $81
 $9556 DEFB $B4                             ; Strength (?)
 $9557 DEFB $00
 $9558 DEFB %01100100                       ; Attributes:
                                            ; #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
                                            ; { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
                                            ; { #FOR($07,$00,-$01)(x,#IF(#PEEK(#PC)&$01<<x)(yes,no), | ) } TABLE#
 $9559 DEFB $11,$B5                         ; {Object Name:
 $955B DEFB $06,$00                         ; "#TEXTTOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC))".
 $955D DEFB $00,$00                         ;
 $955F DEFB $00,$00                         ; }
 $9561 DEFB $0D                             ; Terminator #N(#PEEK(#PC)).
 $9562 DEFB $08,$0C,$0C,$19,$08,$18,$0C,$FF

; Game status buffer entry at 956A
g$956A DEFB $00,$00,$00,$00,$00,$00,$F0,$02
 $9572 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $957A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9582 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $958A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9592 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $959A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $95FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9602 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $960A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9612 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $961A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9622 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $962A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9632 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $963A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9642 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $964A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9652 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $965A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9662 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $966A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9672 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $967A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9682 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $968A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9692 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $969A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9702 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $970A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9712 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $971A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9722 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $972A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9732 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $973A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9742 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $974A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9752 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $975A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9762 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $976A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9772 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $977A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9782 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $978A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9792 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $979A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9802 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $980A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9812 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $981A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9822 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $982A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9832 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $983A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9842 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $984A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9852 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $985A DEFB $00,$00,$00,$00,$00,$00

; Table: Timetable
;
; Holds character data.
; .
; Note for Sherlock himself the character ID can also be:
; #TABLE(default,centre,centre)
; { =h ID Byte | =h Character }
; #FOREACH($00,$01,$64)(x,{ #Nx | "#OBJECTx" })
; TABLE#
; Due to Sherlock being able to wear disguises.
;
; .
;
; Timetable #N((#PC-$9860)/$08).
@label=Table_Timetable
g$9860 DEFB $00      ; Character: "#OBJECT(#PEEK(#PC))".
 $9861 DEFW $9921
 $9863 DEFB $FF      ; Location?
 $9864 DEFW $FFFF
 $9866 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9868 DEFB $02      ; Character: "#OBJECT(#PEEK(#PC))".
 $9869 DEFW $E7E7
 $986B DEFB $FF      ; Location?
 $986C DEFW $FFFF
 $986E DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9870 DEFB $03      ; Character: "#OBJECT(#PEEK(#PC))".
 $9871 DEFW $E72F
 $9873 DEFB $FF      ; Location?
 $9874 DEFW $FFFF
 $9876 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9878 DEFB $04      ; Character: "#OBJECT(#PEEK(#PC))".
 $9879 DEFW $EBFA
 $987B DEFB $FF      ; Location?
 $987C DEFW $FFFF
 $987E DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9880 DEFB $05      ; Character: "#OBJECT(#PEEK(#PC))".
 $9881 DEFW $F017
 $9883 DEFB $FF      ; Location?
 $9884 DEFW $FFFF
 $9886 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9888 DEFB $06      ; Character: "#OBJECT(#PEEK(#PC))".
 $9889 DEFW $EE2B
 $988B DEFB $FF      ; Location?
 $988C DEFW $FFFF
 $988E DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9890 DEFB $68      ; Character: "#OBJECT(#PEEK(#PC))".
 $9891 DEFW $EFF6
 $9893 DEFB $FF      ; Location?
 $9894 DEFW $FFFF
 $9896 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9898 DEFB $07      ; Character: "#OBJECT(#PEEK(#PC))".
 $9899 DEFW $F062
 $989B DEFB $FF      ; Location?
 $989C DEFW $FFFF
 $989E DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98A0 DEFB $08      ; Character: "#OBJECT(#PEEK(#PC))".
 $98A1 DEFW $ED4B
 $98A3 DEFB $FF      ; Location?
 $98A4 DEFW $FFFF
 $98A6 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98A8 DEFB $09      ; Character: "#OBJECT(#PEEK(#PC))".
 $98A9 DEFW $EDF8
 $98AB DEFB $FF      ; Location?
 $98AC DEFW $FFFF
 $98AE DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98B0 DEFB $0A      ; Character: "#OBJECT(#PEEK(#PC))".
 $98B1 DEFW $EE1F
 $98B3 DEFB $FF      ; Location?
 $98B4 DEFW $FFFF
 $98B6 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98B8 DEFB $0B      ; Character: "#OBJECT(#PEEK(#PC))".
 $98B9 DEFW $F110
 $98BB DEFB $FF      ; Location?
 $98BC DEFW $FFFF
 $98BE DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98C0 DEFB $0C      ; Character: "#OBJECT(#PEEK(#PC))".
 $98C1 DEFW $F145
 $98C3 DEFB $FF      ; Location?
 $98C4 DEFW $FFFF
 $98C6 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98C8 DEFB $0D      ; Character: "#OBJECT(#PEEK(#PC))".
 $98C9 DEFW $F15A
 $98CB DEFB $FF      ; Location?
 $98CC DEFW $FFFF
 $98CE DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98D0 DEFB $1F      ; Character: "#OBJECT(#PEEK(#PC))".
 $98D1 DEFW $F2B2
 $98D3 DEFB $FF      ; Location?
 $98D4 DEFW $FFFF
 $98D6 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98D8 DEFB $22      ; Character: "#OBJECT(#PEEK(#PC))".
 $98D9 DEFW $F2B2
 $98DB DEFB $FF      ; Location?
 $98DC DEFW $FFFF
 $98DE DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98E0 DEFB $24      ; Character: "#OBJECT(#PEEK(#PC))".
 $98E1 DEFW $F21D
 $98E3 DEFB $FF      ; Location?
 $98E4 DEFW $FFFF
 $98E6 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98E8 DEFB $25      ; Character: "#OBJECT(#PEEK(#PC))".
 $98E9 DEFW $F23A
 $98EB DEFB $FF      ; Location?
 $98EC DEFW $FFFF
 $98EE DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98F0 DEFB $26      ; Character: "#OBJECT(#PEEK(#PC))".
 $98F1 DEFW $F22D
 $98F3 DEFB $FF      ; Location?
 $98F4 DEFW $FFFF
 $98F6 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $98F8 DEFB $27      ; Character: "#OBJECT(#PEEK(#PC))".
 $98F9 DEFW $F246
 $98FB DEFB $FF      ; Location?
 $98FC DEFW $FFFF
 $98FE DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9900 DEFB $28      ; Character: "#OBJECT(#PEEK(#PC))".
 $9901 DEFW $F268
 $9903 DEFB $FF      ; Location?
 $9904 DEFW $FFFF
 $9906 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9908 DEFB $29      ; Character: "#OBJECT(#PEEK(#PC))".
 $9909 DEFW $F25B
 $990B DEFB $FF      ; Location?
 $990C DEFW $FFFF
 $990E DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9910 DEFB $2A      ; Character: "#OBJECT(#PEEK(#PC))".
 $9911 DEFW $F278
 $9913 DEFB $FF      ; Location?
 $9914 DEFW $FFFF
 $9916 DEFW $0000    ; Timer?
; Timetable #N((#PC-$9860)/$08).
 $9918 DEFB $2B      ; Character: "#OBJECT(#PEEK(#PC))".
 $9919 DEFW $F28D
 $991B DEFB $FF      ; Location?
 $991C DEFW $FFFF
 $991E DEFW $0000    ; Timer?
 $9920 DEFB $FF      ; Terminator.

; Action: Sherlock
c$9921 LD BC,$1322   ;
 $9924 CP A          ;
 $9925 SUB $48       ;
 $9927 SBC A,C       ;
 $9928 INC DE        ;
 $9929 DEC D         ;
 $992A RST $10       ;
 $992B INC HL        ;
 $992C SBC A,C       ;
 $992D INC DE        ;
 $992E LD L,C        ;
 $992F RST $10       ;
 $9930 INC HL        ;
 $9931 SBC A,C       ;
 $9932 INC DE        ;
 $9933 LD A,(HL)     ;
 $9934 RST $10       ;
 $9935 INC HL        ;
 $9936 SBC A,C       ;
 $9937 INC DE        ;
 $9938 EXX           ;
 $9939 RST $10       ;
 $993A DEC L         ;
 $993B SBC A,C       ;
 $993C INC DE        ;
 $993D JP M,$37D7    ;
 $9940 SBC A,C       ;
 $9941 LD (BC),A     ;
 $9942 JP M,$FCFD    ;
 $9945 LD C,$37      ;
 $9947 SBC A,C       ;
 $9948 LD BC,$0E31   ;
 $994B INC HL        ;
 $994C SBC A,C       ;

; Game status buffer entry at 994D
g$994D DEFW $00FE
 $994F DEFB $BA,$03,$D8,$03,$85,$04,$98,$04
 $9957 DEFB $56,$09,$DB,$03,$CD,$02,$0A,$04
 $995F DEFB $32,$06,$38,$05,$00,$00,$07,$04
 $9967 DEFB $62,$A4,$3D,$9A,$07,$06,$63,$8C
 $996F DEFB $00,$00,$00,$08,$5E,$05,$60,$A4
 $9977 DEFB $4B,$9A,$2E,$00,$39,$40,$5D,$00
 $997F DEFB $5D,$08,$5F,$05,$0D,$A4,$59,$9A
 $9987 DEFB $48,$00,$42,$40,$43,$00,$43,$40
 $998F DEFB $00,$00,$00,$00,$00,$00,$00,$08
 $9997 DEFB $06,$03,$61,$A4,$13,$9A,$57,$00
 $999F DEFB $58,$40,$5A,$00,$53,$40,$51,$00
 $99A7 DEFB $51,$48

; Game status buffer entry at 99A9
g$99A9 DEFB $6A,$04,$69,$A4,$FC,$99,$00,$00
 $99B1 DEFB $00,$00,$55,$00,$55,$40

; Game status buffer entry at 99B7
g$99B7 DEFB $00,$00,$00,$0A,$0D,$05,$5E,$B4
 $99BF DEFB $00,$00,$00,$00,$00,$08,$0D,$05
 $99C7 DEFB $5F,$B4,$00,$00,$00,$00,$00,$08
 $99CF DEFB $06,$05,$5E,$B4,$00,$00,$00,$00
 $99D7 DEFB $00,$08,$06,$05,$5F,$B4,$00,$00
 $99DF DEFB $00,$00,$00,$08

; Game status buffer entry at 99E3
g$99E3 DEFB $0D,$02,$61,$A4,$05,$9A,$40,$00
 $99EB DEFB $41,$40,$57,$00,$58,$48

; Game status buffer entry at 99F1
g$99F1 DEFB $0D,$01,$5E,$A4,$0A,$9A,$00,$00
 $99F9 DEFB $00,$08,$FF,$CD,$74,$9A,$21,$79
 $9A01 DEFB $70,$C3,$9F,$A5,$21,$FA,$99,$CB
 $9A09 DEFB $CE,$CD,$74,$9A,$21,$E3,$70,$C3
 $9A11 DEFB $9F,$A5,$3A,$76,$99,$E6,$02,$28
 $9A19 DEFB $15,$3A,$84,$99,$E6,$02,$28,$0E
 $9A21 DEFB $CD,$74,$9A,$21,$B2,$99,$CB,$CE
 $9A29 DEFB $21,$99,$70,$C3,$9F,$A5,$DD,$CB
 $9A31 DEFB $03,$8E,$DD,$CB,$03,$86,$21,$65
 $9A39 DEFB $72,$C3,$9F,$A5,$CD,$74,$9A,$3E
 $9A41 DEFB $01,$32,$88,$9E,$21,$F0,$70,$C3
 $9A49 DEFB $9F,$A5,$CD,$74,$9A,$21,$76,$99
 $9A51 DEFB $CB,$CE,$21,$AB,$6F,$C3,$9F,$A5
 $9A59 DEFB $CD,$74,$9A,$3E,$5F,$CD,$37,$D2
 $9A61 DEFB $DD,$36,$01,$FF,$DD,$36,$0F,$00
 $9A69 DEFB $21,$84,$99,$CB,$CE,$21,$CA,$6F
 $9A71 DEFB $C3,$9F,$A5,$DD,$CB,$03,$CE,$DD
 $9A79 DEFB $CB,$03,$86,$C9,$FF,$00,$00,$3A
 $9A81 DEFB $36,$A0,$FE,$00,$3E,$01,$21,$15
 $9A89 DEFB $69,$28,$04,$AF,$21,$20,$69,$32
 $9A91 DEFB $27,$A0,$CD,$9F,$A5,$F6,$01,$C9
 $9A99 DEFB $04,$00,$CD,$A3,$9A,$CA,$15,$DC
 $9AA1 DEFB $18,$34,$3A,$0A,$A0,$FE,$67,$20
 $9AA9 DEFB $0B,$3A,$34,$A0,$FE,$32,$2E,$70
 $9AB1 DEFB $28,$15,$AF,$C9,$FE,$32,$20,$FA
 $9AB9 DEFB $3A,$34,$A0,$FE,$67,$2E,$72,$28
 $9AC1 DEFB $06,$FE,$12,$20,$ED,$2E,$5E,$F6
 $9AC9 DEFB $01,$C9,$04,$00,$CD,$A3,$9A,$CA
 $9AD1 DEFB $15,$DC,$7D,$D6,$14,$6F,$3E,$6D
 $9AD9 DEFB $32,$C6,$E2,$3E,$69,$C3,$04,$9B
 $9AE1 DEFB $04,$00,$CD,$50,$9B,$11,$06,$00
 $9AE9 DEFB $CD,$25,$9B,$DD,$7E,$02,$D6,$02
 $9AF1 DEFB $6F,$18,$0E,$04,$00,$CD,$50,$9B
 $9AF9 DEFB $11,$02,$00,$CD,$25,$9B,$DD,$6E
 $9B01 DEFB $02,$3E,$01,$F5,$26,$00,$22,$1F
 $9B09 DEFB $A0,$3A,$C6,$E2,$CD,$60,$9C,$C1
 $9B11 DEFB $C5,$3A,$C6,$E2,$CD,$0E,$DD,$F1
 $9B19 DEFB $CD,$24,$D2,$DD,$CB,$00,$B6,$21
 $9B21 DEFB $AD,$F3,$37,$C9,$DD,$7E,$02,$DD
 $9B29 DEFB $E5,$21,$00,$00,$19,$D6,$05,$30
 $9B31 DEFB $FB,$EB,$3A,$36,$A0,$CD,$19,$E6
 $9B39 DEFB $28,$09,$CD,$9C,$E3,$A7,$ED,$52
 $9B41 DEFB $CD,$8F,$E3,$CD,$B6,$CF,$DD,$7E
 $9B49 DEFB $03,$32,$35,$A0,$DD,$E1,$C9,$3A
 $9B51 DEFB $36,$A0,$3D,$FD,$2A,$17,$A0,$FD
 $9B59 DEFB $77,$01,$32,$C6,$E2,$CD,$37,$D2
 $9B61 DEFB $DD,$7E,$0F,$FD,$77,$0F,$32,$0A
 $9B69 DEFB $A0,$3A,$34,$A0,$4F,$3A,$0A,$A0
 $9B71 DEFB $CD,$07,$9C,$C8,$E1,$21,$34,$6C
 $9B79 DEFB $CD,$9F,$A5,$F6,$01,$C9,$2D,$05
 $9B81 DEFB $03,$2D,$0A,$07,$2D,$0C,$14,$2D
 $9B89 DEFB $0E,$13,$2D,$12,$12,$2D,$18,$07
 $9B91 DEFB $2D,$1C,$0C,$2D,$20,$06,$2D,$28
 $9B99 DEFB $0D,$05,$0A,$14,$05,$0C,$19,$05
 $9BA1 DEFB $0E,$1A,$05,$12,$0C,$05,$18,$06
 $9BA9 DEFB $05,$1C,$0F,$05,$20,$18,$05,$28
 $9BB1 DEFB $09,$0A,$0C,$12,$0A,$0E,$12,$0A
 $9BB9 DEFB $12,$0C,$0A,$18,$13,$0A,$1C,$02
 $9BC1 DEFB $0A,$20,$04,$0A,$28,$0F,$0C,$0E
 $9BC9 DEFB $03,$0C,$12,$14,$0C,$18,$1E,$0C
 $9BD1 DEFB $1C,$14,$0C,$20,$11,$0C,$28,$19
 $9BD9 DEFB $0E,$12,$0D,$0E,$18,$1C,$0E,$1C
 $9BE1 DEFB $11,$0E,$20,$09,$0E,$28,$0B,$12
 $9BE9 DEFB $18,$0B,$12,$1C,$10,$12,$20,$12
 $9BF1 DEFB $12,$28,$03,$18,$1C,$0F,$18,$20
 $9BF9 DEFB $18,$18,$28,$0D,$1C,$20,$0C,$1C
 $9C01 DEFB $28,$13,$20,$28,$16,$FF,$DD,$21
 $9C09 DEFB $7F,$9B,$C5,$47,$DD,$7E,$00,$FE
 $9C11 DEFB $FF,$28,$29,$78,$DD,$BE,$00,$28
 $9C19 DEFB $10,$DD,$BE,$01,$20,$14,$79,$A7
 $9C21 DEFB $28,$18,$DD,$BE,$00,$20,$0B,$18
 $9C29 DEFB $11,$79,$A7,$28,$0D,$DD,$BE,$01
 $9C31 DEFB $28,$08,$DD,$23,$DD,$23,$DD,$23
 $9C39 DEFB $18,$D2,$C1,$C9,$F6,$01,$C1,$C9
 $9C41 DEFB $04,$00,$DD,$2A,$17,$A0,$DD,$7E
 $9C49 DEFB $01,$F5,$CD,$56,$9C,$3A,$34,$A0
 $9C51 DEFB $47,$F1,$C3,$0E,$DD,$CD,$37,$D2
 $9C59 DEFB $DD,$CB,$05,$FE,$F6,$01,$C9,$CD
 $9C61 DEFB $37,$D2,$DD,$CB,$05,$BE,$F6,$01
 $9C69 DEFB $C9

; Handler: Find Character Action
;
; Used by the routine at #R$9C77.
;
; O:IX Action entry
; O:A #N$FF is no action was found
; O:F Zero flag is set if no action was found
@label=Handler_FindCharacterAction
c$9C6A LD A,($A036)  ; Load *#R$A036 into #REGa.
 $9C6D LD IX,$9C85   ; Load #R$9C85 into #REGix.
 $9C71 CALL $D34E    ; Call #R$D34E.
 $9C74 CP $FF        ; Check if a character action was found.
 $9C76 RET           ; Return.

; Execute Character Action
;
; Used by the routine at #R$A040.
;
; IY Character timetable pointer
@label=ExecuteCharacterAction
c$9C77 CALL $9C6A    ; Call #R$9C6A.
 $9C7A RET Z         ; Return if no action was found (the termination character was
                     ; returned #N$FF).
 $9C7B LD L,(IX+$01) ; {Fetch the action handler address and store it in
 $9C7E LD H,(IX+$02) ; #REGhl.}
 $9C81 LD A,L        ; {Return if the action handler address is empty.
 $9C82 OR H          ;
 $9C83 RET Z         ; }
 $9C84 JP (HL)       ; Jump to the action handler.

; Table: Character Actions
;
; .
;
; .
;
; #OBJECT(#PEEK(#PC)):
@label=Table_CharacterActions
g$9C85 DEFB $02      ; Character: "#OBJECT(#PEEK(#PC))".
 $9C86 DEFW $9DFF    ; Action routine: #R(#PEEK(#PC+$01)*$100+#PEEK(#PC)).
; #OBJECT(#PEEK(#PC)):
 $9C88 DEFB $03      ; Character: "#OBJECT(#PEEK(#PC))".
 $9C89 DEFW $9D13    ; Action routine: #R(#PEEK(#PC+$01)*$100+#PEEK(#PC)).
; #OBJECT(#PEEK(#PC)):
 $9C8B DEFB $04      ; Character: "#OBJECT(#PEEK(#PC))".
 $9C8C DEFW $9D30    ; Action routine: #R(#PEEK(#PC+$01)*$100+#PEEK(#PC)).
; #OBJECT(#PEEK(#PC)):
 $9C8E DEFB $0B      ; Character: "#OBJECT(#PEEK(#PC))".
 $9C8F DEFW $9D48    ; Action routine: #R(#PEEK(#PC+$01)*$100+#PEEK(#PC)).
; #OBJECT(#PEEK(#PC)):
 $9C91 DEFB $0C      ; Character: "#OBJECT(#PEEK(#PC))".
 $9C92 DEFW $9D73    ; Action routine: #R(#PEEK(#PC+$01)*$100+#PEEK(#PC)).
; #OBJECT(#PEEK(#PC)):
 $9C94 DEFB $08      ; Character: "#OBJECT(#PEEK(#PC))".
 $9C95 DEFW $9ED1    ; Action routine: #R(#PEEK(#PC+$01)*$100+#PEEK(#PC)).
; #OBJECT(#PEEK(#PC)):
 $9C97 DEFB $09      ; Character: "#OBJECT(#PEEK(#PC))".
 $9C98 DEFW $9ECB    ; Action routine: #R(#PEEK(#PC+$01)*$100+#PEEK(#PC)).
; #OBJECT(#PEEK(#PC)):
 $9C9A DEFB $05      ; Character: "#OBJECT(#PEEK(#PC))".
 $9C9B DEFW $9EC1    ; Action routine: #R(#PEEK(#PC+$01)*$100+#PEEK(#PC)).
; #OBJECT(#PEEK(#PC)):
 $9C9D DEFB $06      ; Character: "#OBJECT(#PEEK(#PC))".
 $9C9E DEFW $9CA2    ; Action routine: #R(#PEEK(#PC+$01)*$100+#PEEK(#PC)).
; End of table data:
 $9CA0 DEFB $FF      ; Terminator.

; Character State: Basil Phipps
@label=CharacterState_BasilPhipps
g$9CA1 DEFB $0F

; Character Action: Basil Phipps
@label=CharacterAction_BasilPhipps
c$9CA2 LD A,$55       ; Load "#OBJECT$55" into #REGa.
 $9CA4 CALL $D237     ; Call #R$D237.
 $9CA7 BIT 7,(IX+$05) ; {Return if bit 7 of *#REGix+#N$05 is not set.
 $9CAB RET Z          ; }
 $9CAC LD HL,$9CA1    ; #REGhl=#R$9CA1.
 $9CAF LD A,(HL)      ; #REGa=*#REGhl.
 $9CB0 CP $FF         ; {Return if #REGa is equal to #N$FF.
 $9CB2 RET Z          ; }
 $9CB3 DEC (HL)       ; Decrease *#REGhl by one.
 $9CB4 RET NZ         ; Return if *#REGhl is not equal to #N$FF.
 $9CB5 LD HL,$015B    ; #REGhl=#N$015B.
 $9CB8 LD (IX+$09),L  ; Write #REGl to *#REGix+#N$09.
 $9CBB LD (IX+$0A),H  ; Write #REGh to *#REGix+#N$0A.
 $9CBE XOR A          ; {Write #N$00 to; #LIST { *#REGix+#N$0D } {
 $9CBF LD (IX+$0D),A  ; *#REGix+#N$0E } LIST#
 $9CC2 LD (IX+$0E),A  ; }
 $9CC5 LD IX,$99B7    ; #REGix=#R$99B7.
 $9CC9 RES 1,(IX+$03) ; Reset bit 1 of *#REGix+#N$03.
 $9CCD RET            ; Return.

; Routine at 9CCE
;
; Used by the routines at #R$9CF2 and #R$9DFF.
c$9CCE LD IX,($A017) ; #REGix=*#R$A017.
 $9CD2 LD B,(IX+$0F) ; #REGb=*#REGix+#N$0F.
 $9CD5 LD A,C        ; #REGa=#REGc.
 $9CD6 CALL $D237    ; Call #R$D237.
 $9CD9 LD A,(IX+$0F) ; {Return if *#REGix+#N$0F is not equal to #REGb.
 $9CDC CP B          ;
 $9CDD RET NZ        ; }
 $9CDE LD A,C        ; #REGa=#REGc.
 $9CDF CALL $C821    ; Call #R$C821.
 $9CE2 JR Z,$9CE6    ; Jump to #R$9CE6 if #REGa is equal to #REGb.
 $9CE4 XOR A         ; #REGa=#N$00.
 $9CE5 RET           ; Return.
*$9CE6 OR %00000001  ; Set bit 0.
 $9CE8 RET           ; Return.

; Routine at 9CE9
;
; Used by the routines at #R$9D13, #R$9D30 and #R$9D95.
c$9CE9 CALL $9CF2    ; Call #R$9CF2.
; This entry point is used by the routine at #R$9D95.
*$9CEC LD HL,$6929   ; #REGhl=#R$6929.
 $9CEF JP $A59F      ; Jump to #R$A59F.

; Routine at 9CF2
;
; Used by the routines at #R$9CE9, #R$9D48 and #R$9D95.
c$9CF2 LD A,C        ; {Write #REGc to *#R$A034.
 $9CF3 LD ($A034),A  ; }
 $9CF6 CALL $9CCE    ; Call #R$9CCE.
 $9CF9 JR Z,$9D02    ; Jump to #R$9D02 if the zero flag is set.
 $9CFB DEC (HL)      ; Decrease *#REGhl by one.
 $9CFC JP P,$9D00    ; Jump to #R$9D00 if *#REGhl is greater than or equal to
                     ; #N$00.
 $9CFF INC (HL)      ; Increment *#REGhl by one.
*$9D00 POP DE        ; Restore #REGde from the stack.
 $9D01 RET           ; Return.
*$9D02 LD A,(HL)     ; {Jump to #R$9D00 if *#REGhl is not zero.
 $9D03 AND A         ;
 $9D04 JR NZ,$9D00   ; }
 $9D06 LD A,$0F      ; #REGa=#N$0F.
 $9D08 CALL $D2A4    ; Call #R$D2A4.
 $9D0B ADD A,$1E     ; #REGa+=#N$1E.
 $9D0D LD (HL),A     ; Write #REGa to *#REGhl.
 $9D0E XOR A         ; #REGa=#N$00.
 $9D0F RET           ; Return.

; Game status buffer entry at 9D10
g$9D10 DEFB $1E
 $9D11 DEFB $00
 $9D12 DEFB $00

; Character Action: Watson
@label=CharacterAction_Watson
c$9D13 LD HL,$9D10   ; #REGhl=#R$9D10.
 $9D16 LD C,$00      ; #REGc=#N$00.
 $9D18 CALL $9CE9    ; Call #R$9CE9.
 $9D1B LD HL,$9D11   ; #REGhl=#R$9D11.
 $9D1E LD C,$02      ; #REGc=#N$02.
 $9D20 CALL $9CE9    ; Call #R$9CE9.
 $9D23 LD HL,$9D12   ; #REGhl=#R$9D12.
 $9D26 LD C,$04      ; #REGc=#N$04.
 $9D28 CALL $9CE9    ; Call #R$9CE9.
 $9D2B JP $E691      ; Jump to #R$E691.

; Game status buffer entry at 9D2E
g$9D2E DEFB $00
 $9D2F DEFB $00

; Character Action: Chief Constable Strak
@label=CharacterAction_ChiefConstableStrak
c$9D30 LD A,($9D90)  ; {Return if *#R$9D90 is zero.
 $9D33 AND A         ;
 $9D34 RET Z         ; }
 $9D35 LD HL,$9D2E   ; #REGhl=#R$9D2E.
 $9D38 LD C,$00      ; #REGc=#N$00.
 $9D3A CALL $9CE9    ; Call #R$9CE9.
 $9D3D LD HL,$9D2F   ; #REGhl=#R$9D2F.
 $9D40 LD C,$03      ; #REGc=#N$03.
 $9D42 JP $9CE9      ; Jump to #R$9CE9.

; Game status buffer entry at 9D45
g$9D45 DEFB $00
 $9D46 DEFB $00
 $9D47 DEFB $00

; Character Action: Local Police Man #N$01
@label=CharacterAction_LocalPoliceMan_01
c$9D48 LD A,($9D90)  ; {Return if *#R$9D90 is not zero.
 $9D4B AND A         ;
 $9D4C RET NZ        ; }
 $9D4D LD HL,$9D45   ; #REGhl=#R$9D45.
 $9D50 LD C,$00      ; #REGc=#N$00.
 $9D52 CALL $9D65    ; Call #R$9D65.
 $9D55 LD HL,$9D46   ; #REGhl=#R$9D46.
 $9D58 LD C,$03      ; #REGc=#N$03.
 $9D5A CALL $9D65    ; Call #R$9D65.
 $9D5D LD HL,$9D47   ; #REGhl=#R$9D47.
 $9D60 LD C,$07      ; #REGc=#N$07.
 $9D62 JP $9D65      ; Jump to #R$9D65.
; This entry point is used by the routine at #R$9D73.
*$9D65 CALL $9CF2    ; Call #R$9CF2.
 $9D68 LD (HL),$01   ; Write #N$01 to *#REGhl.
; Print "#TEXTTOKEN($6D9A)".
 $9D6A LD HL,$6D9A   ; #REGhl=#R$6D9A.
 $9D6D JP $A59F      ; Jump to #R$A59F.

; Game status buffer entry at 9D70
g$9D70 DEFB $00
 $9D71 DEFB $00
 $9D72 DEFB $00

; Character Action: Local Police Man #N$02
@label=CharacterAction_LocalPoliceMan_02
c$9D73 LD A,($9D90)  ; #REGa=*#R$9D90.
 $9D76 AND A         ; {Return if *#R$9D90 is not zero.
 $9D77 RET NZ        ; }
 $9D78 LD HL,$9D70   ; #REGhl=#R$9D70.
 $9D7B LD C,$00      ; #REGc=#N$00.
 $9D7D CALL $9D65    ; Call #R$9D65.
 $9D80 LD HL,$9D71   ; #REGhl=#R$9D71.
 $9D83 LD C,$03      ; #REGc=#N$03.
 $9D85 CALL $9D65    ; Call #R$9D65.
 $9D88 LD HL,$9D72   ; #REGhl=#R$9D72.
 $9D8B LD C,$07      ; #REGc=#N$07.
 $9D8D JP $9D65      ; Jump to #R$9D65.

; Game status buffer entry at 9D90
g$9D90 DEFB $00
 $9D91 DEFB $00
 $9D92 DEFB $00
 $9D93 DEFB $00
 $9D94 DEFB $00

; Routine at 9D95
;
; Used by the routine at #R$9DFF.
c$9D95 LD HL,$9D91    ; #REGhl=#R$9D91.
 $9D98 LD C,$00       ; #REGc=#N$00.
 $9D9A CALL $9DC6     ; Call #R$9DC6.
 $9D9D LD HL,$9D94    ; #REGhl=#R$9D94.
 $9DA0 LD C,$00       ; #REGc=#N$00.
 $9DA2 CALL $9DD8     ; Call #R$9DD8.
 $9DA5 LD HL,$9D93    ; #REGhl=#R$9D93.
 $9DA8 LD C,$03       ; #REGc=#N$03.
 $9DAA CALL $9CE9     ; Call #R$9CE9.
 $9DAD LD IX,$99E3    ; #REGix=#R$99E3.
 $9DB1 RES 0,(IX+$03) ; Reset bit 0 of *#REGix+#N$03.
 $9DB5 LD IX,$99F1    ; #REGix=#R$99F1.
 $9DB9 RES 0,(IX+$03) ; Reset bit 0 of *#REGix+#N$03.
 $9DBD LD IX,$99A9    ; #REGix=#R$99A9.
 $9DC1 RES 0,(IX+$03) ; Reset bit 0 of *#REGix+#N$03.
 $9DC5 RET            ; Return.
*$9DC6 INC HL         ; Increment #REGhl by one.
 $9DC7 CALL $9CF2     ; Call #R$9CF2.
 $9DCA DEC HL         ; Decrease #REGhl by one.
 $9DCB LD A,(HL)      ; #REGa=*#REGhl.
 $9DCC AND A          ; {Jump to #R$9CEC if #REGa is not zero.
 $9DCD JP NZ,$9CEC    ; }
 $9DD0 INC A          ; Increment #REGa by one.
 $9DD1 LD (HL),A      ; Write #REGa to *#REGhl.
 $9DD2 LD HL,$71ED    ; #REGhl=#R$71ED.
 $9DD5 JP $A59F       ; Jump to #R$A59F.
*$9DD8 CALL $9CF2     ; Call #R$9CF2.
 $9DDB LD (HL),$01    ; Write #N$01 to *#REGhl.
 $9DDD CALL $BC46     ; Call #R$BC46.
 $9DE0 CALL $BC9C     ; Call #R$BC9C.
 $9DE3 LD A,B         ; {Jump to #R$9DF5 if #REGb is not zero.
 $9DE4 AND A          ;
 $9DE5 JR NZ,$9DF5    ; }
 $9DE7 CALL $BC74     ; Call #R$BC74.
 $9DEA AND A          ; Set flags.
 $9DEB RET Z          ; Return if #REGa is equal to #REGa.
 $9DEC PUSH IX        ; Stash #REGix on the stack.
; Print "#TEXTTOKEN($722D)".
 $9DEE LD HL,$722D    ; #REGhl=#R$722D.
 $9DF1 CALL $A59F     ; Call #R$A59F.
 $9DF4 RET            ; Return.
*$9DF5 BIT 4,(IX+$03) ; {Return if bit 4 of *#REGix+#N$03 is set.
 $9DF9 RET NZ         ; }
 $9DFA LD A,$01       ; #REGa=#N$01.
 $9DFC JP $BBE5       ; Jump to #R$BBE5.

; Character Action: Inspector Lestrade
@label=CharacterAction_InspectorLestrade
c$9DFF LD C,$04        ; #REGc=#N$04.
 $9E01 CALL $9CCE      ; Call #R$9CCE.
 $9E04 JR NZ,$9D95     ; Jump to #R$9D95 if the zero flag is not set.
 $9E06 LD C,$00        ; #REGc=#N$00.
 $9E08 CALL $9CCE      ; Call #R$9CCE.
 $9E0B JR NZ,$9D95     ; Jump to #R$9D95 if the zero flag is not set.
 $9E0D LD A,$04        ; {Write #N$04 to *#R$A034.
 $9E0F LD ($A034),A    ; }
 $9E12 LD A,$01        ; {Write #N$01 to *#R$9D90.
 $9E14 LD ($9D90),A    ; }
 $9E17 LD A,$5C        ; {Call #R$D224 with room #N$5C: #ROOM$5C.
 $9E19 CALL $D224      ; }
 $9E1C LD (IX+$0A),$00 ; Write #N$00 to *#REGix+#N$0A.
 $9E20 LD A,$3E        ; {Call #R$D224 with room #N$3E: #ROOM$3E.
 $9E22 CALL $D224      ; }
 $9E25 LD (IX+$0A),$00 ; Write #N$00 to *#REGix+#N$0A.
 $9E29 LD HL,$9D95     ; {Write #R$9D95 to *#R$9C86.
 $9E2C LD ($9C86),HL   ; }
 $9E2F LD A,$01        ; {Write #N$01 to *#R$9D92.
 $9E31 LD ($9D92),A    ; }
 $9E34 LD A,($9D91)    ; #REGa=*#R$9D91.
 $9E37 AND A           ; Set flags.
 $9E38 LD HL,$7207     ; #REGhl=#R$7207.
 $9E3B JR NZ,$9E44     ; Jump to #R$9E44 if ?? is not equal to #REGa.
 $9E3D INC A           ; Increment #REGa by one.
 $9E3E LD ($9D91),A    ; Write #REGa to *#R$9D91.
 $9E41 LD HL,$7224     ; #REGhl=#R$7224.
*$9E44 CALL $A59F      ; Call #R$A59F.
 $9E47 RET             ; Return.

; Game status buffer entry at 9E48
g$9E48 DEFB $00
 $9E49 DEFB $00

; Routine at 9E4A
c$9E4A LD HL,$6B79    ;
 $9E4D LD A,$03       ;
 $9E4F CALL $9E60     ;
 $9E52 JR NZ,$9E74    ;
 $9E54 LD A,$02       ;
 $9E56 CALL $9E60     ;
 $9E59 JR NZ,$9E74    ;
 $9E5B LD HL,$6AF3    ;
 $9E5E JR $9E74       ;
*$9E60 CALL $D237     ;
 $9E63 LD A,($A009)   ;
 $9E66 CP (IX+$0F)    ;
 $9E69 RET            ;
 $9E6A NOP            ;
 $9E6B NOP            ;
 $9E6C LD A,($9D90)   ;
 $9E6F AND A          ;
 $9E70 RET NZ         ;
 $9E71 LD HL,$693A    ;
; This entry point is used by the routine at #R$DC6C.
*$9E74 LD A,$01       ;
 $9E76 LD ($5C3C),A   ;
 $9E79 CALL $A59F     ;
 $9E7C CALL $C306     ;
 $9E7F CALL $A296     ;
 $9E82 JP $B0AC       ;
 $9E85 NOP            ;
 $9E86 NOP            ;
 $9E87 LD A,$00       ;
 $9E89 AND A          ;
 $9E8A RET NZ         ;
 $9E8B LD HL,$6975    ;
 $9E8E CALL $A59F     ;
 $9E91 LD A,($A009)   ;
 $9E94 LD HL,$A00A    ;
 $9E97 CP (HL)        ;
 $9E98 LD HL,$69BF    ;
 $9E9B JR Z,$9E74     ;
 $9E9D LD HL,$6A26    ;
 $9EA0 JR $9E74       ;
 $9EA2 NOP            ;
 $9EA3 NOP            ;
 $9EA4 LD HL,$6A33    ;
 $9EA7 LD IX,$9973    ;
 $9EAB BIT 1,(IX+$03) ;
 $9EAF JR Z,$9E74     ;
 $9EB1 LD IX,$9981    ;
 $9EB5 BIT 1,(IX+$03) ;
 $9EB9 JR Z,$9E74     ;
 $9EBB LD HL,$6ABD    ;
 $9EBE JR $9E74       ;

; Character State: Daphne Strachan
@label=CharacterState_DaphneStrachan
g$9EC0 DEFB $00

; Character Action: Daphne Strachan
@label=CharacterAction_DaphneStrachan
c$9EC1 LD HL,$9EC0   ; #REGhl=#R$9EC0.
 $9EC4 LD C,$80      ; #REGc=#N$80.
 $9EC6 LD B,$4A      ; #REGb=#N$4A.
 $9EC8 JR $9ED7      ; Jump to #R$9ED7.

; Character State:Cook
@label=CharacterState_Cook
g$9ECA DEFB $00

; Character Action: Cook
@label=CharacterAction_Cook
c$9ECB LD HL,$9ECA   ; #REGhl=#R$9ECA.
 $9ECE JR $9ED4      ; Jump to #R$9ED4.

; Character State: Gardener
@label=CharacterState_Gardener
g$9ED0 DEFB $00

; Character Action: Gardener
@label=CharacterAction_Gardener
c$9ED1 LD HL,$9ED0     ; #REGhl=#R$9ED0.
; This entry point is used by the routine at #R$9ECB.
*$9ED4 LD BC,$0000     ; #REGbc=#N($0000,$04,$04).
; This entry point is used by the routine at #R$9EC1.
*$9ED7 LD A,(HL)       ; #REGa=*#REGhl.
 $9ED8 AND A           ; {Jump to #R$9EF2 if #REGa is zero.
 $9ED9 JR Z,$9EF2      ; }
 $9EDB LD B,A          ; #REGb=#REGa.
 $9EDC XOR A           ; #REGa=#N$00.
 $9EDD LD DE,$0000     ; #REGde=#N($0000,$04,$04).
 $9EE0 CALL $9F1E      ; Call #R$9F1E.
 $9EE3 LD A,($A036)    ; #REGa=*#R$A036.
 $9EE6 LD B,C          ; #REGb=#REGc.
 $9EE7 LD DE,$0000     ; #REGde=#N($0000,$04,$04).
 $9EEA CALL $F1C1      ; Call #R$F1C1.
 $9EED SET 6,(IX+$05)  ; Set bit 6 of *#REGix+#N$05.
 $9EF1 RET             ; Return.
; Return if it's still morning.
*$9EF2 LD A,($9FE2)    ; {Return if *#R$9FE2 is equal to ASCII #N$61 ("#CHR$61") e.g. is it
 $9EF5 CP $61          ; AM still?
 $9EF7 RET Z           ; }
; It's afternoon now.
 $9EF8 LD A,($9FE0)    ; {Return if *#R$9FE0 is not equal to #N$09.
 $9EFB CP $09          ;
 $9EFD RET NZ          ; }
 $9EFE LD DE,$01F8     ; #REGde=#N($01F8,$04,$04).
 $9F01 LD A,$1E        ; #REGa=#N$1E.
 $9F03 CALL $D2A4      ; Call #R$D2A4.
 $9F06 ADD A,E         ; #REGa+=#REGe.
 $9F07 LD E,A          ; #REGe=#REGa.
 $9F08 LD A,($A00A)    ; #REGa=*#R$A00A.
 $9F0B CALL $9F1E      ; Call #R$9F1E.
 $9F0E LD A,($A036)    ; #REGa=*#R$A036.
 $9F11 LD B,$10        ; #REGb=#N$10.
 $9F13 LD DE,$07F0     ; #REGde=#N($07F0,$04,$04).
 $9F16 CALL $F1C1      ; Call #R$F1C1.
 $9F19 RES 6,(IX+$05)  ; Reset bit 6 of *#REGix+#N$05.
 $9F1D RET             ; Return.
*$9F1E LD (HL),A       ; Write #REGa to *#REGhl.
 $9F1F LD IX,($A017)   ; #REGix=*#R$A017.
 $9F23 LD (IX+$0F),B   ; Write #REGb to *#REGix+#N$0F.
 $9F26 LD (IX+$01),$FF ; Write #N$FF to *#REGix+#N$01.
 $9F2A LD L,(IY+$06)   ; #REGl=*#REGiy+#N$06.
 $9F2D LD H,(IY+$07)   ; #REGh=*#REGiy+#N$07.
 $9F30 ADD HL,DE       ; #REGhl+=#REGde.
 $9F31 LD (IY+$06),L   ; Write #REGl to *#REGiy+#N$06.
 $9F34 LD (IY+$07),H   ; Write #REGh to *#REGiy+#N$07.
 $9F37 RET             ; Return.

; Game status buffer entry at 9F38
g$9F38 DEFB $01
 $9F39 DEFW $DD03
 $9F3B DEFB $02
 $9F3C DEFW $DD03
 $9F3E DEFB $03
 $9F3F DEFW $DD03
 $9F41 DEFB $04
 $9F42 DEFW $DD03
 $9F44 DEFB $05
 $9F45 DEFW $DD03
 $9F47 DEFB $06
 $9F48 DEFW $DD03
 $9F4A DEFB $07
 $9F4B DEFW $DD03
 $9F4D DEFB $08
 $9F4E DEFW $DD03
 $9F50 DEFB $09
 $9F51 DEFW $DD03
 $9F53 DEFB $0A
 $9F54 DEFW $DD03
 $9F56 DEFB $29
 $9F57 DEFW $DCC1
 $9F59 DEFB $17
 $9F5A DEFW $DCC1
 $9F5C DEFB $2C
 $9F5D DEFW $DCC1
 $9F5F DEFB $2A
 $9F60 DEFW $DCC1
 $9F62 DEFB $10
 $9F63 DEFW $DC8D
 $9F65 DEFB $22
 $9F66 DEFW $DC7B
 $9F68 DEFB $21
 $9F69 DEFW $DE6F
 $9F6B DEFB $13
 $9F6C DEFW $DF40
 $9F6E DEFB $14
 $9F6F DEFW $E135
 $9F71 DEFB $1A
 $9F72 DEFW $DF02
 $9F74 DEFB $12
 $9F75 DEFW $DD52
 $9F77 DEFB $1B
 $9F78 DEFW $DD52
 $9F7A DEFB $2E
 $9F7B DEFW $DD9E
 $9F7D DEFB $0B
 $9F7E DEFW $DCC1
 $9F80 DEFB $11
 $9F81 DEFW $DEC1
 $9F83 DEFB $26
 $9F84 DEFW $DEC1
 $9F86 DEFB $27
 $9F87 DEFW $DEC1
 $9F89 DEFB $15
 $9F8A DEFW $E452
 $9F8C DEFB $16
 $9F8D DEFW $E452
 $9F8F DEFB $32
 $9F90 DEFW $DDD0
 $9F92 DEFB $31
 $9F93 DEFW $DDB4
 $9F95 DEFB $25
 $9F96 DEFW $E370
 $9F98 DEFB $1C
 $9F99 DEFW $DC57
 $9F9B DEFB $23
 $9F9C DEFW $DC19
 $9F9E DEFB $30
 $9F9F DEFW $E1D6
 $9FA1 DEFB $2F
 $9FA2 DEFW $E1D6
 $9FA4 DEFB $20
 $9FA5 DEFW $9A7E
 $9FA7 DEFB $34
 $9FA8 DEFW $9FC5
 $9FAA DEFB $FF      ; Terminator.

; Game status buffer entry at 9FAB
g$9FAB DEFB $97,$E4,$D8,$E5,$FD,$E5,$AD,$E5
 $9FB3 DEFB $10,$F2,$03,$F2,$8B,$EB,$28,$ED
 $9FBB DEFB $D6,$F1,$9B,$EB,$E9,$ED,$DD,$ED
 $9FC3 DEFB $A5,$F2,$40,$00,$C9,$9F

; Routine at 9FC9
c$9FC9 LD HL,$9FCE   ; #REGhl=#R$9FCE.
 $9FCC XOR A         ; #REGa=#N$00.
 $9FCD RET           ; Return.
; Print "#TEXTTOKEN($680B)".
 $9FCE LD HL,$680B   ; #REGhl=#R$680B.
 $9FD1 JP $A59F      ; Jump to #R$A59F.

; Game status buffer entry at 9FD4
g$9FD4 DEFW $0000

; Game status buffer entry at 9FD6
g$9FD6 DEFB $00,$00,$00

; Currently Processed Character Command Position
@label=CurrentCharacter_CommandPosition
g$9FD9 DEFW $0000

; Currently Processed Character Timetable Pointer
@label=CurrentCharacter_TimetablePointer
g$9FDB DEFW $0000

; Current Time Ticker
;
; Holds a value between #N($0000,$04,$04) to #N$FFFF, and just keeps
; incrementing all throughout the game.
@label=CurrentTime_Ticker
g$9FDD DEFW $0000

; Current Time
;
; Holds the current in-game hours and minutes.
@label=CurrentTime_Minutes
g$9FDF DEFB $3B
@label=CurrentTime_Hour
 $9FE0 DEFB $07

; Current Day Of The Week
;
; Represents the current day of the week, where:
; #TABLE(default,centre,centre)
; { =h Byte | =h Day }
; #FOR$00,$06,,$04(x,{ #Nx | #STR($BF59+x*$03,$04,$03) })
; TABLE#
; .
; See #R$BF79.
@label=CurrentDayOfWeek
g$9FE1 DEFB $00

; Messaging: AM/ PM
;
; Holds just the "a" and the "p" for AM and PM, as the "m" is already in
; the string and so doesn't change.
@label=Messaging_AM_PM
g$9FE2 DEFM "a"
 $9FE3 DEFM "p"

; Game status buffer entry at 9FE4
g$9FE4 DEFB $95,$00,$00

; Game status buffer entry at 9FE7
g$9FE7 DEFW $0000
 $9FE9 DEFB $00,$00,$00,$00,$00

; Game status buffer entry at 9FEE
g$9FEE DEFW $0000
 $9FF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A000 DEFB $00,$00,$71,$09,$00,$00,$00,$00

; Game status buffer entry at A008
g$A008 DEFB $00

; Game status buffer entry at A009
g$A009 DEFB $00

; Game status buffer entry at A00A
g$A00A DEFB $00

; Game status buffer entry at A00B
g$A00B DEFB $00

; Game status buffer entry at A00C
g$A00C DEFB $00

; Game status buffer entry at A00D
g$A00D DEFW $0000

; Game status buffer entry at A00F
g$A00F DEFB $00
 $A010 DEFB $00

; Game status buffer entry at A011
g$A011 DEFB $00
 $A012 DEFB $FF

; Game status buffer entry at A013
g$A013 DEFW $0000

; Game status buffer entry at A015
g$A015 DEFW $0000

; Game status buffer entry at A017
g$A017 DEFW $0000

; Game status buffer entry at A019
g$A019 DEFB $00,$00

; Game status buffer entry at A01B
g$A01B DEFB $00,$00

; Game status buffer entry at A01D
g$A01D DEFB $00

; Game status buffer entry at A01E
g$A01E DEFB $00

; Character Script Cycles
@label=CharacterScriptCycles
g$A01F DEFB $00
 $A020 DEFB $00,$00

; Game status buffer entry at A022
g$A022 DEFW $0000
 $A024 DEFB $00,$00

; Game status buffer entry at A026
g$A026 DEFB $01

; Game status buffer entry at A027
g$A027 DEFB $00

; Game status buffer entry at A028
g$A028 DEFB $00
 $A029 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A031 DEFB $00,$00

; Game status buffer entry at A033
g$A033 DEFB $00

; Room Display Parameter
@label=RoomDisplayParameter
g$A034 DEFB $00

; Room Graphics Parameter
@label=RoomGraphicsParameter
g$A035 DEFB $00

; Currently Processed Character ID
@label=CurrentCharacter_ID
g$A036 DEFB $00

; Game status buffer entry at A037
g$A037 DEFB $00
 $A038 DEFB $00,$00,$00,$00,$00,$04,$40,$58

; Game Entry Point
;
; Used by the routines at #R$5B1B and #R$A0E7.
@label=GameEntryPoint
c$A040 XOR A         ; {Write #N$00 to #LIST { *#R$D6B8 } { *#R$A01B } LIST#
 $A041 LD ($D6B8),A  ;
 $A044 LD ($A01B),A  ; }
 $A047 DI            ; Disable interrupts.
 $A048 CALL $C14A    ; Call #R$C14A.
 $A04B LD SP,$5D80   ; #REGsp=#R$5D80.
 $A04E CALL $C415    ; Call #R$C415.
 $A051 CP $6E        ; {Jump to #R$A05B if the keypress is ASCII code #N$6E
 $A053 JR Z,$A05B    ; ("#CHR$6E").}
 $A055 CP $4E        ; Compare the keypress with ASCII code #N$4E ("#CHR$4E").
 $A057 LD A,$01      ; #REGa=#N$01.
 $A059 JR NZ,$A05C   ; Jump to #R$A05C if the keypress was not ASCII code #N$4E
                     ; ("#CHR$4E").
; The player pressed either "N" or "n".
@label=NoMeansNo
*$A05B XOR A         ; #REGa=#N$00.
*$A05C LD ($A011),A  ; Write #REGa to *#R$A011.
 $A05F LD A,R        ; {Write the contents of the Memory Refresh Register to
 $A061 LD ($A037),A  ; *#R$A037.}
; This entry point is used by the routine at #R$A0E7.
@label=Game_Initialisation
*$A064 XOR A         ; {Write #N$00 to *#R$A0DA.
 $A065 LD ($A0DA),A  ; }
@label=Game_Loop
*$A068 LD A,($A0DA)  ; {Jump to #R$A0E7 if *#R$A0DA is not zero.
 $A06B AND A         ;
 $A06C JR NZ,$A0E7   ; }
 $A06E CALL $BFD9    ; Call #R$BFD9.
 $A071 CALL $BF79    ; Call #R$BF79.
; Handler for Sherlock (as he's the first character).
 $A074 LD IY,$9860   ; #REGiy=#R$9860.
 $A078 LD A,(IY+$03) ; Fetch Sherlocks location.
 $A07B CP $32        ; {Jump to #R$A093 if Sherlock isn't in room #N$32:
 $A07D JR NZ,$A093   ; #ROOM$32.}
 $A07F CALL $C41F    ; Call #R$C41F.
 $A082 BIT 7,A       ; {Jump to #R$A093 if the keypress was not valid or if the keypress
 $A084 JR Z,$A093    ; was not #N$8D ("ENTER") - which is ASCII code #N$0D with bit 7 set for being
 $A086 CP $8D        ; a valid keypress.
 $A088 JR NZ,$A093   ; }
 $A08A LD HL,($9FDD) ; {Write *#R$9FDD to *#REGiy+#N$06/ *#REGiy+#N$07.
 $A08D LD (IY+$06),L ;
 $A090 LD (IY+$07),H ; }
; Cycle through the character timetable and run through each characters
; script according to their schedule and current game time.
@label=Handler_ProcessCharacters
*$A093 LD IY,$9860   ; Load #R$9860 into #REGiy.
@label=CharacterProcessing_Loop
*$A097 LD A,(IY+$00) ; {Jump to #R$A068 if the character ID is the termination character
 $A09A INC A         ; (#N$FF).
 $A09B JR Z,$A068    ; }
; This is a valid character so begin processing them.
 $A09D LD HL,($9FDD) ; Load *#R$9FDD into #REGhl.
 $A0A0 CALL $A0DB    ; Call #R$A0DB.
 $A0A3 JR C,$A0D1    ; Jump to #R$A0D1 if this character is not scheduled to have actions
                     ; yet.
; The currently processed character has an active schedule so process it.
 $A0A5 LD A,(IY+$00) ; Fetch the character ID and store it in #REGa.
 $A0A8 PUSH IY       ; {Stash the timetable pointer and character ID on the
 $A0AA PUSH AF       ; stack.}
 $A0AB CALL $CC37    ; Call #R$CC37.
; Repeatedly execute the characters script until it completes or
; encounters a wait condition.
@label=CharacterScript_Loop
*$A0AE POP AF        ; Restore the character ID from the stack.
 $A0AF PUSH AF       ; But keep a copy of the character ID on the stack.
 $A0B0 CALL $CC78    ; Call #R$CC78.
; Keep looping until the script for this character is finished.
 $A0B3 LD HL,($A01F) ; {Jump back to #R$A0AE until *#R$A01F is zero.
 $A0B6 LD A,L        ;
 $A0B7 OR H          ;
 $A0B8 JR Z,$A0AE    ; }
 $A0BA POP AF        ; {Restore the character ID and timetable pointer from the
 $A0BB POP IY        ; stack.}
; Set up the next schedule time for this character.
 $A0BD LD E,(IY+$06) ; {Add the characters schedule time to the current time...
 $A0C0 LD D,(IY+$07) ;
 $A0C3 ADD HL,DE     ; }
 $A0C4 LD (IY+$06),L ; {And write it back to the characters schedule.
 $A0C7 LD (IY+$07),H ; }
 $A0CA PUSH IY       ; Stash the timetable pointer on the stack briefly.
 $A0CC CALL $9C77    ; Call #R$9C77.
 $A0CF POP IY        ; Restore the timetable pointer from the stack.
; Move to the next character in the timetable.
@label=Character_Next
*$A0D1 LD DE,$0008   ; {#REGiy+=#N($0008,$04,$04).
 $A0D4 ADD IY,DE     ; }
 $A0D6 JR $A097      ; Jump to #R$A097.

; Data block at A0D8
b$A0D8 DEFB $0C,$F6
 $A0DA DEFB $00

; Check Character Schedule
;
; Used by the routine at #R$A040.
;
;   HL Current game time
; O:F Carry flag is set if the character should be skipped
@label=CheckCharacterSchedule
c$A0DB LD E,(IY+$06) ; {Fetch the characters schedule offset and store it in
 $A0DE LD D,(IY+$07) ; #REGde.}
 $A0E1 LD A,H        ; {Return if the high byte of the characters schedule doesn't match
 $A0E2 CP D          ; the current game time.
 $A0E3 RET NZ        ; }
 $A0E4 LD A,L        ; {Set the carry flag if the schedule isn't for now.
 $A0E5 CP E          ; }
 $A0E6 RET           ; Return.

; Routine at A0E7
;
; Used by the routine at #R$A040.
c$A0E7 CP $02        ; {Jump to #R$A0F1 if #REGa is equal to #N$02.
 $A0E9 JR Z,$A0F1    ; }
; This entry point is used by the routine at #R$C1D8.
*$A0EB CALL $B0D7    ; Call #R$B0D7.
 $A0EE JP $A040      ; Jump to #R$A040.
*$A0F1 CALL $B0E4    ; Call #R$B0E4.
 $A0F4 JP $A064      ; Jump to #R$A064.

; Routine at A0F7
;
; Used by the routines at #R$B77F, #R$B91F, #R$BA20, #R$BD06, #R$CD47, #R$CFB6,
; #R$DC6C and #R$E691.
;
; .
;
; This will be restored back into #REGhl by the end of the routine.
c$A0F7 PUSH HL       ; Stash #REGhl on the stack temporarily.
 $A0F8 LD L,(IX-$02) ; #REGl=*#REGix-#N$02.
 $A0FB LD H,(IX-$01) ; #REGh=*#REGix-#N$01.
 $A0FE LD A,L        ; {Is #REGhl zero?
 $A0FF OR H          ; }
; Pretty clever way of using the stack here.
 $A100 EX (SP),HL    ; Swap the *#REGsp with the object pointer, restoring #REGhl to the
                     ; original value.
 $A101 POP IX        ; Restore the object pointer into #REGix (from the stack).
 $A103 RET           ; Return.

; Routine at A104
;
; Used by the routines at #R$B015, #R$B9FA, #R$BA20, #R$CD47, #R$CFCF and
; #R$DC6C.
c$A104 INC IY        ;
 $A106 INC IY        ;
*$A108 LD L,(IY-$02) ;
 $A10B LD H,(IY-$01) ;
 $A10E AND A         ;
 $A10F PUSH HL       ;
 $A110 SBC HL,DE     ;
 $A112 JR Z,$A118    ;
 $A114 POP IY        ;
 $A116 JR $A108      ;
*$A118 POP HL        ;
 $A119 RET           ;

; Game status buffer entry at A11A
g$A11A DEFW $0000

; Routine at A11C
;
; Used by the routines at #R$B015, #R$B77F, #R$BA20, #R$CD24, #R$CDA1, #R$CF80
; and #R$DC6C.
c$A11C PUSH IY       ;
 $A11E PUSH HL       ;
 $A11F PUSH DE       ;
 $A120 PUSH BC       ;
 $A121 ADD A,$03     ;
 $A123 LD C,A        ;
 $A124 LD B,$00      ;
 $A126 LD HL,($9FE3) ;
 $A129 LD IY,$9FE3   ;
*$A12D LD A,L        ;
 $A12E OR H          ;
 $A12F JR Z,$A160    ;
 $A131 LD E,(HL)     ;
 $A132 INC HL        ;
 $A133 LD D,(HL)     ;
 $A134 INC HL        ;
 $A135 LD A,D        ;
 $A136 AND A         ;
 $A137 JR NZ,$A13D   ;
 $A139 LD A,E        ;
 $A13A CP C          ;
 $A13B JR C,$A157    ;
*$A13D BIT 0,B       ;
 $A13F JR Z,$A14E    ;
 $A141 PUSH HL       ;
 $A142 LD L,(IX-$02) ;
 $A145 LD H,(IX-$01) ;
 $A148 AND A         ;
 $A149 SBC HL,DE     ;
 $A14B POP HL        ;
 $A14C JR C,$A157    ;
*$A14E PUSH HL       ;
 $A14F POP IX        ;
 $A151 LD ($A11A),IY ;
 $A155 SET 0,B       ;
*$A157 PUSH HL       ;
 $A158 POP IY        ;
 $A15A LD E,(HL)     ;
 $A15B INC HL        ;
 $A15C LD D,(HL)     ;
 $A15D EX DE,HL      ;
 $A15E JR $A12D      ;
*$A160 BIT 0,B       ;
 $A162 JR Z,$A1AC    ;
 $A164 LD L,(IX-$02) ;
 $A167 LD H,(IX-$01) ;
 $A16A LD B,$00      ;
 $A16C AND A         ;
 $A16D SBC HL,BC     ;
 $A16F LD A,H        ;
 $A170 AND A         ;
 $A171 JR NZ,$A18A   ;
 $A173 LD A,L        ;
 $A174 CP $04        ;
 $A176 JR NC,$A18A   ;
 $A178 LD IY,($A11A) ;
 $A17C LD A,(IX+$00) ;
 $A17F LD (IY+$00),A ;
 $A182 LD A,(IX+$01) ;
 $A185 LD (IY+$01),A ;
 $A188 JR $A193      ;
*$A18A LD (IX-$02),L ;
 $A18D LD (IX-$01),H ;
 $A190 EX DE,HL      ;
 $A191 ADD IX,DE     ;
*$A193 INC IX        ;
 $A195 LD (IX-$03),C ;
 $A198 PUSH IX       ;
 $A19A POP HL        ;
 $A19B DEC HL        ;
 $A19C DEC HL        ;
 $A19D LD B,C        ;
 $A19E DEC B         ;
 $A19F XOR A         ;
*$A1A0 LD (HL),A     ;
 $A1A1 INC HL        ;
 $A1A2 DJNZ $A1A0    ;
 $A1A4 OR $01        ;
 $A1A6 POP BC        ;
 $A1A7 POP DE        ;
 $A1A8 POP HL        ;
 $A1A9 POP IY        ;
 $A1AB RET           ;
*$A1AC JP $C1D8      ;

; Routine at A1AF
;
; Used by the routines at #R$B6FD and #R$BA20.
c$A1AF PUSH HL       ; Stash #REGhl on the stack.
 $A1B0 PUSH IX       ; {#REGhl=#REGix (using the stack).
 $A1B2 POP HL        ; }
 $A1B3 JR $A1C1      ; Jump to #R$A1C1.

; Routine at A1B5
c$A1B5 LD L,(IX-$02) ;
 $A1B8 LD H,(IX-$01) ;
 $A1BB CALL $A1C7    ;
 $A1BE PUSH HL       ;
 $A1BF POP IX        ;
; This entry point is used by the routine at #R$A1AF.
*$A1C1 LD A,L        ;
 $A1C2 OR H          ;
 $A1C3 JR NZ,$A1B5   ;
 $A1C5 POP HL        ;
 $A1C6 RET           ;

; Routine at A1C7
;
; Used by the routines at #R$A1B5, #R$B77F, #R$B936, #R$B9FA, #R$CD47, #R$CFCF
; and #R$DC6C.
c$A1C7 PUSH HL       ;
 $A1C8 PUSH DE       ;
 $A1C9 PUSH IX       ;
 $A1CB POP HL        ;
 $A1CC DEC HL        ;
 $A1CD DEC HL        ;
 $A1CE DEC HL        ;
 $A1CF LD IX,$9FE3   ;
*$A1D3 LD E,(IX+$00) ;
 $A1D6 LD D,(IX+$01) ;
 $A1D9 LD A,D        ;
 $A1DA OR E          ;
 $A1DB JR Z,$A1EB    ;
 $A1DD PUSH HL       ;
 $A1DE AND A         ;
 $A1DF SBC HL,DE     ;
 $A1E1 POP HL        ;
 $A1E2 JR C,$A1EB    ;
 $A1E4 INC DE        ;
 $A1E5 INC DE        ;
 $A1E6 PUSH DE       ;
 $A1E7 POP IX        ;
 $A1E9 JR $A1D3      ;
*$A1EB LD (IX+$00),L ;
 $A1EE LD (IX+$01),H ;
 $A1F1 INC HL        ;
 $A1F2 LD (HL),$00   ;
 $A1F4 INC HL        ;
 $A1F5 LD (HL),E     ;
 $A1F6 INC HL        ;
 $A1F7 LD (HL),D     ;
 $A1F8 CALL $A20C    ;
 $A1FB JR Z,$A206    ;
 $A1FD LD L,(IX+$00) ;
 $A200 LD H,(IX+$01) ;

; Routine at A203
;
; Used by the routine at #R$E691.
c$A203 PUSH HL       ;
 $A204 POP IX        ;
; This entry point is used by the routine at #R$A1C7.
*$A206 CALL $A20C    ;
 $A209 POP DE        ;
 $A20A POP HL        ;
 $A20B RET           ;

; Routine at A20C
;
; Used by the routines at #R$A1C7 and #R$A203.
c$A20C PUSH IX       ;
 $A20E POP HL        ;
 $A20F DEC HL        ;
 $A210 DEC HL        ;
 $A211 LD E,(IX-$02) ;
 $A214 LD D,(IX-$01) ;
 $A217 ADD HL,DE     ;
 $A218 LD E,(IX+$00) ;
 $A21B LD D,(IX+$01) ;
 $A21E LD A,D        ;
 $A21F OR E          ;
 $A220 JR NZ,$A225   ;
 $A222 OR $01        ;
 $A224 RET           ;
*$A225 AND A         ;
 $A226 SBC HL,DE     ;
 $A228 RET NZ        ;
 $A229 LD L,(IX+$00) ;
 $A22C LD H,(IX+$01) ;
 $A22F PUSH BC       ;
 $A230 LD E,(HL)     ;
 $A231 INC HL        ;
 $A232 LD D,(HL)     ;
 $A233 INC HL        ;
 $A234 LD C,(HL)     ;
 $A235 INC HL        ;
 $A236 LD B,(HL)     ;
 $A237 LD L,(IX-$02) ;
 $A23A LD H,(IX-$01) ;
 $A23D ADD HL,DE     ;
 $A23E LD (IX-$02),L ;
 $A241 LD (IX-$01),H ;
 $A244 LD (IX+$00),C ;
 $A247 LD (IX+$01),B ;
 $A24A POP BC        ;
 $A24B XOR A         ;
 $A24C RET           ;

; Game status buffer entry at A24D
g$A24D DEFW $089D    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $A24F DEFW $0001    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $A251 DEFW $005A    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $A253 DEFW $080A    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $A255 DEFW $089D    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $A257 DEFW $089D    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $A259 DEFW $089D    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $A25B DEFW $080A    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".

; Routine at A25D
;
; Used by the routine at #R$A277.
c$A25D PUSH BC       ; Stash #REGbc on the stack.
 $A25E LD B,A        ; #REGb=#REGa.
 $A25F LD A,($A011)  ; {Jump to #R$A275 if *#R$A011 is zero.
 $A262 AND A         ;
 $A263 JR Z,$A275    ; }
 $A265 LD HL,($A0D8) ; #REGhl=*#R$A0D8.
 $A268 LD A,H        ; {Jump to #R$A275 if #REGhl is zero.
 $A269 OR L          ;
 $A26A JR Z,$A275    ; }
 $A26C PUSH HL       ; {#REGix=#REGhl (using the stack).
 $A26D POP IX        ; }
 $A26F LD A,B        ; #REGa=#REGb.
 $A270 CALL $D34E    ; Call #R$D34E.
 $A273 CP $FF        ; Set the zero flag if the termination character was
                     ; reached (#N$FF).
*$A275 POP BC        ; Restore #REGbc from the stack.
 $A276 RET           ; Return.

; Routine at A277
;
; Used by the routine at #R$D102.
c$A277 PUSH IX       ;
 $A279 PUSH HL       ;
 $A27A PUSH BC       ;
 $A27B PUSH AF       ;
 $A27C CALL $A25D    ;
 $A27F JR Z,$A290    ;
 $A281 CALL $A296    ;
 $A284 CALL $C129    ;
 $A287 LD L,(IX+$01) ;
 $A28A LD H,(IX+$02) ;
 $A28D CALL $F3C2    ;
*$A290 POP AF        ;
 $A291 POP BC        ;
 $A292 POP HL        ;
 $A293 POP IX        ;
 $A295 RET           ;

; Routine at A296
;
; Used by the routines at #R$9E4A, #R$A277 and #R$AFE1.
c$A296 LD B,$12      ;
*$A298 CALL $A2A2    ;
 $A29B XOR A         ;
 $A29C LD ($A019),A  ;
 $A29F DJNZ $A298    ;
 $A2A1 RET           ;

; Routine at A2A2
;
; Used by the routines at #R$A296, #R$A2E4, #R$A647, #R$CB7B, #R$D102, #R$DC6C
; and #R$E691.
c$A2A2 PUSH AF       ;
 $A2A3 LD A,$0D      ;
 $A2A5 CALL $A9B7    ;
 $A2A8 POP AF        ;
 $A2A9 RET           ;

; Game status buffer entry at A2AA
g$A2AA DEFB $00

; Routine at A2AB
;
; Used by the routines at #R$B191, #R$B39D and #R$B6FD.
c$A2AB XOR A         ;
*$A2AC LD (HL),A     ;
 $A2AD INC HL        ;
 $A2AE DJNZ $A2AC    ;
 $A2B0 RET           ;

; Routine at A2B1
;
; Used by the routines at #R$A2E4, #R$A37D and #R$C4D1.
c$A2B1 DEC A         ; Decrease #REGa by one.
 $A2B2 LD L,A        ; #REGl=#REGa.
 $A2B3 LD H,$00      ; #REGh=#N$00.
 $A2B5 ADD HL,HL     ; {Multiply #REGhl by #N$08.
 $A2B6 ADD HL,HL     ;
 $A2B7 ADD HL,HL     ; }
 $A2B8 LD DE,$8259   ; {#REGhl+=#R$8259.
 $A2BB ADD HL,DE     ; }
 $A2BC RET           ; Return.

; Routine at A2BD
;
; Used by the routines at #R$A2E4, #R$A37D, #R$B39D and #R$C4D1.
c$A2BD LD A,(IX+$05) ; #REGa=*#REGix+#N$05.
 $A2C0 RRCA          ; RRCA.
 $A2C1 RRCA          ; RRCA.
 $A2C2 RRCA          ; RRCA.
 $A2C3 RRCA          ; RRCA.
 $A2C4 AND %00001111 ; Keep only bits 0-3.
 $A2C6 LD C,A        ; #REGc=#REGa.
 $A2C7 LD A,(IX+$07) ; #REGa=*#REGix+#N$07.
 $A2CA AND %11110000 ; Keep only bits 4-7.
 $A2CC ADD A,C       ; #REGa+=#REGc.
 $A2CD LD ($A01E),A  ; Write #REGa to *#R$A01E.
 $A2D0 LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $A2D3 RRCA          ; RRCA.
 $A2D4 RRCA          ; RRCA.
 $A2D5 RRCA          ; RRCA.
 $A2D6 RRCA          ; RRCA.
 $A2D7 AND %00001111 ; Keep only bits 0-3.
 $A2D9 LD C,A        ; #REGc=#REGa.
 $A2DA LD A,(IX+$03) ; #REGa=*#REGix+#N$03.
 $A2DD AND %11110000 ; Keep only bits 4-7.
 $A2DF ADD A,C       ; #REGa+=#REGc.
 $A2E0 LD ($A01D),A  ; Write #REGa to *#R$A01D.
 $A2E3 RET           ; Return.

; Routine at A2E4
;
; Used by the routine at #R$C996.
c$A2E4 LD A,$01      ; {Write #N$01 to *#R$A2AA.
 $A2E6 LD ($A2AA),A  ; }
 $A2E9 PUSH IY       ; {Stash #REGiy, #REGbc, #REGix, #REGhl and #REGde on the
 $A2EB PUSH BC       ; stack.
 $A2EC PUSH IX       ;
 $A2EE PUSH HL       ;
 $A2EF PUSH DE       ; }
 $A2F0 LD A,($A033)  ; {Write *#R$A033 to *#R$A35D.
 $A2F3 LD ($A35D),A  ; }
 $A2F6 LD HL,($A034) ; {Write *#R$A034 to *#R$A35E.
 $A2F9 LD ($A35E),HL ; }
 $A2FC LD A,($A00C)  ; {#REGb=*#R$A00C.
 $A2FF LD B,A        ; }
 $A300 AND A         ; Set flags.
 $A301 LD A,$01      ; #REGa=#N$01.
 $A303 JR Z,$A306    ; Jump to #R$A306 if ?? is equal to #REGa.
 $A305 XOR A         ; {Write #N$00 to *#R$A027.
*$A306 LD ($A027),A  ; }
 $A309 CALL $D078    ; Call #R$D078.
 $A30C JR NC,$A31A   ; Jump to #R$A31A if ?? is greater than or equal to #REGa.
 $A30E LD A,B        ; #REGa=#REGb.
 $A30F AND A         ; Set flags.
 $A310 JR NZ,$A31A   ; Jump to #R$A31A if ?? is not equal to #REGa.
 $A312 LD HL,$68D1   ; #REGhl=#R$68D1.
 $A315 CALL $A59F    ; Call #R$A59F.
 $A318 JR $A34E      ; Jump to #R$A34E.
*$A31A LD A,($A35D)  ; #REGa=*#R$A35D.
 $A31D CALL $A2B1    ; Call #R$A2B1.
 $A320 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $A321 POP IX        ; }
 $A323 CALL $A2BD    ; Call #R$A2BD.
 $A326 LD A,($A01D)  ; #REGa=*#R$A01D.
 $A329 AND %00010000 ; Keep only bits 4.
 $A32B JR NZ,$A34E   ; Jump to #R$A34E if ?? is not equal to #REGa.
 $A32D CP B          ; {Jump to #R$A336 if #REGa is equal to #REGb.
 $A32E JR Z,$A336    ; }
 $A330 CALL $DC6C    ; Call #R$DC6C.
 $A333 CALL Z,$A2A2  ; Call #R$A2A2 if #REGb is equal to #N$00.
*$A336 CALL $A724    ; Call #R$A724.
 $A339 LD DE,$017F   ; #REGde=#N$017F.
 $A33C XOR A         ; {Jump to #R$A348 if #REGb is not equal to #N$00.
 $A33D CP B          ;
 $A33E JR NZ,$A348   ; }
 $A340 CALL $A887    ; Call #R$A887.
 $A343 CALL $A360    ; Call #R$A360.
 $A346 JR $A34B      ; Jump to #R$A34B.
*$A348 CALL $A37D    ; Call #R$A37D.
*$A34B CALL $A2A2    ; Call #R$A2A2.
*$A34E XOR A         ; {Write #N$00 to; #LIST { *#R$A2AA } { *#R$A027 } LIST#
 $A34F LD ($A2AA),A  ;
 $A352 LD ($A027),A  ; }
 $A355 POP DE        ; {Restore #REGde, #REGhl, #REGix, #REGbc and #REGiy from
 $A356 POP HL        ; the stack.
 $A357 POP IX        ;
 $A359 POP BC        ;
 $A35A POP IY        ; }
 $A35C RET           ; Return.

; Game status buffer entry at A35D
g$A35D DEFB $00
 $A35E DEFB $00
 $A35F DEFB $00

; Routine at A360
;
; Used by the routine at #R$A2E4.
c$A360 LD A,($A036)  ;
 $A363 PUSH AF       ;
 $A364 LD HL,$A35E   ;
 $A367 CP (HL)       ;
 $A368 LD A,$00      ;
 $A36A JR NZ,$A36D   ;
 $A36C LD (HL),A     ;
*$A36D LD ($A036),A  ;
 $A370 PUSH IX       ;
 $A372 CALL $A37D    ;
 $A375 POP IX        ;
 $A377 POP AF        ;
 $A378 LD ($A036),A  ;
 $A37B XOR A         ;
 $A37C RET           ;

; Routine at A37D
;
; Used by the routines at #R$A2E4 and #R$A360.
c$A37D XOR A         ;
 $A37E LD ($A028),A  ;
 $A381 LD A,($A35D)  ;
 $A384 CALL $A2B1    ;
 $A387 PUSH HL       ;
 $A388 POP IX        ;
 $A38A PUSH HL       ;
 $A38B CALL $A2BD    ;
 $A38E CALL $C493    ;
 $A391 CALL $C4B2    ;
 $A394 POP HL        ;
 $A395 LD A,($A01D)  ;
 $A398 LD C,A        ;
 $A399 PUSH HL       ;
 $A39A LD DE,$0006   ;
 $A39D ADD HL,DE     ;
 $A39E CALL $A880    ;
 $A3A1 POP HL        ;
 $A3A2 CALL $A880    ;
 $A3A5 BIT 3,C       ;
 $A3A7 JR Z,$A3E2    ;
 $A3A9 BIT 5,C       ;
 $A3AB CALL NZ,$A880 ;
 $A3AE LD A,($A01E)  ;
 $A3B1 BIT 7,A       ;
 $A3B3 CALL NZ,$A880 ;
 $A3B6 LD A,($A35E)  ;
 $A3B9 CP $FE        ;
 $A3BB JR NZ,$A3C7   ;
 $A3BD PUSH HL       ;
 $A3BE LD HL,($A02F) ;
 $A3C1 CALL $A419    ;
 $A3C4 POP HL        ;
 $A3C5 JR $A3E2      ;
*$A3C7 PUSH HL       ;
 $A3C8 LD HL,$A036   ;
 $A3CB CP (HL)       ;
 $A3CC JR NZ,$A3D6   ;
 $A3CE LD DE,$055B   ;
 $A3D1 CALL $A887    ;
 $A3D4 JR $A3E1      ;
*$A3D6 LD A,($A00F)  ;
 $A3D9 CP $05        ;
 $A3DB LD A,($A35E)  ;
 $A3DE CALL $A745    ;
*$A3E1 POP HL        ;
*$A3E2 LD A,($A35F)  ;
 $A3E5 CP $FF        ;
 $A3E7 JR Z,$A414    ;
 $A3E9 BIT 2,C       ;
 $A3EB JR Z,$A414    ;
 $A3ED BIT 5,C       ;
 $A3EF CALL Z,$A880  ;
 $A3F2 LD A,($A01E)  ;
 $A3F5 BIT 7,A       ;
 $A3F7 CALL Z,$A880  ;
 $A3FA LD A,($A35F)  ;
 $A3FD CP $FE        ;
 $A3FF JR NZ,$A409   ;
 $A401 LD HL,($A031) ;
 $A404 CALL $A419    ;
 $A407 JR $A414      ;
*$A409 LD A,($A010)  ;
 $A40C CP $05        ;
 $A40E LD A,($A35F)  ;
 $A411 CALL $A745    ;
; This entry point is used by the routines at #R$BBE5, #R$D102, #R$D526,
; #R$D60B and #R$D68C.
*$A414 LD A,$2E      ;
 $A416 JP $A9B7      ;
; This entry point is used by the routines at #R$DC6C and #R$E691.
*$A419 PUSH BC       ;
 $A41A RES 7,H       ;
 $A41C SLA L         ;
 $A41E SRL H         ;
 $A420 RR L          ;
 $A422 LD A,$20      ;
 $A424 CALL $A9B7    ;
 $A427 LD DE,$00F0   ;
 $A42A CALL $A476    ;
 $A42D AND A         ;
 $A42E JR Z,$A442    ;
 $A430 LD B,A        ;
 $A431 LD A,$60      ;
 $A433 CALL $A9B7    ;
 $A436 CALL $A490    ;
 $A439 LD A,L        ;
 $A43A OR H          ;
 $A43B JR Z,$A467    ;
 $A43D LD A,$20      ;
 $A43F CALL $A9B7    ;
*$A442 LD DE,$000C   ;
 $A445 CALL $A476    ;
 $A448 AND A         ;
 $A449 JR Z,$A469    ;
 $A44B LD B,A        ;
 $A44C CALL $A490    ;
 $A44F LD A,$2F      ;
 $A451 CALL $A9B7    ;
 $A454 LD A,L        ;
 $A455 AND A         ;
 $A456 LD B,A        ;
 $A457 JR Z,$A45E    ;
 $A459 CALL $A490    ;
 $A45C JR $A467      ;
*$A45E LD A,$2D      ;
*$A460 CALL $A9B7    ;
 $A463 XOR A         ;
 $A464 LD ($A026),A  ;
*$A467 POP BC        ;
 $A468 RET           ;
*$A469 LD B,L        ;
 $A46A CALL $A490    ;
 $A46D LD A,$44      ;
 $A46F CALL $A9B7    ;
 $A472 LD A,$2E      ;
 $A474 JR $A460      ;
*$A476 LD A,$FF      ;
*$A478 INC A         ;
 $A479 AND A         ;
 $A47A SBC HL,DE     ;
 $A47C JR NC,$A478   ;
 $A47E ADD HL,DE     ;
 $A47F RET           ;
*$A480 CALL $A476    ;
 $A483 ADD A,$30     ;
 $A485 DEC C         ;
 $A486 INC C         ;
 $A487 JR NZ,$A48D   ;
 $A489 CP $30        ;
 $A48B RET Z         ;
 $A48C INC C         ;
*$A48D JP $A9B7      ;
*$A490 PUSH HL       ;
 $A491 PUSH DE       ;
 $A492 LD L,B        ;
 $A493 LD H,$00      ;
 $A495 LD C,H        ;
 $A496 LD DE,$0064   ;
 $A499 CALL $A480    ;
 $A49C LD DE,$000A   ;
 $A49F CALL $A480    ;
 $A4A2 LD A,L        ;
 $A4A3 ADD A,$30     ;
 $A4A5 CALL $A9B7    ;
 $A4A8 POP DE        ;
 $A4A9 POP HL        ;
 $A4AA RET           ;

; Routine at A4AB
;
; Used by the routine at #R$A745.
c$A4AB PUSH DE       ; {Stash #REGix and #REGde on the stack.
 $A4AC PUSH IX       ; }
 $A4AE CALL $D224    ; Call #R$D224.
 $A4B1 PUSH IX       ; {Load the location data pointer into #REGhl (using the
 $A4B3 POP HL        ; stack).}
 $A4B4 LD DE,$0001   ; {#REGhl+=#N($0001,$04,$04).
 $A4B7 ADD HL,DE     ; }
 $A4B8 POP IX        ; {Restore #REGix and #REGde from the stack.
 $A4BA POP DE        ; }
 $A4BB RET           ; Return.

; Routine at A4BC
;
; Used by the routines at #R$A751, #R$BA20, #R$BF1C and #R$CBC2.
c$A4BC PUSH DE       ;
 $A4BD PUSH IX       ;
 $A4BF CALL $D237    ;
 $A4C2 PUSH IX       ;
 $A4C4 POP HL        ;
 $A4C5 LD DE,$0007   ;
 $A4C8 ADD HL,DE     ;
 $A4C9 POP IX        ;
 $A4CB POP DE        ;
 $A4CC RET           ;

; Routine at A4CD
;
; Used by the routine at #R$B39D.
c$A4CD PUSH DE       ;
 $A4CE PUSH HL       ;
 $A4CF PUSH IY       ;
 $A4D1 LD DE,$0006   ;
 $A4D4 ADD HL,DE     ;
 $A4D5 ADD IY,DE     ;
 $A4D7 CALL $A51B    ;
 $A4DA JR NZ,$A516   ;
 $A4DC POP IY        ;
 $A4DE POP HL        ;
 $A4DF POP DE        ;
; This entry point is used by the routines at #R$B6FD and #R$D36A.
*$A4E0 PUSH DE       ;
 $A4E1 PUSH HL       ;
 $A4E2 PUSH IY       ;
 $A4E4 CALL $A51B    ;
 $A4E7 JR NZ,$A516   ;
 $A4E9 LD A,$01      ;
 $A4EB LD ($A02E),A  ;
 $A4EE CALL $A51B    ;
 $A4F1 JR NZ,$A4FA   ;
 $A4F3 CALL $A51B    ;
 $A4F6 LD A,$00      ;
 $A4F8 JR Z,$A516    ;
*$A4FA POP IY        ;
 $A4FC POP HL        ;
 $A4FD PUSH HL       ;
 $A4FE PUSH IY       ;
 $A500 LD DE,$0004   ;
 $A503 ADD IY,DE     ;
 $A505 INC HL        ;
 $A506 INC HL        ;
 $A507 CALL $A51B    ;
 $A50A JR NZ,$A516   ;
 $A50C LD DE,$FFFC   ;
 $A50F ADD IY,DE     ;
 $A511 CALL $A51B    ;
 $A514 LD A,$01      ;
*$A516 POP IY        ;
 $A518 POP HL        ;
 $A519 POP DE        ;
 $A51A RET           ;
*$A51B PUSH HL       ;
 $A51C LD A,(HL)     ;
 $A51D INC HL        ;
 $A51E OR (HL)       ;
 $A51F JR Z,$A52E    ;
 $A521 LD A,(IY+$01) ;
 $A524 XOR (HL)      ;
 $A525 AND $0F       ;
 $A527 JR NZ,$A52E   ;
 $A529 DEC HL        ;
 $A52A LD A,(HL)     ;
 $A52B CP (IY+$00)   ;
*$A52E POP HL        ;
 $A52F INC HL        ;
 $A530 INC HL        ;
 $A531 INC IY        ;
 $A533 INC IY        ;
 $A535 RET           ;
 $A536 PUSH HL       ;
 $A537 LD HL,($A03B) ;
*$A53A CALL $C41F    ;
 $A53D BIT 7,A       ;
 $A53F JR NZ,$A553   ;
 $A541 LD A,$00      ;
*$A543 DEC A         ;
 $A544 PUSH HL       ;
 $A545 POP HL        ;
 $A546 JR NZ,$A543   ;
 $A548 DEC HL        ;
 $A549 LD A,H        ;
 $A54A OR L          ;
 $A54B JR NZ,$A53A   ;
 $A54D POP HL        ;
 $A54E PUSH HL       ;
 $A54F CALL $D9B7    ;
 $A552 XOR A         ;
*$A553 AND $7F       ;
 $A555 LD HL,$0BB8   ;
 $A558 LD ($A03B),HL ;
 $A55B POP HL        ;
 $A55C RET           ;

; Data block at A55D
w$A55D DEFW $A65D
 $A55F DEFW $A66C
 $A561 DEFW $A679
 $A563 DEFW $A702
 $A565 DEFW $A709
 $A567 DEFW $A711
 $A569 DEFW $A720
 $A56B DEFW $A72C
 $A56D DEFW $A736
 $A56F DEFW $A73B
 $A571 DEFW $A6D3
 $A573 DEFW $A75B
 $A575 DEFW $A780
 $A577 DEFW $A63A
 $A579 DEFW $A78E
 $A57B DEFW $A68C
 $A57D DEFW $A793
 $A57F DEFW $A7AC
 $A581 DEFW $A65C
 $A583 DEFW $A7B4
 $A585 DEFW $A694
 $A587 DEFW $A69C
 $A589 DEFW $A6A4
 $A58B DEFW $A6AC
 $A58D DEFW $A360
 $A58F DEFW $A771
 $A591 DEFW $A684
 $A593 DEFW $A852
 $A595 DEFW $A682
 $A597 DEFW $A63F
 $A599 DEFW $A643
 $A59B DEFW $A65A

; Game status buffer entry at A59D
g$A59D DEFW $0000

; Routine at A59F
;
; Used by the routines at #R$9CE9, #R$9D48, #R$9D95, #R$9DFF, #R$9E4A, #R$9FC9,
; #R$A2E4, #R$B54A, #R$B6DA, #R$B77F, #R$BA20, #R$BBE5, #R$CB7B, #R$CBA7,
; #R$CBC2, #R$CD95, #R$CDA1, #R$D102, #R$D1B2, #R$D4A7, #R$D590, #R$D60B,
; #R$D68C, #R$DC6C and #R$E691.
c$A59F PUSH BC       ; {Stash #REGbc, #REGde, #REGix, #REGaf and #REGhl on the
 $A5A0 PUSH DE       ; stack.
 $A5A1 PUSH IX       ;
 $A5A3 PUSH AF       ;
 $A5A4 PUSH HL       ; }
 $A5A5 LD HL,$000C   ; #REGhl=#N($000C,$04,$04).
 $A5A8 ADD HL,SP     ; #REGhl+=#REGsp.
 $A5A9 LD ($A59D),HL ; Write #REGhl to *#R$A59D.
 $A5AC POP HL        ; Restore #REGhl from the stack.
 $A5AD LD A,($A00B)  ; #REGa=*#R$A00B.
 $A5B0 AND A         ; {Jump to #R$A5B6 if #REGa is not zero.
 $A5B1 JR NZ,$A5B6   ; }
 $A5B3 LD ($A00C),A  ; Write #REGa to *#R$A00C.
*$A5B6 CALL $A5C4    ; Call #R$A5C4.
 $A5B9 POP AF        ; {Restore #REGaf, #REGix, #REGde, #REGbc and #REGhl from
 $A5BA POP IX        ; the stack.
 $A5BC POP DE        ;
 $A5BD POP BC        ;
 $A5BE POP HL        ; }
 $A5BF LD SP,($A59D) ; #REGsp=*#R$A59D.
; This entry point is used by the routine at #R$A5CD.
@label=IndirectJump
*$A5C3 JP (HL)       ; Jump to *#REGhl.

; Process Text Stream
;
; Used by the routines at #R$A59F, #R$A75B and #R$A771.
;
; HL Pointer to text data
@label=ProcessTextStream
c$A5C4 PUSH HL       ; {Transfer the pointer to the text data to be printed into #REGix
 $A5C5 POP IX        ; (using the stack).}
; Keep on looping through until all of the text has been printed.
@label=TextProcessing_Loop
*$A5C7 CALL $A5CD    ; Call #R$A5CD.
 $A5CA JR NZ,$A5C7   ; Jump back to #R$A5C7 until all the text has been
                     ; processed.
 $A5CC RET           ; Return.

; Process Text Command
;
; Used by the routines at #R$A5C4 and #R$A6D3.
;
; IX Pointer to text data
@label=ProcessTextCommand
c$A5CD LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $A5D0 BIT 7,A       ; {Jump to #R$A5F2 if bit 7 of #REGa is not set.
 $A5D2 JR Z,$A5F2    ; }
 $A5D4 AND %01111111 ; Keep only bits 0-6.
 $A5D6 LD D,A        ; #REGd=#REGa.
 $A5D7 LD E,(IX+$01) ; #REGe=*#REGix+#N$01.
 $A5DA INC IX        ; Increment #REGix by one.
 $A5DC AND %11110000 ; Keep only bits 4-7.
 $A5DE CP $30        ; {Jump to #R$A647 if #REGa is equal to #N$30.
 $A5E0 JR Z,$A647    ; }
 $A5E2 CP $20        ; {Jump to #R$A647 if #REGa is equal to #N$20.
 $A5E4 JR Z,$A647    ; }
 $A5E6 CP $60        ; {Jump to #R$A647 if #REGa is equal to #N$60.
 $A5E8 JR Z,$A647    ; }
; This entry point is used by the routine at #R$A83A.
*$A5EA CALL $A887    ; Call #R$A887.
*$A5ED INC IX        ; Increment #REGix by one.
 $A5EF OR %00000001  ; Set bit 0 to indicate there is further text to print.
 $A5F1 RET           ; Return.
*$A5F2 CP $20        ; {Jump to #R$A621 if #REGa is less than #N$20.
 $A5F4 JR C,$A621    ; }
 $A5F6 CP $60        ; {Jump to #R$A83A if #REGa is greater than #N$60.
 $A5F8 JP NC,$A83A   ; }
 $A5FB CP $40        ; {Jump to #R$A61C if #REGa is less than #N$40.
 $A5FD JR C,$A61C    ; }
 $A5FF AND %00011111 ; Keep only bits 0-4.
 $A601 INC A         ; Increment #REGa by one.
 $A602 LD B,A        ; #REGb=#REGa.
 $A603 PUSH IX       ; {#REGhl=#REGix (using the stack).
 $A605 POP HL        ; }
 $A606 INC HL        ; Increment #REGhl by one.
 $A607 LD C,$00      ; #REGc=#N$00.
*$A609 CALL $A990    ; Call #R$A990.
 $A60C CALL $A9B7    ; Call #R$A9B7.
 $A60F DJNZ $A609    ; Decrease counter by one and loop back to #R$A609 until
                     ; counter is zero.
 $A611 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $A612 POP IX        ; }
 $A614 LD A,C        ; #REGa=#REGc.
 $A615 AND A         ; Set flags.
 $A616 JR NZ,$A5ED   ; Jump to #R$A5ED if #REGhl is not equal to #REGa.
 $A618 DEC IX        ; Decrease #REGix by one.
 $A61A JR $A5ED      ; Jump to #R$A5ED.
*$A61C CALL $A9B7    ; Call #R$A9B7.
 $A61F JR $A5ED      ; Jump to #R$A5ED.
*$A621 PUSH DE       ; Stash #REGde on the stack.
 $A622 LD E,A        ; #REGe=#REGa.
 $A623 LD D,$00      ; #REGd=#N$00.
 $A625 LD HL,$A55D   ; {#REGhl=#R$A55D+(#REGde*#N$02).
 $A628 ADD HL,DE     ;
 $A629 ADD HL,DE     ; }
 $A62A LD E,(HL)     ; #REGe=*#REGhl.
 $A62B INC HL        ; Increment #REGhl by one.
 $A62C LD D,(HL)     ; #REGd=*#REGhl.
 $A62D EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A62E POP DE        ; Restore #REGde from the stack.
 $A62F CP $1D        ; {Jump to #R$A5C3 if #REGa is greater than or equal to
 $A631 JR NC,$A5C3   ; #N$1D.}
 $A633 CALL $A5C3    ; Call #R$A5C3.
 $A636 JR Z,$A5ED    ; Jump to #R$A5ED if #REGa is equal to #N$1D.
 $A638 JR $A5EA      ; Jump to #R$A5EA.

; Routine at A63A
c$A63A CALL $A9B7    ; Call #R$A9B7.
 $A63D XOR A         ; #REGa=#N$00.
 $A63E RET           ; Return.

; Routine at A63F
c$A63F LD D,$60      ; #REGd=#N$60.
 $A641 JR $A64A      ; Jump to #R$A64A.

; Routine at A643
c$A643 LD D,$30      ; #REGd=#N$30.
 $A645 JR $A64A      ; Jump to #R$A64A.

; Routine at A647
;
; Used by the routine at #R$A5CD.
c$A647 CALL $A887    ; Call #R$A887.
; This entry point is used by the routines at #R$A63F and #R$A643.
*$A64A LD A,$2E      ; #REGa=#N$2E.
 $A64C BIT 6,D       ; {Jump to #R$A657 if bit 6 of #REGd is set.
 $A64E JR NZ,$A657   ; }
 $A650 BIT 4,D       ; {Call #R$A9B7 if bit 4 of #REGd is set.
 $A652 CALL NZ,$A9B7 ; }
 $A655 BIT 4,D       ; {Call #R$A2A2 if bit 4 of #REGd is set.
*$A657 CALL NZ,$A2A2 ; }
 $A65A XOR A         ; #REGa=#N$00.
 $A65B RET           ; Return.

; Routine at A65C
c$A65C RET           ; Return.

; Routine at A65D
c$A65D XOR A         ; {Write #N$00 to *#R$A028.
 $A65E LD ($A028),A  ; }
 $A661 CALL $A66C    ; Call #R$A66C.
 $A664 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A665 LD A,H        ; {Call #R$A7BA if #REGhl is not zero.
 $A666 OR L          ;
 $A667 CALL NZ,$A7BA ; }
 $A66A XOR A         ; #REGa=#N$00.
 $A66B RET           ; Return.

; Routine at A66C
;
; Used by the routines at #R$A65D, #R$A684, #R$A709, #R$A711, #R$A771 and
; #R$A7B4.
c$A66C LD HL,($A59D) ; #REGhl=*#R$A59D.
 $A66F LD E,(HL)     ; #REGe=*#REGhl.
 $A670 INC HL        ; Increment #REGhl by one.
 $A671 LD D,(HL)     ; #REGd=*#REGhl.
 $A672 INC HL        ; Increment #REGhl by one.
 $A673 LD ($A59D),HL ; Write #REGhl to *#R$A59D.
 $A676 OR %00000001  ; Set bit 0.
 $A678 RET           ; Return.

; Routine at A679
c$A679 LD E,(IX+$01) ; #REGe=*#REGix+#N$01.
 $A67C LD D,(IX+$02) ; #REGd=*#REGix+#N$02.
 $A67F DEC DE        ; Decrease #REGde by one.
 $A680 ADD IX,DE     ; #REGix+=#REGde.
 $A682 XOR A         ; #REGa=#N$00.
 $A683 RET           ; Return.

; Routine at A684
c$A684 CALL $A66C    ; Call #R$A66C.
 $A687 PUSH DE       ; {#REGix=#REGde (using the stack).
 $A688 POP IX        ; }
 $A68A XOR A         ; #REGa=#N$00.
 $A68B RET           ; Return.

; Check Time-Period: Not 6 AM
@label=CheckTimePeriod_Not6AM
c$A68C CALL $C00C    ; Call #R$C00C.
 $A68F CP $05        ; {Return if the time-period code is 6 AM.
 $A691 RET Z         ; }
; It's anything other than 6 AM.
 $A692 JR $A6B2      ; Jump to #R$A6B2.

; Check Time-Period: Not Morning/ Midday
@label=CheckTimePeriod_NotMorningMidday
c$A694 CALL $C00C    ; Call #R$C00C.
 $A697 CP $04        ; {Return if the time-period code is morning/ midday (7 AM
 $A699 RET Z         ; - 12 PM).}
; It's anything other than morning/ midday (7 AM - 12 PM).
 $A69A JR $A6B2      ; Jump to #R$A6B2.

; Check Time-Period: Not Afternoon
@label=CheckTimePeriod_NotAfternoon
c$A69C CALL $C00C    ; Call #R$C00C.
 $A69F CP $03        ; {Return if the time-period code is afternoon (1 PM - 6
 $A6A1 RET Z         ; PM).}
; It's anything other than afternoon (1 PM - 6 PM).
 $A6A2 JR $A6B2      ; Jump to #R$A6B2.

; Check Time-Period: Not 7 PM
@label=CheckTimePeriod_Not7PM
c$A6A4 CALL $C00C    ; Call #R$C00C.
 $A6A7 CP $02        ; {Return if the time-period code is 7 PM.
 $A6A9 RET Z         ; }
; It's anything other than 7 PM.
 $A6AA JR $A6B2      ; Jump to #R$A6B2.

; Check Time-Period: Not Late Night/ Evening
@label=CheckTimePeriod_NotLateNightEvening
c$A6AC CALL $C00C    ; Call #R$C00C.
 $A6AF CP $01        ; {Return if the time-period code is late night/ evening
 $A6B1 RET Z         ; (8 PM - 5 AM).}
; This entry point is used by the routines at #R$A68C, #R$A694, #R$A69C and
; #R$A6A4.
; .
; It's daytime; 6 AM - 7 PM.
*$A6B2 INC IX        ; Increment #REGix by one.
 $A6B4 CALL $A6BB    ; Call #R$A6BB.
 $A6B7 DEC IX        ; Decrease #REGix by one.
 $A6B9 XOR A         ; #REGa=#N$00.
 $A6BA RET           ; Return.

; Routine at A6BB
;
; Used by the routines at #R$A6AC and #R$A6D3.
c$A6BB LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $A6BE BIT 7,A       ; {Jump to #R$A6CC if bit 7 of #REGa is set.
 $A6C0 JR NZ,$A6CC   ; }
 $A6C2 CP $02        ; {Jump to #R$A6CA if #REGa is equal to #N$02.
 $A6C4 JR Z,$A6CA    ; }
 $A6C6 CP $0B        ; {Jump to #R$A6CE if #REGa is not equal to #N$0B.
 $A6C8 JR NZ,$A6CE   ; }
*$A6CA INC IX        ; Increment #REGix by one.
*$A6CC INC IX        ; Increment #REGix by one.
*$A6CE INC IX        ; Increment #REGix by one.
 $A6D0 RET           ; Return.

; Game status buffer entry at A6D1
g$A6D1 DEFB $00

; Game status buffer entry at A6D2
g$A6D2 DEFB $00

; Routine at A6D3
c$A6D3 INC IX        ; Increment #REGix by one.
 $A6D5 LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $A6D8 LD ($A6D1),A  ; Write #REGa to *#R$A6D1.
 $A6DB DEC A         ; Decrease #REGa by one.
 $A6DC CALL $D2A4    ; Call #R$D2A4.
 $A6DF INC A         ; Increment #REGa by one.
 $A6E0 LD ($A6D2),A  ; Write #REGa to *#R$A6D2.
 $A6E3 INC IX        ; Increment #REGix by one.
*$A6E5 LD A,($A6D2)  ; #REGa=*#R$A6D2.
 $A6E8 LD HL,$A6D1   ; #REGhl=#R$A6D1.
 $A6EB CP (HL)       ; {Jump to #R$A6F5 if #REGa is not equal to *#REGhl.
 $A6EC JR NZ,$A6F5   ; }
 $A6EE PUSH IX       ; Stash #REGix on the stack.
 $A6F0 CALL $A5CD    ; Call #R$A5CD.
 $A6F3 POP IX        ; Restore #REGix from the stack.
*$A6F5 CALL $A6BB    ; Call #R$A6BB.
 $A6F8 LD HL,$A6D1   ; {Decrease *#R$A6D1 by one.
 $A6FB DEC (HL)      ; }
 $A6FC JR NZ,$A6E5   ; Jump back to #R$A6E5 until *#REGhl is zero.
 $A6FE DEC IX        ; Decrease #REGix by one.
 $A700 XOR A         ; #REGa=#N$00.
 $A701 RET           ; Return.

; Routine at A702
c$A702 LD DE,($A00D) ; #REGde=*#R$A00D.
 $A706 OR %00000001  ; Set bit 0.
 $A708 RET           ; Return.

; Routine at A709
c$A709 CALL $A66C    ; Call #R$A66C.
 $A70C CALL $A80E    ; Call #R$A80E.
 $A70F XOR A         ; #REGa=#N$00.
 $A710 RET           ; Return.

; Routine at A711
c$A711 PUSH IX       ; Stash #REGix on the stack.
 $A713 CALL $A66C    ; Call #R$A66C.
 $A716 PUSH DE       ; {#REGix=#REGde (using the stack).
 $A717 POP IX        ; }
 $A719 CALL $BF1C    ; Call #R$BF1C.
 $A71C POP IX        ; Restore #REGix from the stack.
 $A71E XOR A         ; #REGa=#N$00.
 $A71F RET           ; Return.

; Routine at A720
c$A720 XOR A         ; {Write #N$00 to *#R$A028.
 $A721 LD ($A028),A  ; }
; This entry point is used by the routine at #R$A2E4.
*$A724 LD A,($A036)  ; #REGa=*#R$A036.
 $A727 CALL $A82F    ; Call #R$A82F.
 $A72A XOR A         ; #REGa=#N$00.
 $A72B RET           ; Return.

; Routine at A72C
c$A72C LD A,$01      ; {Write #N$01 to *#R$A028.
 $A72E LD ($A028),A  ; }
 $A731 LD A,($A034)  ; #REGa=*#R$A034.
 $A734 JR $A751      ; Jump to #R$A751.

; Routine at A736
c$A736 CALL $A9B7    ; Call #R$A9B7.
 $A739 XOR A         ; #REGa=#N$00.
 $A73A RET           ; Return.

; Routine at A73B
c$A73B LD A,$01      ; {Write #N$01 to *#R$A028.
 $A73D LD ($A028),A  ; }
 $A740 LD A,($A035)  ; #REGa=*#R$A035.
 $A743 JR $A751      ; Jump to #R$A751.

; Routine at A745
;
; Used by the routine at #R$A37D.
c$A745 JR NC,$A751   ; Jump to #R$A751 if ?? is greater than or equal to #N$01.
 $A747 PUSH HL       ; Stash #REGhl on the stack.
 $A748 CALL $A4AB    ; Call #R$A4AB.
 $A74B CALL $A7BA    ; Call #R$A7BA.
 $A74E POP HL        ; Restore #REGhl from the stack.
 $A74F XOR A         ; #REGa=#N$00.
 $A750 RET           ; Return.

; Routine at A751
;
; Used by the routines at #R$A72C, #R$A73B, #R$A745 and #R$A82F.
c$A751 PUSH HL       ; Stash #REGhl on the stack.
 $A752 CALL $A4BC    ; Call #R$A4BC.
 $A755 CALL $A7C5    ; Call #R$A7C5.
 $A758 POP HL        ; Restore #REGhl from the stack.
 $A759 XOR A         ; #REGa=#N$00.
 $A75A RET           ; Return.

; Routine at A75B
c$A75B PUSH IX       ; Stash #REGix on the stack.
 $A75D POP HL        ; Restore #REGhl from the stack.
 $A75E PUSH HL       ; Stash #REGhl on the stack.
 $A75F LD E,(IX+$01) ; #REGe=*#REGix+#N$01.
 $A762 LD D,(IX+$02) ; #REGd=*#REGix+#N$02.
 $A765 ADD HL,DE     ; #REGhl+=#REGde.
 $A766 CALL $A5C4    ; Call #R$A5C4.
 $A769 POP IX        ; Restore #REGix from the stack.
 $A76B INC IX        ; Increment #REGix by one.
 $A76D INC IX        ; Increment #REGix by one.
 $A76F XOR A         ; #REGa=#N$00.
 $A770 RET           ; Return.

; Routine at A771
c$A771 PUSH IX       ; Stash #REGix on the stack.
 $A773 CALL $A66C    ; Call #R$A66C.
 $A776 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A777 LD A,L        ; {Call #R$A5C4 if #REGhl is not zero.
 $A778 OR H          ;
 $A779 CALL NZ,$A5C4 ; }
 $A77C POP IX        ; Restore #REGix from the stack.
 $A77E XOR A         ; #REGa=#N$00.
 $A77F RET           ; Return.

; Routine at A780
c$A780 LD A,($A036)  ; #REGa=*#R$A036.
; This entry point is used by the routine at #R$A78E.
*$A783 LD DE,$0414   ; #REGde=#N$0414.
 $A786 AND A         ; {Return if #REGa is not zero.
 $A787 RET NZ        ; }
 $A788 LD DE,$09F2   ; #REGde=#N$09F2.
 $A78B OR %00000001  ; Set bit 0.
 $A78D RET           ; Return.

; Routine at A78E
c$A78E LD A,($A034)  ; #REGa=*#R$A034.
 $A791 JR $A783      ; Jump to #R$A783.

; Routine at A793
c$A793 LD A,($A036)  ; #REGa=*#R$A036.
 $A796 EX AF,AF'     ; Exchange the shadow #REGaf register with the #REGaf
                     ; register.
 $A797 XOR A         ; #REGa=#N$00.
; This entry point is used by the routine at #R$A7AC.
*$A798 LD ($A028),A  ; Write #REGa to *#R$A028.
 $A79B EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $A79C PUSH AF       ; Stash #REGaf on the stack.
 $A79D CALL $A82F    ; Call #R$A82F.
 $A7A0 POP AF        ; Restore #REGaf from the stack.
 $A7A1 AND A         ; Set flags.
 $A7A2 LD DE,$0485   ; #REGde=#N$0485.
 $A7A5 RET NZ        ; Return if ?? is not equal to #REGa.
 $A7A6 LD DE,$007A   ; #REGde=#N($007A,$04,$04).
 $A7A9 OR %00000001  ; Set bit 0.
 $A7AB RET           ; Return.

; Routine at A7AC
c$A7AC LD A,($A034)  ; #REGa=*#R$A034.
; This entry point is used by the routine at #R$A7B4.
*$A7AF EX AF,AF'     ; Exchange the shadow #REGaf register with the #REGaf
                     ; register.
 $A7B0 LD A,$01      ; #REGa=#N$01.
 $A7B2 JR $A798      ; Jump to #R$A798.

; Routine at A7B4
c$A7B4 CALL $A66C    ; Call #R$A66C.
 $A7B7 LD A,D        ; #REGa=#REGd.
 $A7B8 JR $A7AF      ; Jump to #R$A7AF.
; This entry point is used by the routines at #R$A65D and #R$A745.
*$A7BA PUSH IY       ; Stash #REGiy on the stack.
 $A7BC PUSH HL       ; {#REGiy=#REGhl (using the stack).
 $A7BD POP IY        ; }
 $A7BF CALL $D405    ; Call #R$D405.
 $A7C2 POP IY        ; Restore #REGiy from the stack.
 $A7C4 RET           ; Return.
; This entry point is used by the routine at #R$A751.
*$A7C5 PUSH IY       ; Stash #REGiy on the stack.
 $A7C7 PUSH HL       ; {#REGiy=#REGhl (using the stack).
 $A7C8 POP IY        ; }
 $A7CA CALL $D3E8    ; Call #R$D3E8.
 $A7CD POP IY        ; Restore #REGiy from the stack.
 $A7CF RET           ; Return.

; Routine at A7D0
;
; Used by the routines at #R$A80E, #R$D3E8 and #R$D405.
c$A7D0 XOR A         ; {Write #N$00 to *#R$A7EA.
 $A7D1 LD ($A7EA),A  ; }
 $A7D4 BIT 7,D       ; {Jump to #R$A7EB if bit 7 of #REGd is not set.
 $A7D6 JR Z,$A7EB    ; }
 $A7D8 LD A,E        ; #REGa=#REGe.
 $A7D9 LD HL,$09EE   ; #REGhl=#N$09EE.
 $A7DC CP L          ; {Jump to #R$A7E4 if #REGa is not equal to #REGl.
 $A7DD JR NZ,$A7E4   ; }
 $A7DF LD A,D        ; #REGa=#REGd.
 $A7E0 AND %00001111 ; Keep only bits 0-3.
 $A7E2 CP H          ; {Return if #REGa is equal to #REGh.
 $A7E3 RET Z         ; }
*$A7E4 LD A,$01      ; {Write #N$01 to *#R$A7EA.
 $A7E6 LD ($A7EA),A  ; }
 $A7E9 RET           ; Return.

; Game status buffer entry at A7EA
g$A7EA DEFB $00

; Routine at A7EB
;
; Used by the routine at #R$A7D0.
c$A7EB LD HL,$A24D   ; #REGhl=#R$A24D.
 $A7EE LD A,($A027)  ; {#REGe=*#R$A027.
 $A7F1 LD E,A        ; }
 $A7F2 LD A,($A2AA)  ; #REGa=*#R$A2AA.
 $A7F5 OR E          ; Set the bits from #REGe.
 $A7F6 JR Z,$A7FB    ; Jump to #R$A7FB if #REGa is equal to #REGe.
 $A7F8 LD HL,$A255   ; #REGhl=#R$A255.
*$A7FB LD A,D        ; #REGa=#REGd.
 $A7FC RRCA          ; RRCA.
 $A7FD RRCA          ; RRCA.
 $A7FE RRCA          ; RRCA.
 $A7FF AND %00011110 ; Keep only bits 1-4.
 $A801 PUSH DE       ; Stash #REGde on the stack.
 $A802 LD E,A        ; #REGe=#REGa.
; This entry point is used by the routine at #R$F1C1.
*$A803 LD D,$00      ; #REGd=#N$00.
 $A805 ADD HL,DE     ; #REGhl+=#REGde.
 $A806 LD E,(HL)     ; #REGe=*#REGhl.
 $A807 INC HL        ; Increment #REGhl by one.
 $A808 LD D,(HL)     ; #REGd=*#REGhl.
 $A809 CALL $A887    ; Call #R$A887.
 $A80C POP DE        ; Restore #REGde from the stack.
 $A80D RET           ; Return.

; Routine at A80E
;
; Used by the routine at #R$A709.
c$A80E PUSH DE       ; Stash #REGde on the stack.
 $A80F CALL $A7D0    ; Call #R$A7D0.
 $A812 POP DE        ; Restore #REGde from the stack.
 $A813 LD A,$50      ; #REGa=#N$50.
; This entry point is used by the routine at #R$D405.
*$A815 PUSH AF       ; Stash #REGaf on the stack.
 $A816 LD A,D        ; #REGa=#REGd.
 $A817 AND %00001111 ; Keep only bits 0-3.
 $A819 LD D,A        ; #REGd=#REGa.
 $A81A POP AF        ; Restore #REGaf from the stack.
 $A81B OR D          ; Set the bits from #REGd.
 $A81C LD D,A        ; #REGd=#REGa.
 $A81D AND %00001111 ; Keep only bits 0-3.
 $A81F OR E          ; Set the bits from #REGe.
 $A820 RET Z         ; Return if the result is zero.
 $A821 CALL $A887    ; Call #R$A887.
 $A824 LD A,($A7EA)  ; #REGa=*#R$A7EA.
 $A827 PUSH HL       ; Stash #REGhl on the stack.
 $A828 LD HL,$A026   ; #REGhl=#R$A026.
 $A82B OR (HL)       ; Set the bits from *#REGhl.
 $A82C LD (HL),A     ; Write #REGa to *#REGhl.
 $A82D POP HL        ; Restore #REGhl from the stack.
 $A82E RET           ; Return.

; Routine at A82F
;
; Used by the routines at #R$A720 and #R$A793.
c$A82F CP $FF        ; {Jump to #R$A751 if #REGa is not equal to #N$FF.
 $A831 JP NZ,$A751   ; }
 $A834 LD DE,$080E   ; #REGde=#N$080E.
 $A837 JP $A887      ; Jump to #R$A887.

; Routine at A83A
;
; Used by the routine at #R$A5CD.
c$A83A CALL $A840    ; Call #R$A840.
 $A83D JP $A5EA      ; Jump to #R$A5EA.

; Get Common Word
;
; Used by the routines at #R$A83A and #R$B77F.
;
; A Letter reference
; DE Common word address
@label=GetCommonWord
c$A840 SUB $60       ; Subtract #N$60 from the letter byte - anything higher than #N$60
                     ; signifies the letter is a "common word".
 $A842 LD E,A        ; {Load the letter reference into #REGde.
 $A843 LD D,$00      ; }
 $A845 LD HL,$67B7   ; {#REGhl=#R$67B7+(#REGde*#N$02).
 $A848 ADD HL,DE     ;
 $A849 ADD HL,DE     ; }
 $A84A LD E,(HL)     ; Fetch the LSB of the word reference and store it in
                     ; #REGe.
 $A84B INC HL        ; {Fetch the MSB of the word reference, add #N$50 and store it in
 $A84C LD A,(HL)     ; #REGd.
 $A84D ADD A,$50     ;
 $A84F LD D,A        ; }
 $A850 RET           ; Return.

; Data block at A851
b$A851 DEFB $00

; Routine at A852
c$A852 LD A,($A851)  ;
 $A855 XOR $01       ;
 $A857 LD ($A851),A  ;
 $A85A XOR A         ;
 $A85B RET           ;
 $A85C LD D,E        ;
 $A85D NOP           ;
 $A85E NOP           ;
 $A85F NOP           ;
 $A860 LD B,L        ;
 $A861 LD D,E        ;
 $A862 NOP           ;
 $A863 NOP           ;
 $A864 LD C,C        ;
 $A865 LD B,L        ;
 $A866 LD D,E        ;
 $A867 NOP           ;
 $A868 EX AF,AF'     ;
 $A869 LD C,C        ;
 $A86A LD B,L        ;
 $A86B LD D,E        ;
 $A86C LD B,H        ;
 $A86D NOP           ;
 $A86E NOP           ;
 $A86F NOP           ;
 $A870 LD C,C        ;
 $A871 LD C,(HL)     ;
 $A872 LD B,A        ;
 $A873 NOP           ;
 $A874 LD B,L        ;
 $A875 LD B,H        ;
 $A876 NOP           ;
 $A877 NOP           ;
 $A878 EX AF,AF'     ;
 $A879 LD C,C        ;
 $A87A LD C,(HL)     ;
 $A87B LD B,A        ;
 $A87C LD C,H        ;
 $A87D LD E,C        ;
 $A87E NOP           ;
 $A87F NOP           ;

; Routine at A880
;
; Used by the routines at #R$A37D and #R$D5D3.
c$A880 LD E,(HL)     ; #REGe=*#REGhl.
 $A881 INC HL        ; Increment #REGhl by one.
 $A882 LD A,(HL)     ; #REGa=*#REGhl.
 $A883 INC HL        ; Increment #REGhl by one.
 $A884 AND %00001111 ; Keep only bits 0-3.
 $A886 LD D,A        ; #REGd=#REGa.
; This entry point is used by the routines at #R$A2E4, #R$A37D, #R$A5CD,
; #R$A647, #R$A7EB, #R$A80E, #R$A82F, #R$BF1C, #R$CB7B, #R$D102, #R$D526,
; #R$D5D3, #R$D60B and #R$D68C.
*$A887 LD A,($5C3C)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3C.html">TV-FLAG</a>.)
 $A88A AND A         ; {Return if #REGa is zero.
 $A88B RET Z         ; }
 $A88C LD ($A022),DE ; Write #REGde to *#R$A022.
 $A890 LD A,D        ; #REGa=#REGd.
 $A891 AND %00001111 ; Keep only bits 0-3.
 $A893 OR E          ; Set the bits from #REGe.
 $A894 RET Z         ; Return if #REGhl is equal to #REGe.
 $A895 PUSH IX       ; {Stash #REGix, #REGhl, #REGbc and #REGde on the stack.
 $A897 PUSH HL       ;
 $A898 PUSH BC       ;
 $A899 PUSH DE       ; }
 $A89A LD A,$20      ; #REGa=#N$20.
 $A89C CALL $A9B7    ; Call #R$A9B7.
 $A89F LD A,D        ; #REGa=#REGd.
 $A8A0 AND %11110000 ; Keep only bits 4-7.
 $A8A2 LD C,A        ; {Compare #REGc with #N$70.
 $A8A3 CP $70        ; }
 $A8A5 LD A,$01      ; #REGa=#N$01.
 $A8A7 JR NZ,$A8AC   ; Jump to #R$A8AC if #REGc is not equal to #N$70.
 $A8A9 LD ($A026),A  ; Write #REGa to *#R$A026.
*$A8AC LD A,D        ; #REGa=#REGd.
 $A8AD AND %00001111 ; Keep only bits 0-3.
 $A8AF LD D,A        ; #REGd=#REGa.
 $A8B0 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A8B1 PUSH HL       ; Stash #REGhl on the stack.
 $A8B2 LD A,H        ; #REGa=#REGh.
 $A8B3 OR C          ; Set the bits from #REGc.
 $A8B4 LD H,A        ; #REGh=#REGa.
 $A8B5 LD ($A022),HL ; Write #REGhl to *#R$A022.
 $A8B8 POP HL        ; Restore #REGhl from the stack.
 $A8B9 PUSH BC       ; Stash #REGbc on the stack.
 $A8BA LD IX,$5D80   ; #REGix=#R$5D80.
 $A8BE LD B,$5F      ; #REGb=#N$5F.
*$A8C0 INC B         ; Increment #REGb by one.
 $A8C1 LD A,(IX+$01) ; {Jump to #R$A8CF if *#REGix+#N$01 is less than #REGh.
 $A8C4 CP H          ;
 $A8C5 JR C,$A8CF    ; }
 $A8C7 JR NZ,$A8D9   ; Jump to #R$A8D9 if *#REGix+#N$01 is not equal to #REGh.
 $A8C9 LD A,(IX+$00) ; {Jump to #R$A8D9 if *#REGix+#N$00 is greater than or
 $A8CC CP L          ; equal to #REGl.
 $A8CD JR NC,$A8D9   ; }
*$A8CF INC IX        ; {Increment #REGix by two.
 $A8D1 INC IX        ; }
 $A8D3 LD A,B        ; {Jump to #R$A8C0 if #REGb is not equal to #N$7B.
 $A8D4 CP $7B        ;
 $A8D6 JR NZ,$A8C0   ; }
 $A8D8 INC B         ; Increment #REGb by one.
*$A8D9 JR Z,$A8E0    ; Jump to #R$A8E0 if #REGb is zero.
*$A8DB DEC IX        ; {Decrease #REGix by two.
 $A8DD DEC IX        ; }
 $A8DF DEC B         ; Decrease #REGb by one.
*$A8E0 LD E,(IX+$00) ; #REGe=*#REGix+#N$00.
 $A8E3 LD D,(IX+$01) ; #REGd=*#REGix+#N$01.
 $A8E6 LD A,D        ; {Jump to #R$A8DB until #REGde is zero.
 $A8E7 OR E          ;
 $A8E8 JR Z,$A8DB    ; }
 $A8EA LD A,B        ; #REGa=#REGb.
 $A8EB CALL $A9B7    ; Call #R$A9B7.
 $A8EE LD BC,$5DBF   ; {#REGhl+=#N$5DBF.
 $A8F1 ADD HL,BC     ; }
 $A8F2 PUSH HL       ; Stash #REGhl on the stack.
 $A8F3 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A8F4 ADD HL,BC     ; #REGhl+=#REGbc.
*$A8F5 PUSH HL       ; Stash #REGhl on the stack.
 $A8F6 AND A         ; {#REGhl-=#REGde (with carry).
 $A8F7 SBC HL,DE     ; }
 $A8F9 POP HL        ; Restore #REGhl from the stack.
 $A8FA PUSH AF       ; Stash #REGaf on the stack.
 $A8FB CALL $A95B    ; Call #R$A95B.
 $A8FE POP AF        ; Restore #REGaf from the stack.
 $A8FF JR NZ,$A8F5   ; Jump to #R$A8F5 if #REGb is not equal to #REGa.
 $A901 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $A902 POP BC        ; }
 $A903 LD A,C        ; {Jump to #R$A91C if #REGc is equal to #N$50.
 $A904 CP $50        ;
 $A906 JR Z,$A91C    ; }
 $A908 CP $40        ; {Jump to #R$A919 if #REGc is equal to #N$40.
 $A90A JR Z,$A919    ; }
 $A90C CP $10        ; Compare #REGc with #N$10.
 $A90E LD A,($A034)  ; #REGa=*#R$A034.
 $A911 JR Z,$A916    ; Jump to #R$A916 if #REGc is equal to #N$10.
 $A913 LD A,($A036)  ; {Jump to #R$A91C if *#R$A036 is zero.
*$A916 AND A         ;
 $A917 JR Z,$A91C    ; }
*$A919 CALL $A92F    ; Call #R$A92F.
*$A91C LD HL,$5C42   ; #HTML(#REGhl=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C42.html">NEWPPC</a>.)
*$A91F LD A,(HL)     ; #REGa=*#REGhl.
 $A920 AND A         ; {Jump to #R$A929 if #REGa is zero.
 $A921 JR Z,$A929    ; }
 $A923 CALL $A9B7    ; Call #R$A9B7.
 $A926 INC HL        ; Increment #REGhl by one.
 $A927 JR $A91F      ; Jump to #R$A91F.
*$A929 POP DE        ; {Restore #REGde, #REGbc, #REGhl and #REGix from the
 $A92A POP BC        ; stack.
 $A92B POP HL        ;
 $A92C POP IX        ; }
 $A92E RET           ; Return.

; Routine at A92F
;
; Used by the routine at #R$A880.
c$A92F LD A,(HL)       ;
 $A930 AND $0F         ;
 $A932 CP $0F          ;
 $A934 RET Z           ;
 $A935 RLCA            ;
 $A936 RLCA            ;
 $A937 LD L,A          ;
 $A938 LD H,$00        ;
 $A93A LD BC,$A85C     ;
 $A93D ADD HL,BC       ;
 $A93E LD B,$04        ;
*$A940 LD A,(HL)       ;
 $A941 INC HL          ;
 $A942 LD (IX+$00),A   ;
 $A945 INC IX          ;
 $A947 DJNZ $A940      ;
 $A949 LD (IX+$00),B   ;
 $A94C RET             ;
 $A94D PUSH IX         ;
 $A94F PUSH HL         ;
 $A950 CALL $A95B      ;
 $A953 EX (SP),HL      ;
 $A954 CALL $A92F      ;
 $A957 POP HL          ;
 $A958 POP IX          ;
 $A95A RET             ;
; This entry point is used by the routine at #R$A880.
*$A95B PUSH BC         ;
 $A95C LD IX,$5C42     ;
 $A960 INC HL          ;
 $A961 LD A,(HL)       ;
 $A962 BIT 7,A         ;
 $A964 INC HL          ;
 $A965 JR Z,$A969      ;
 $A967 INC HL          ;
 $A968 INC HL          ;
*$A969 PUSH AF         ;
 $A96A AND $70         ;
 $A96C JR Z,$A974      ;
*$A96E INC IX          ;
 $A970 SUB $10         ;
 $A972 JR NZ,$A96E     ;
*$A974 LD C,$00        ;
 $A976 POP AF          ;
 $A977 AND $0F         ;
 $A979 JR Z,$A986      ;
 $A97B LD B,A          ;
*$A97C CALL $A990      ;
 $A97F LD (IX+$00),A   ;
 $A982 INC IX          ;
 $A984 DJNZ $A97C      ;
*$A986 LD (IX+$00),$00 ;
 $A98A LD A,C          ;
 $A98B POP BC          ;
 $A98C AND A           ;
 $A98D RET Z           ;
 $A98E INC HL          ;
 $A98F RET             ;

; Routine at A990
;
; Used by the routines at #R$A5CD, #R$A92F and #R$B77F.
c$A990 PUSH DE       ; Stash #REGde on the stack.
 $A991 LD D,(HL)     ; #REGd=*#REGhl.
 $A992 INC HL        ; Increment #REGhl by one.
 $A993 LD E,(HL)     ; #REGe=*#REGhl.
 $A994 DEC HL        ; Decrease #REGhl by one.
 $A995 LD A,C        ; {Jump to #R$A9A0 if #REGc is zero.
 $A996 AND A         ;
 $A997 JR Z,$A9A0    ; }
*$A999 SLA E         ; Shift #REGe left (with carry).
 $A99B RL D          ; Rotate #REGd left.
 $A99D DEC A         ; Decrease #REGa by one.
 $A99E JR NZ,$A999   ; Jump to #R$A999 if #REGa is not equal to #REGa.
*$A9A0 LD A,C        ; #REGa=#REGc.
 $A9A1 ADD A,$05     ; #REGa+=#N$05.
 $A9A3 CP $08        ; {Jump to #R$A9AA if #REGa is less than #N$08.
 $A9A5 JR C,$A9AA    ; }
 $A9A7 SUB $08       ; #REGa-=#N$08.
 $A9A9 INC HL        ; Increment #REGhl by one.
*$A9AA LD C,A        ; #REGc=#REGa.
 $A9AB LD A,D        ; #REGa=#REGd.
 $A9AC POP DE        ; Restore #REGde from the stack.
 $A9AD RRCA          ; RRCA.
 $A9AE RRCA          ; RRCA.
 $A9AF RRCA          ; RRCA.
 $A9B0 AND %00011111 ; Keep only bits 0-4.
 $A9B2 ADD A,$60     ; #REGa+=#N$60.
 $A9B4 RET           ; Return.

; Game status buffer entry at A9B5
g$A9B5 DEFW $5C0B

; Routine at A9B7
;
; Used by the routines at #R$A2A2, #R$A37D, #R$A5CD, #R$A63A, #R$A647, #R$A736,
; #R$A880, #R$BBE5, #R$D102, #R$D526, #R$DC6C and #R$E691.
c$A9B7 PUSH AF       ;
 $A9B8 LD A,($A027)  ;
 $A9BB AND A         ;
 $A9BC JR NZ,$AA10   ;
 $A9BE POP AF        ;
 $A9BF PUSH AF       ;
 $A9C0 PUSH HL       ;
 $A9C1 LD HL,($A9B5) ;
 $A9C4 CP $20        ;
 $A9C6 JR Z,$A9DF    ;
 $A9C8 CP $0D        ;
 $A9CA JR Z,$A9DF    ;
 $A9CC CP $22        ;
 $A9CE JR Z,$A9DF    ;
 $A9D0 CP $08        ;
 $A9D2 JR NZ,$A9D7   ;
 $A9D4 DEC HL        ;
 $A9D5 JR $A9D9      ;
*$A9D7 LD (HL),A     ;
 $A9D8 INC HL        ;
*$A9D9 LD ($A9B5),HL ;
 $A9DC POP HL        ;
 $A9DD POP AF        ;
 $A9DE RET           ;
*$A9DF PUSH DE       ;
 $A9E0 LD DE,$5C0B   ;
 $A9E3 AND A         ;
 $A9E4 SBC HL,DE     ;
 $A9E6 JR Z,$AA0B    ;
 $A9E8 LD A,($C1F5)  ;
 $A9EB CP L          ;
 $A9EC PUSH AF       ;
 $A9ED JR NC,$A9F4   ;
 $A9EF LD A,$0D      ;
 $A9F1 CALL $AA14    ;
*$A9F4 PUSH BC       ;
 $A9F5 LD B,L        ;
 $A9F6 LD HL,$5C0B   ;
 $A9F9 LD ($A9B5),HL ;
*$A9FC LD A,(HL)     ;
 $A9FD CALL $AA14    ;
 $AA00 INC HL        ;
 $AA01 DJNZ $A9FC    ;
 $AA03 POP BC        ;
 $AA04 POP AF        ;
 $AA05 JR NZ,$AA0B   ;
 $AA07 XOR A         ;
 $AA08 LD ($A025),A  ;
*$AA0B POP DE        ;
 $AA0C POP HL        ;
 $AA0D POP AF        ;
 $AA0E JR $AA14      ;
*$AA10 POP AF        ;
 $AA11 JP $C1E1      ;
*$AA14 CP $41        ;
 $AA16 JR C,$AA1E    ;
 $AA18 CP $5B        ;
 $AA1A JR NC,$AA1E   ;
 $AA1C OR $20        ;
*$AA1E PUSH AF       ;
 $AA1F LD A,($A025)  ;
 $AA22 AND A         ;
 $AA23 JR NZ,$AA2A   ;
 $AA25 POP AF        ;
 $AA26 CP $20        ;
 $AA28 RET Z         ;
 $AA29 PUSH AF       ;
*$AA2A LD A,$01      ;
 $AA2C LD ($A025),A  ;
 $AA2F POP AF        ;
 $AA30 PUSH AF       ;
 $AA31 CP $0D        ;
 $AA33 JR NZ,$AA3B   ;
 $AA35 XOR A         ;
 $AA36 LD ($A025),A  ;
 $AA39 JR $AA6D      ;
*$AA3B CP $22        ;
 $AA3D JR NZ,$AA46   ;
 $AA3F LD A,$20      ;
 $AA41 CALL $C1E1    ;
 $AA44 JR $AA4A      ;
*$AA46 CP $2E        ;
 $AA48 JR NZ,$AA51   ;
*$AA4A LD A,$01      ;
 $AA4C LD ($A026),A  ;
 $AA4F JR $AA6D      ;
*$AA51 CP $61        ;
 $AA53 JR C,$AA6D    ;
 $AA55 CP $7B        ;
 $AA57 JR NC,$AA6D   ;
 $AA59 LD A,($A851)  ;
 $AA5C AND A         ;
 $AA5D JR NZ,$AA65   ;
 $AA5F LD A,($A026)  ;
 $AA62 AND A         ;
 $AA63 JR Z,$AA6D    ;
*$AA65 XOR A         ;
 $AA66 LD ($A026),A  ;
 $AA69 POP AF        ;
 $AA6A AND $5F       ;
 $AA6C PUSH AF       ;
*$AA6D POP AF        ;
 $AA6E JP $C1E1      ;

; Game status buffer entry at AA71
g$AA71 DEFB $99,$9A,$CB,$9A,$A3,$E1,$22,$E0
 $AA79 DEFB $03,$E0,$9D,$DE,$AF,$DE,$32,$E4
 $AA81 DEFB $0A,$E4,$28,$E3,$C7,$E2,$EA,$E3
 $AA89 DEFB $8D,$E0,$F4,$9A,$E1,$9A,$A0,$E0
 $AA91 DEFB $F2,$E0,$04,$E1,$E0,$E0,$7E,$DF
 $AA99 DEFB $A7,$DF,$7B,$E1,$F0,$DF,$EA,$DF
 $AAA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AAA9 DEFB $00,$00,$00

; Game status buffer entry at AAAC
g$AAAC DEFB $00,$00,$00,$00,$00,$00,$AF,$32
 $AAB4 DEFB $1A,$A0,$32,$12,$A0,$1E,$FF,$16
 $AABC DEFB $C0,$7B,$F6,$C7,$5F,$CD,$6A,$AE
*$AAC4 DEFB $3A,$1B,$A0,$A7,$28,$07,$3E,$01
 $AACC DEFB $32,$24,$A0,$CB,$9B,$D5,$3A,$24
 $AAD4 DEFB $A0,$A7,$20,$39,$32,$A7,$AA,$2A
 $AADC DEFB $2B,$A0,$E5,$CD,$24,$AC,$20,$24
 $AAE4 DEFB $3A,$A7,$AA,$A7,$20,$1E,$3E,$02
 $AAEC DEFB $32,$24,$A0,$E1,$FD,$E5,$E1,$11
 $AAF4 DEFB $18,$00,$19,$11,$AC,$AA,$EB,$01
 $AAFC DEFB $06,$00,$ED,$B0,$2A,$29,$A0,$22
 $AB04 DEFB $2B,$A0,$18,$09,$3E,$01,$32,$24
 $AB0C DEFB $A0,$E1,$22,$2B,$A0,$D1,$AF,$32
 $AB14 DEFB $A7,$AA,$CD,$91,$AB,$38,$73,$28
 $AB1C DEFB $2A,$FE,$90,$CA,$B3,$AF,$FE,$A0
 $AB24 DEFB $CA,$CC,$AC,$CB,$5B,$28,$21,$3A
 $AB2C DEFB $12,$A0,$A7,$20,$5D,$3A,$1B,$A0
 $AB34 DEFB $A7,$20,$15,$3A,$2D,$A0,$FE,$C0
 $AB3C DEFB $20,$50,$3E,$B0,$BA,$20,$4B,$3E
 $AB44 DEFB $02,$A7,$C9,$CB,$5B,$CA,$FB,$AC
 $AB4C DEFB $2A,$29,$A0,$22,$2B,$A0,$CD,$24
 $AB54 DEFB $AC,$38,$37,$20,$07,$CD,$A6,$AC
 $AB5C DEFB $28,$30,$18,$EC,$FE,$B0,$CA,$57
 $AB64 DEFB $AD,$FE,$A0,$CA,$CC,$AC,$FE,$90
 $AB6C DEFB $CA,$B3,$AF,$2A,$29,$A0,$22,$2B
 $AB74 DEFB $A0,$3A,$24,$A0,$FE,$02,$20,$12
 $AB7C DEFB $CD,$F3,$AB,$38,$0D,$20,$0B,$2A
 $AB84 DEFB $29,$A0,$22,$2B,$A0,$16,$A0,$C3
 $AB8C DEFB $CC,$AC,$C3,$67,$AF,$3A,$24,$A0
 $AB94 DEFB $FE,$02,$28,$5B,$7B,$F6,$07,$5F
 $AB9C DEFB $CD,$7F,$AE,$FE,$E0,$28,$F9,$FE
 $ABA4 DEFB $30,$20,$10,$CB,$4B,$28,$0A,$CB
 $ABAC DEFB $8B,$FD,$71,$00,$FD,$70,$01,$18
 $ABB4 DEFB $E7,$37,$C9,$FE,$00,$20,$0E,$CB
 $ABBC DEFB $53,$28,$F6,$CB,$93,$FD,$71,$02
 $ABC4 DEFB $FD,$70,$03,$18,$D3,$FE,$40,$20
 $ABCC DEFB $04,$CB,$83,$18,$D6,$FE,$20,$20
 $ABD4 DEFB $1A,$CB,$4B,$20,$CE,$CB,$43,$20
 $ABDC DEFB $DE,$CB,$93,$CB,$C3,$FD,$7E,$00
 $ABE4 DEFB $FD,$77,$02,$FD,$7E,$01,$FD,$77
 $ABEC DEFB $03,$18,$BC,$B7,$CB,$4B,$C9,$CD
 $ABF4 DEFB $7F,$AE,$FE,$80,$CC,$7F,$AE,$78
 $ABFC DEFB $E6,$0F,$47,$21,$4D,$99,$7E,$23
 $AC04 DEFB $B6,$28,$0D,$78,$BE,$20,$06,$2B
 $AC0C DEFB $79,$BE,$28,$07,$23,$23,$18,$EE
 $AC14 DEFB $F6,$01,$C9,$FD,$71,$00,$FD,$70
 $AC1C DEFB $01,$CB,$8B,$CD,$7F,$AE,$AF,$C9
 $AC24 DEFB $21,$A8,$AA,$06,$0A,$CD,$AB,$A2
 $AC2C DEFB $7B,$F6,$34,$5F,$CD,$7F,$AE,$FE
 $AC34 DEFB $80,$20,$0A,$CB,$63,$28,$04,$CB
 $AC3C DEFB $A3,$18,$F1,$37,$C9,$FE,$10,$28
 $AC44 DEFB $04,$FE,$70,$20,$1C,$CB,$63,$28
 $AC4C DEFB $F2,$CB,$53,$28,$EE,$3A,$A7,$AA
 $AC54 DEFB $FE,$03,$30,$E7,$3C,$32,$A7,$AA
 $AC5C DEFB $CD,$8F,$AC,$20,$DE,$CB,$AB,$18
 $AC64 DEFB $CB,$FE,$60,$20,$0F,$CB,$53,$28
 $AC6C DEFB $D2,$CB,$A3,$CB,$AB,$CD,$94,$AC
 $AC74 DEFB $20,$C9,$18,$B8,$FE,$F0,$28,$04
 $AC7C DEFB $FE,$50,$20,$0B,$7B,$E6,$CB,$5F
 $AC84 DEFB $ED,$43,$AC,$AA,$CD,$7F,$AE,$A7
 $AC8C DEFB $CB,$6B,$C9,$21,$A8,$AA,$18,$03
 $AC94 DEFB $21,$AE,$AA,$7E,$23,$B6,$28,$05
 $AC9C DEFB $23,$7E,$23,$B6,$C0,$70,$2B,$71
 $ACA4 DEFB $AF,$C9,$CB,$73,$28,$08,$CB,$B3
 $ACAC DEFB $D5,$11,$04,$00,$18,$09,$CB,$7B
 $ACB4 DEFB $C8,$CB,$BB,$D5,$11,$0E,$00,$FD
 $ACBC DEFB $E5,$E1,$19,$11,$A8,$AA,$EB,$01
 $ACC4 DEFB $0A,$00,$ED,$B0,$D1,$F6,$01,$C9
*$ACCC DEFB $CB,$9B,$D5,$CD,$7F,$AE,$FE,$A0
 $ACD4 DEFB $28,$F9,$2A,$29,$A0,$22,$A1,$AA
 $ACDC DEFB $22,$2B,$A0,$D1,$7B,$32,$A3,$AA
 $ACE4 DEFB $FD,$22,$A4,$AA,$3A,$12,$A0,$32
 $ACEC DEFB $A6,$AA,$3A,$1A,$A0,$FE,$02,$20
 $ACF4 DEFB $62,$FD,$CB,$01,$F6,$18,$5C,$3A
 $ACFC DEFB $24,$A0,$FE,$02,$20,$21,$CB,$73
 $AD04 DEFB $C2,$4C,$AB,$CB,$F3,$CB,$DB,$FD
 $AD0C DEFB $E5,$D9,$E1,$11,$08,$00,$19,$E5
 $AD14 DEFB $11,$10,$00,$19,$D1,$EB,$01,$06
 $AD1C DEFB $00,$ED,$B0,$D9,$C3,$4C,$AB,$3A
 $AD24 DEFB $1B,$A0,$A7,$28,$05,$CB,$DB,$C3
 $AD2C DEFB $4C,$AB,$2A,$A1,$AA,$22,$2B,$A0
 $AD34 DEFB $16,$B0,$3A,$A3,$AA,$5F,$3A,$A6
 $AD3C DEFB $AA,$32,$12,$A0,$FD,$2A,$A4,$AA
 $AD44 DEFB $FD,$6E,$FE,$FD,$66,$FF,$E5,$DD
 $AD4C DEFB $E1,$CD,$AF,$A1,$AF,$FD,$77,$FE
 $AD54 DEFB $FD,$77,$FF,$3A,$1A,$A0,$3D,$21
 $AD5C DEFB $12,$A0,$3D,$7A,$20,$04,$FE,$A0
 $AD64 DEFB $28,$01,$34,$FE,$A0,$CA,$BD,$AA
 $AD6C DEFB $3A,$1B,$A0,$A7,$28,$62,$FD,$2A
 $AD74 DEFB $F0,$9F,$CD,$A9,$AE,$FD,$7E,$01
 $AD7C DEFB $E6,$7F,$FD,$B6,$00,$20,$35,$3A
 $AD84 DEFB $1B,$A0,$5F,$16,$00,$2A,$F0,$9F
 $AD8C DEFB $FD,$7E,$01,$E6,$80,$23,$B6,$77
 $AD94 DEFB $2B,$19,$11,$08,$00,$FD,$19,$FD
 $AD9C DEFB $E5,$D1,$CD,$59,$AE,$CD,$59,$AE
 $ADA4 DEFB $28,$09,$D5,$E5,$1B,$1B,$CD,$59
 $ADAC DEFB $AE,$E1,$D1,$CD,$59,$AE,$FD,$2A
 $ADB4 DEFB $F0,$9F,$18,$04,$FD,$21,$F2,$9F
 $ADBC DEFB $FD,$6E,$FE,$FD,$66,$FF,$E5,$DD
 $ADC4 DEFB $E1,$DD,$6E,$FE,$DD,$66,$FF,$FD
 $ADCC DEFB $75,$FE,$FD,$74,$FF,$CD,$C7,$A1
 $ADD4 DEFB $FD,$21,$F2,$9F,$3A,$12,$A0,$47
 $ADDC DEFB $C5,$CD,$B6,$AE,$78,$A7,$28,$3A
 $ADE4 DEFB $CD,$B6,$AE,$3A,$24,$A0,$FE,$02
 $ADEC DEFB $20,$23,$FD,$E5,$E1,$11,$18,$00
 $ADF4 DEFB $19,$E5,$16,$06,$AF,$B6,$23,$15
 $ADFC DEFB $20,$FB,$E1,$A7,$20,$0F,$EB,$DD
 $AE04 DEFB $E5,$E1,$C5,$01,$18,$00,$09,$01
 $AE0C DEFB $06,$00,$ED,$B0,$C1,$FD,$7E,$01
 $AE14 DEFB $E6,$7F,$FD,$B6,$00,$CC,$F1,$AE
 $AE1C DEFB $18,$C2,$C1,$CD,$EA,$AE,$CD,$C5
 $AE24 DEFB $AE,$78,$A7,$CA,$57,$AE,$CD,$C5
 $AE2C DEFB $AE,$FD,$7E,$12,$FD,$B6,$13,$20
 $AE34 DEFB $F0,$FD,$7E,$00,$DD,$BE,$00,$20
 $AE3C DEFB $E8,$FD,$7E,$01,$DD,$BE,$01,$20
 $AE44 DEFB $E0,$DD,$7E,$0E,$DD,$B6,$0F,$28
 $AE4C DEFB $D8,$D9,$11,$0E,$00,$CD,$27,$AF
 $AE54 DEFB $C3,$25,$AE,$AF,$C9,$7E,$23,$B6
 $AE5C DEFB $2B,$20,$02,$1A,$77,$23,$13,$20
 $AE64 DEFB $02,$1A,$77,$23,$13,$C9,$CD,$EA
 $AE6C DEFB $AE,$3E,$1E,$CD,$1C,$A1,$DD,$E5
 $AE74 DEFB $E1,$FD,$75,$FE,$FD,$74,$FF,$E5
 $AE7C DEFB $FD,$E1,$C9,$2A,$2B,$A0,$22,$29
 $AE84 DEFB $A0,$7A,$32,$2D,$A0,$7E,$57,$01
 $AE8C DEFB $00,$00,$23,$FE,$E0,$28,$0C,$FE
 $AE94 DEFB $F0,$28,$08,$FE,$90,$28,$04,$FE
 $AE9C DEFB $80,$30,$05,$7E,$47,$23,$4E,$23
 $AEA4 DEFB $22,$2B,$A0,$7A,$C9,$E5,$FD,$6E
 $AEAC DEFB $FE,$FD,$66,$FF,$7C,$B5,$E3,$FD
 $AEB4 DEFB $E1,$C9,$05,$FD,$E5,$DD,$E1,$CD
 $AEBC DEFB $A9,$AE,$FD,$CB,$01,$76,$20,$F3
 $AEC4 DEFB $C9,$05,$FD,$E5,$DD,$E1,$E5,$D5
 $AECC DEFB $FD,$E5,$D1,$FD,$21,$F0,$9F,$CD
 $AED4 DEFB $04,$A1,$FD,$E5,$E1,$11,$F2,$9F
 $AEDC DEFB $A7,$ED,$52,$28,$06,$FD,$CB,$01
 $AEE4 DEFB $76,$20,$E5,$D1,$E1,$C9,$FD,$21
 $AEEC DEFB $00,$00,$C3,$C6,$AE,$D9,$DD,$7E
 $AEF4 DEFB $01,$E6,$7F,$FD,$B6,$01,$FD,$77
 $AEFC DEFB $01,$DD,$7E,$00,$FD,$77,$00,$D9
 $AF04 DEFB $DD,$7E,$04,$DD,$B6,$05,$C8,$3E
 $AF0C DEFB $0E,$CD,$38,$AF,$C0,$D9,$FD,$E5
 $AF14 DEFB $E1,$11,$12,$00,$19,$E5,$11,$F6
 $AF1C DEFB $FF,$19,$D1,$01,$06,$00,$ED,$B0
 $AF24 DEFB $11,$04,$00,$CD,$52,$AF,$FD,$7E
 $AF2C DEFB $02,$FD,$B6,$03,$11,$02,$00,$CC
 $AF34 DEFB $56,$AF,$D9,$C9,$D5,$C5,$E5,$06
 $AF3C DEFB $0A,$FD,$E5,$E1,$5F,$16,$00,$19
 $AF44 DEFB $AF,$B6,$23,$10,$FC,$E1,$C1,$D1
 $AF4C DEFB $A7,$C9,$0E,$06,$18,$06,$0E,$0A
 $AF54 DEFB $18,$02,$0E,$02,$FD,$E5,$E1,$19
 $AF5C DEFB $E5,$DD,$E5,$E1,$19,$D1,$06,$00
 $AF64 DEFB $ED,$B0,$C9,$3E,$01,$A7,$C9,$00
 $AF6C DEFB $00,$49,$B0,$40,$00,$33,$B0,$5E
 $AF74 DEFB $01,$1C,$B0,$D5,$06,$FF,$AF,$BD
 $AF7C DEFB $05,$0B,$B0,$07,$05,$A3,$B0,$75
 $AF84 DEFB $07,$C6,$B0,$60,$06,$9A,$B0,$E3
 $AF8C DEFB $03,$35,$B1,$88,$04,$51,$B1,$F6
 $AF94 DEFB $06,$A3,$B0,$B3,$08,$51,$B1,$99
 $AF9C DEFB $08,$FD,$B0,$E3,$03,$3F,$B1,$88
 $AFA4 DEFB $04,$5B,$B1,$B3,$08,$5B,$B1,$C5
 $AFAC DEFB $00,$FA,$AF,$AE,$08,$FA,$AF,$21
 $AFB4 DEFB $6B,$AF,$3A,$24,$A0,$FE,$02,$20
 $AFBC DEFB $03,$21,$9B,$AF,$D5,$1E,$0C,$20
 $AFC4 DEFB $02,$1E,$06,$7E,$23,$B9,$20,$04
 $AFCC DEFB $7E,$B8,$28,$0A,$23,$23,$23,$1D
 $AFD4 DEFB $20,$F1,$D1,$C3,$67,$AF,$23,$5E
 $AFDC DEFB $23,$56,$EB,$D1,$E9

; Routine at AFE1
;
; Used by the routines at #R$B015, #R$B0AC and #R$B0FD.
c$AFE1 BIT 1,E       ;
 $AFE3 RET NZ        ;
 $AFE4 POP HL        ;
 $AFE5 JP $AF67      ;
; This entry point is used by the routine at #R$B015.
*$AFE8 BIT 1,E       ;
 $AFEA RET Z         ;
 $AFEB LD A,($A012)  ;
 $AFEE AND A         ;
 $AFEF JR NZ,$AFF6   ;
 $AFF1 LD A,($A01B)  ;
 $AFF4 AND A         ;
 $AFF5 RET NZ        ;
*$AFF6 POP HL        ;
 $AFF7 JP $AF67      ;
 $AFFA LD D,$A0      ;
 $AFFC JP $ACCC      ;
 $AFFF CALL $AFE1    ;
 $B002 CALL $C03B    ;
 $B005 JR NZ,$B015   ;
 $B007 LD A,$01      ;
 $B009 JR $B012      ;
 $B00B CALL $AFE1    ;
 $B00E CALL $A296    ;
 $B011 XOR A         ;
*$B012 LD ($A008),A  ;

; Routine at B015
;
; Used by the routines at #R$AFE1 and #R$B0AC.
c$B015 LD A,($A02D)   ;
 $B018 LD D,A         ;
 $B019 JP $AAC4       ;
 $B01C LD A,($A01A)   ;
 $B01F CP $01         ;
 $B021 JP NZ,$AF67    ;
 $B024 LD A,$02       ;
 $B026 LD ($A01A),A   ;
 $B029 CALL $AE6A     ;
 $B02C SET 6,(IY+$01) ;
 $B030 JP $AB52       ;
 $B033 CALL $AFE8     ;
 $B036 LD A,($A01A)   ;
 $B039 AND A          ;
 $B03A JP NZ,$AF67    ;
 $B03D LD A,$01       ;
 $B03F LD ($A01A),A   ;
 $B042 SET 7,(IY+$01) ;
 $B046 JP $AB52       ;
 $B049 BIT 1,E        ;
 $B04B JR Z,$B058     ;
 $B04D LD HL,$088B    ;
 $B050 LD (IY+$00),L  ;
 $B053 LD (IY+$01),H  ;
 $B056 RES 1,E        ;
*$B058 PUSH HL        ;
 $B059 PUSH DE        ;
 $B05A PUSH IY        ;
 $B05C PUSH IX        ;
 $B05E LD IY,$9FEC    ;
 $B062 LD DE,$0000    ;
 $B065 CALL $A104     ;
 $B068 LD A,$02       ;
 $B06A CALL $A11C     ;
 $B06D LD HL,($A02B)  ;
 $B070 LD (IX+$00),L  ;
 $B073 LD (IX+$01),H  ;
 $B076 PUSH IX        ;
 $B078 POP HL         ;
 $B079 LD (IY-$02),L  ;
 $B07C LD (IY-$01),H  ;
 $B07F POP IX         ;
 $B081 POP IY         ;
 $B083 POP DE         ;
 $B084 POP HL         ;
*$B085 CALL $AE7F     ;
 $B088 CP $90         ;
 $B08A JR NZ,$B085    ;
 $B08C LD A,B         ;
 $B08D AND $0F        ;
 $B08F OR C           ;
 $B090 JR NZ,$B085    ;
 $B092 LD HL,($A029)  ;
 $B095 LD (HL),$C0    ;
 $B097 JP $AB52       ;
 $B09A CALL $AFE1     ;
 $B09D CALL $C415     ;
 $B0A0 JP $B015       ;
 $B0A3 CALL $AFE1     ;
 $B0A6 CALL $B0AC     ;
 $B0A9 JP $B015       ;

; Routine at B0AC
;
; Used by the routines at #R$9E4A and #R$B015.
c$B0AC LD HL,$0000   ; {Write #N($0000,$04,$04) to *#R$9FDD.
 $B0AF LD ($9FDD),HL ; }
 $B0B2 LD IX,$9860   ; #REGix=#R$9860.
 $B0B6 LD (IX+$06),L ; Write #REGl to *#REGix+#N$06.
 $B0B9 LD (IX+$07),H ; Write #REGh to *#REGix+#N$07.
 $B0BC INC HL        ; Increment #REGhl by one.
 $B0BD LD ($A01F),HL ; Write #REGhl to *#R$A01F.
 $B0C0 LD A,L        ; {Write #REGl to *#R$A0DA.
 $B0C1 LD ($A0DA),A  ; }
 $B0C4 AND A         ; Set flags.
 $B0C5 RET           ; Return.
 $B0C6 CALL $AFE1    ; Call #R$AFE1.
 $B0C9 LD HL,$0001   ; {Write #N($0001,$04,$04) to *#R$A01F.
 $B0CC LD ($A01F),HL ; }
 $B0CF LD A,$02      ; {Write #N$02 to *#R$A0DA.
 $B0D1 LD ($A0DA),A  ; }
 $B0D4 JP $B015      ; Jump to #R$B015.

; Routine at B0D7
;
; Used by the routine at #R$A0E7.
c$B0D7 CALL $B0EE    ; Call #R$B0EE.
 $B0DA CALL $C0DF    ; Call #R$C0DF.
 $B0DD JR NC,$B0D7   ; Jump back to #R$B0D7 if there was a tape loading error to try
                     ; again.
 $B0DF LD IY,($9FD4) ; #REGiy=*#R$9FD4.
 $B0E3 RET           ; Return.

; Routine at B0E4
;
; Used by the routine at #R$A0E7.
c$B0E4 LD ($9FD4),IY ; Write #REGiy to #R$9FD4.
 $B0E8 CALL $B0EE    ; Call #R$B0EE.
 $B0EB JP $C040      ; Jump to #R$C040.

; Routine at B0EE
;
; Used by the routines at #R$B0D7 and #R$B0E4.
c$B0EE LD IX,$840B   ; #REGix=#R$840B.
 $B0F2 LD HL,$A01F   ; #REGhl=#R$A01F.
 $B0F5 LD DE,$840B   ; #REGde=#R$840B.
 $B0F8 AND A         ; {#REGhl-=#REGde (with carry).
 $B0F9 SBC HL,DE     ; }
 $B0FB EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $B0FC RET           ; Return.

; Routine at B0FD
c$B0FD LD BC,$0008    ;
 $B100 BIT 3,E        ;
 $B102 JR NZ,$B107    ;
 $B104 CALL $AEC6     ;
*$B107 PUSH IY        ;
 $B109 POP HL         ;
 $B10A ADD HL,BC      ;
 $B10B PUSH DE        ;
 $B10C PUSH HL        ;
 $B10D BIT 3,E        ;
 $B10F JR NZ,$B118    ;
 $B111 SET 3,E        ;
 $B113 CALL $AEA9     ;
 $B116 JR $B11F       ;
*$B118 LD HL,$A012    ;
 $B11B INC (HL)       ;
 $B11C CALL $AE6A     ;
*$B11F PUSH IY        ;
 $B121 POP HL         ;
 $B122 LD BC,$0018    ;
 $B125 ADD HL,BC      ;
 $B126 POP DE         ;
 $B127 EX DE,HL       ;
 $B128 LD BC,$0006    ;
 $B12B LDIR           ;
 $B12D POP DE         ;
*$B12E LD A,E         ;
 $B12F OR $C7         ;
 $B131 LD E,A         ;
 $B132 JP $AAD1       ;
 $B135 CALL $AFE1     ;
 $B138 LD A,$02       ;
 $B13A LD ($A024),A   ;
 $B13D JR $B14B       ;
 $B13F BIT 3,E        ;
 $B141 JR Z,$B14B     ;
 $B143 PUSH DE        ;
 $B144 CALL $AEA9     ;
 $B147 CALL $AE6A     ;
 $B14A POP DE         ;
*$B14B SET 7,(IY+$19) ;
 $B14F JR $B12E       ;
 $B151 CALL $AFE1     ;
 $B154 LD A,$02       ;
 $B156 LD ($A024),A   ;
 $B159 JR $B167       ;
 $B15B BIT 3,E        ;
 $B15D JR Z,$B167     ;
 $B15F PUSH DE        ;
 $B160 CALL $AEA9     ;
 $B163 CALL $AE6A     ;
 $B166 POP DE         ;
*$B167 SET 6,(IY+$19) ;
 $B16B JR $B12E       ;

; Game status buffer entry at B16D
g$B16D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B175 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B17D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B185 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B18D DEFB $00,$00,$00,$00

; Routine at B191
;
; Used by the routine at #R$B936.
c$B191 LD A,$FF      ;
 $B193 LD ($A035),A  ;
 $B196 LD ($A034),A  ;
 $B199 LD HL,$B16D   ;
 $B19C LD B,$11      ;
 $B19E CALL $A2AB    ;
 $B1A1 CALL $B39D    ;
 $B1A4 JR NZ,$B1AB   ;
 $B1A6 LD HL,$B84C   ;
 $B1A9 XOR A         ;
 $B1AA RET           ;
*$B1AB LD A,$01      ;
 $B1AD PUSH IX       ;
 $B1AF POP HL        ;
 $B1B0 LD DE,$8259   ;
 $B1B3 SBC HL,DE     ;
 $B1B5 JR Z,$B1BF    ;
 $B1B7 LD DE,$0008   ;
*$B1BA INC A         ;
 $B1BB SBC HL,DE     ;
 $B1BD JR NZ,$B1BA   ;
*$B1BF LD ($A033),A  ;
 $B1C2 LD ($B18E),IX ;
 $B1C6 CP $2E        ;
 $B1C8 JR NZ,$B1DD   ;
 $B1CA LD HL,$B16D   ;
 $B1CD BIT 0,(HL)    ;
 $B1CF LD HL,$A002   ;
 $B1D2 LD DE,$B172   ;
 $B1D5 LD BC,$0006   ;
 $B1D8 JR Z,$B1DB    ;
 $B1DA EX DE,HL      ;
*$B1DB LDIR          ;
*$B1DD CALL $C493    ;
 $B1E0 CALL $C4B2    ;
 $B1E3 LD A,($A01C)  ;
 $B1E6 AND A         ;
 $B1E7 JR NZ,$B1F2   ;
 $B1E9 LD A,($B39C)  ;
 $B1EC LD ($A01C),A  ;
 $B1EF CALL $B34F    ;
*$B1F2 LD A,($A01E)  ;
 $B1F5 AND $10       ;
 $B1F7 LD ($B190),A  ;
 $B1FA JR Z,$B200    ;
 $B1FC XOR A         ;
 $B1FD LD ($A01C),A  ;
*$B200 XOR A         ;
 $B201 LD ($A00B),A  ;
 $B204 LD A,($A01D)  ;
 $B207 AND $0C       ;
 $B209 JR NZ,$B213   ;
*$B20B CALL $C929    ;
 $B20E RET NZ        ;
 $B20F LD HL,$B863   ;
 $B212 RET           ;
*$B213 CALL $B387    ;
 $B216 JR NZ,$B280   ;
 $B218 LD A,($A01C)  ;
 $B21B AND A         ;
 $B21C JR NZ,$B224   ;
 $B21E CALL $B308    ;
 $B221 AND A         ;
 $B222 JR Z,$B259    ;
*$B224 CALL $B4C1    ;
 $B227 JR Z,$B244    ;
 $B229 CALL $C929    ;
 $B22C JR Z,$B224    ;
 $B22E LD A,($A034)  ;
 $B231 LD ($B184),A  ;
 $B234 LD HL,$B170   ;
 $B237 INC (HL)      ;
 $B238 LD A,($B190)  ;
 $B23B AND A         ;
 $B23C JR NZ,$B244   ;
 $B23E LD A,($A01C)  ;
 $B241 AND A         ;
 $B242 JR Z,$B224    ;
*$B244 LD A,($B184)  ;
 $B247 LD ($A034),A  ;
 $B24A LD A,($B170)  ;
 $B24D AND A         ;
 $B24E JR Z,$B259    ;
 $B250 CP $01        ;
 $B252 JR Z,$B20B    ;
 $B254 LD HL,$B5E2   ;
 $B257 XOR A         ;
 $B258 RET           ;
*$B259 LD A,($A033)  ;
 $B25C CP $2E        ;
 $B25E JR NZ,$B27B   ;
 $B260 LD A,($A01C)  ;
 $B263 AND A         ;
 $B264 JR NZ,$B27B   ;
 $B266 LD HL,$B16D   ;
 $B269 BIT 0,(HL)    ;
 $B26B JR NZ,$B27B   ;
 $B26D LD HL,$0000   ;
 $B270 LD ($B172),HL ;
 $B273 LD ($B174),HL ;
 $B276 LD ($B176),HL ;
 $B279 JR $B213      ;
*$B27B LD HL,$B65F   ;
 $B27E XOR A         ;
 $B27F RET           ;
*$B280 LD A,($A01C)  ;
 $B283 AND A         ;
 $B284 JR NZ,$B292   ;
 $B286 CALL $B308    ;
 $B289 AND A         ;
 $B28A JR Z,$B259    ;
 $B28C CALL $B32D    ;
 $B28F AND A         ;
 $B290 JR Z,$B303    ;
*$B292 CALL $B4C1    ;
 $B295 JR Z,$B2B7    ;
 $B297 CALL $B2DF    ;
 $B29A LD A,($B171)  ;
 $B29D CP $01        ;
 $B29F JR NZ,$B292   ;
 $B2A1 LD A,($A034)  ;
 $B2A4 LD ($B184),A  ;
 $B2A7 LD HL,$B170   ;
 $B2AA INC (HL)      ;
 $B2AB LD A,($B190)  ;
 $B2AE AND A         ;
 $B2AF JR NZ,$B2B7   ;
 $B2B1 LD A,($A01C)  ;
 $B2B4 AND A         ;
 $B2B5 JR Z,$B292    ;
*$B2B7 LD A,($B184)  ;
 $B2BA LD ($A034),A  ;
 $B2BD LD A,($B170)  ;
 $B2C0 AND A         ;
 $B2C1 JR Z,$B259    ;
 $B2C3 CP $01        ;
 $B2C5 JR NZ,$B2DA   ;
 $B2C7 CALL $B2DF    ;
 $B2CA LD A,($B171)  ;
 $B2CD AND A         ;
 $B2CE JR Z,$B303    ;
 $B2D0 CP $01        ;
 $B2D2 JP Z,$B20B    ;
 $B2D5 LD HL,$B5D3   ;
 $B2D8 XOR A         ;
 $B2D9 RET           ;
*$B2DA LD HL,$B5E2   ;
 $B2DD XOR A         ;
 $B2DE RET           ;
*$B2DF CALL $B36B    ;
*$B2E2 CALL $B568    ;
 $B2E5 JR Z,$B2FC    ;
 $B2E7 CALL $C929    ;
 $B2EA JR Z,$B2E2    ;
 $B2EC LD A,($A035)  ;
 $B2EF LD ($B185),A  ;
 $B2F2 LD HL,$B171   ;
 $B2F5 INC (HL)      ;
 $B2F6 LD A,($B190)  ;
 $B2F9 AND A         ;
 $B2FA JR Z,$B2E2    ;
*$B2FC LD A,($B185)  ;
 $B2FF LD ($A035),A  ;
 $B302 RET           ;
*$B303 LD HL,$B6AE   ;
 $B306 XOR A         ;
 $B307 RET           ;
*$B308 LD HL,($B17E) ;
 $B30B PUSH HL       ;
 $B30C LD A,($B4A2)  ;
 $B30F PUSH AF       ;
 $B310 CALL $B34F    ;
*$B313 CALL $B4C1    ;
 $B316 JR Z,$B31E    ;
 $B318 LD HL,$B170   ;
 $B31B INC (HL)      ;
 $B31C JR $B313      ;
*$B31E POP AF        ;
 $B31F LD ($B4A2),A  ;
 $B322 LD HL,$B170   ;
 $B325 LD A,(HL)     ;
 $B326 LD (HL),$00   ;
 $B328 POP HL        ;
 $B329 LD ($B17E),HL ;
 $B32C RET           ;
*$B32D LD HL,($B180) ;
 $B330 PUSH HL       ;
 $B331 CALL $B36B    ;
 $B334 LD A,($B549)  ;
 $B337 PUSH AF       ;
*$B338 CALL $B568    ;
 $B33B JR Z,$B343    ;
 $B33D LD HL,$B171   ;
 $B340 INC (HL)      ;
 $B341 JR $B338      ;
*$B343 POP AF        ;
 $B344 LD ($B549),A  ;
 $B347 LD A,($B171)  ;
 $B34A POP HL        ;
 $B34B LD ($B180),HL ;
 $B34E RET           ;
*$B34F XOR A         ;
 $B350 LD ($B170),A  ;
 $B353 LD A,$FF      ;
 $B355 LD ($B4A2),A  ;
 $B358 CALL $D04F    ;
 $B35B LD A,($A00F)  ;
 $B35E CP $07        ;
 $B360 JR NC,$B366   ;
 $B362 LD IX,$0000   ;
*$B366 LD ($B17E),IX ;
 $B36A RET           ;
*$B36B XOR A         ;
 $B36C LD ($B171),A  ;
 $B36F LD A,$FF      ;
 $B371 LD ($B549),A  ;
 $B374 CALL $D04F    ;
 $B377 LD A,($A010)  ;
 $B37A CP $07        ;
 $B37C JR NC,$B382   ;
 $B37E LD IX,$0000   ;
*$B382 LD ($B180),IX ;
 $B386 RET           ;
*$B387 LD A,($A01D)  ;
 $B38A BIT 2,A       ;
 $B38C RET Z         ;
 $B38D LD HL,$B16E   ;
 $B390 BIT 0,(HL)    ;
 $B392 RET NZ        ;
 $B393 BIT 1,A       ;
 $B395 JR NZ,$B39A   ;
 $B397 OR $01        ;
 $B399 RET           ;
*$B39A XOR A         ;
 $B39B RET           ;

; Game status buffer entry at B39C
g$B39C DEFB $00

; Routine at B39D
;
; Used by the routine at #R$B191.
c$B39D PUSH IY       ;
 $B39F LD L,(IY+$00) ;
 $B3A2 LD H,(IY+$01) ;
 $B3A5 LD A,H        ;
 $B3A6 AND $80       ;
 $B3A8 LD ($B39C),A  ;
 $B3AB RES 7,H       ;
 $B3AD LD ($B186),HL ;
 $B3B0 LD L,(IY+$02) ;
 $B3B3 LD H,(IY+$03) ;
 $B3B6 LD ($B18C),HL ;
 $B3B9 LD HL,$B188   ;
 $B3BC PUSH HL       ;
 $B3BD LD B,$04      ;
 $B3BF CALL $A2AB    ;
 $B3C2 POP HL        ;
 $B3C3 LD B,$02      ;
 $B3C5 LD E,$04      ;
 $B3C7 CALL $B483    ;
 $B3CA LD E,$0E      ;
 $B3CC CALL $B483    ;
 $B3CF LD E,$06      ;
 $B3D1 CALL $B483    ;
 $B3D4 LD E,$10      ;
 $B3D6 CALL $B483    ;
 $B3D9 XOR A         ;
 $B3DA LD ($A02E),A  ;
 $B3DD LD HL,$B186   ;
 $B3E0 LD DE,$0008   ;
 $B3E3 LD IX,$8259   ;
*$B3E7 PUSH IX       ;
 $B3E9 POP IY        ;
 $B3EB CALL $A4CD    ;
 $B3EE JR Z,$B3FD    ;
 $B3F0 ADD IX,DE     ;
 $B3F2 LD A,(IX+$01) ;
 $B3F5 OR (IX+$00)   ;
 $B3F8 JR NZ,$B3E7   ;
 $B3FA POP IY        ;
 $B3FC RET           ;
*$B3FD POP IY        ;
 $B3FF CALL $B405    ;
 $B402 OR $01        ;
 $B404 RET           ;
*$B405 AND A         ;
 $B406 JR Z,$B416    ;
 $B408 LD HL,($B188) ;
 $B40B LD DE,($B18A) ;
 $B40F LD ($B188),DE ;
 $B413 LD ($B18A),HL ;
*$B416 CALL $A2BD    ;
 $B419 LD HL,$B188   ;
 $B41C LD A,(HL)     ;
 $B41D INC HL        ;
 $B41E OR (HL)       ;
 $B41F JR NZ,$B426   ;
 $B421 LD A,($A01E)  ;
 $B424 JR $B445      ;
*$B426 DEC HL        ;
 $B427 LD A,(HL)     ;
 $B428 CP (IY+$0E)   ;
 $B42B JR NZ,$B435   ;
 $B42D INC HL        ;
 $B42E LD A,(HL)     ;
 $B42F CP (IY+$0F)   ;
 $B432 JR Z,$B440    ;
 $B434 DEC HL        ;
*$B435 LD A,(HL)     ;
 $B436 CP (IY+$10)   ;
 $B439 JR NZ,$B440   ;
 $B43B INC HL        ;
 $B43C LD A,(HL)     ;
 $B43D CP (IY+$11)   ;
*$B440 LD A,($A01D)  ;
 $B443 JR NZ,$B447   ;
*$B445 XOR $20       ;
*$B447 BIT 5,A       ;
 $B449 LD BC,$1208   ;
 $B44C JR Z,$B451    ;
 $B44E LD BC,$0812   ;
*$B451 LD HL,$B182   ;
 $B454 LD (HL),B     ;
 $B455 INC HL        ;
 $B456 LD (HL),C     ;
 $B457 LD A,B        ;
 $B458 LD DE,$B172   ;
 $B45B LD HL,$B16D   ;
 $B45E CALL $B468    ;
 $B461 LD A,C        ;
 $B462 LD DE,$B178   ;
 $B465 LD HL,$B16E   ;
*$B468 PUSH BC       ;
 $B469 LD C,A        ;
 $B46A LD B,$00      ;
 $B46C PUSH HL       ;
 $B46D PUSH IY       ;
 $B46F POP HL        ;
 $B470 ADD HL,BC     ;
 $B471 LD BC,$0006   ;
 $B474 LDIR          ;
 $B476 XOR A         ;
 $B477 LD B,$06      ;
*$B479 DEC HL        ;
 $B47A OR (HL)       ;
 $B47B DJNZ $B479    ;
 $B47D POP HL        ;
 $B47E POP BC        ;
 $B47F RET Z         ;
 $B480 SET 0,(HL)    ;
 $B482 RET           ;
*$B483 XOR A         ;
 $B484 CP B          ;
 $B485 RET Z         ;
 $B486 LD D,$00      ;
 $B488 PUSH IY       ;
 $B48A ADD IY,DE     ;
 $B48C LD A,(IY+$00) ;
 $B48F LD (HL),A     ;
 $B490 INC HL        ;
 $B491 LD A,(IY+$01) ;
 $B494 LD (HL),A     ;
 $B495 DEC HL        ;
 $B496 OR (IY+$00)   ;
 $B499 POP IY        ;
 $B49B RET Z         ;
 $B49C DEC B         ;
 $B49D INC HL        ;
 $B49E INC HL        ;
 $B49F RET           ;
; This entry point is used by the routines at #R$B4A3 and #R$B54A.
*$B4A0 JP (IY)       ;

; Game status buffer entry at B4A2
g$B4A2 DEFB $00

; Routine at B4A3
c$B4A3 LD A,($B4A2)   ;
 $B4A6 INC A          ;
 $B4A7 JR NZ,$B4CF    ;
 $B4A9 LD ($B4A2),A   ;
 $B4AC LD A,($B173)   ;
 $B4AF BIT 7,A        ;
 $B4B1 JR Z,$B4CF     ;
 $B4B3 LD A,$FE       ;
 $B4B5 LD ($A034),A   ;
 $B4B8 LD HL,($B172)  ;
 $B4BB LD ($A02F),HL  ;
 $B4BE OR $01         ;
 $B4C0 RET            ;
; This entry point is used by the routine at #R$B191.
*$B4C1 LD A,($A00F)   ;
 $B4C4 CP $05         ;
 $B4C6 JR Z,$B4A3     ;
 $B4C8 LD A,($B173)   ;
 $B4CB BIT 7,A        ;
 $B4CD JR Z,$B4D4     ;
*$B4CF LD A,$FF       ;
 $B4D1 CP $FF         ;
 $B4D3 RET            ;
*$B4D4 PUSH IY        ;
 $B4D6 LD IX,($B17E)  ;
 $B4DA LD A,($A01D)   ;
 $B4DD AND $01        ;
 $B4DF LD ($A038),A   ;
 $B4E2 LD A,($A00F)   ;
 $B4E5 CP $05         ;
 $B4E7 LD IY,$D39B    ;
 $B4EB JR C,$B4F1     ;
 $B4ED LD IY,$D36A    ;
*$B4F1 CALL $B4FD     ;
 $B4F4 CP $FF         ;
 $B4F6 LD ($B17E),IX  ;
 $B4FA POP IY         ;
 $B4FC RET            ;
*$B4FD LD HL,$B172    ;
 $B500 CALL $B4A0     ;
 $B503 CP $FF         ;
 $B505 RET Z          ;
 $B506 LD ($A034),A   ;
 $B509 CALL $B517     ;
 $B50C JR NZ,$B4FD    ;
 $B50E LD A,($A034)   ;
 $B511 LD HL,$B16D    ;
 $B514 SET 1,(HL)     ;
 $B516 RET            ;
*$B517 LD A,($A01C)   ;
 $B51A AND A          ;
 $B51B RET Z          ;
 $B51C PUSH IY        ;
 $B51E PUSH DE        ;
 $B51F PUSH IX        ;
*$B521 CALL $AEA9     ;
 $B524 BIT 6,(IY+$01) ;
 $B528 JR Z,$B543     ;
 $B52A CALL $D04F     ;
*$B52D PUSH IY        ;
 $B52F POP HL         ;
 $B530 LD DE,$0008    ;
 $B533 ADD HL,DE      ;
 $B534 CALL $D36A     ;
 $B537 CP $FF         ;
 $B539 JR Z,$B521     ;
 $B53B LD HL,$A034    ;
 $B53E CP (HL)        ;
 $B53F JR NZ,$B52D    ;
 $B541 OR $01         ;
*$B543 POP IX         ;
 $B545 POP DE         ;
 $B546 POP IY         ;
 $B548 RET            ;

; Game status buffer entry at B549
g$B549 DEFB $00

; Routine at B54A
c$B54A LD A,($B549)    ;
 $B54D INC A           ;
 $B54E JR NZ,$B576     ;
 $B550 LD ($B549),A    ;
 $B553 LD A,($B179)    ;
 $B556 BIT 7,A         ;
 $B558 JR Z,$B576      ;
 $B55A LD A,$FE        ;
 $B55C LD ($A035),A    ;
 $B55F LD HL,($B178)   ;
 $B562 LD ($A031),HL   ;
 $B565 OR $01          ;
 $B567 RET             ;
; This entry point is used by the routine at #R$B191.
*$B568 LD A,($A010)    ;
 $B56B CP $05          ;
 $B56D JR Z,$B54A      ;
 $B56F LD A,($B179)    ;
 $B572 BIT 7,A         ;
 $B574 JR Z,$B57B      ;
*$B576 LD A,$FF        ;
 $B578 CP $FF          ;
 $B57A RET             ;
*$B57B PUSH IY         ;
 $B57D LD IX,($B180)   ;
 $B581 LD A,($A01D)    ;
 $B584 AND $01         ;
 $B586 LD ($A038),A    ;
 $B589 LD A,($A010)    ;
 $B58C CP $05          ;
 $B58E LD IY,$D39B     ;
 $B592 JR C,$B598      ;
 $B594 LD IY,$D36A     ;
*$B598 CALL $B5A4      ;
 $B59B CP $FF          ;
 $B59D LD ($B180),IX   ;
 $B5A1 POP IY          ;
 $B5A3 RET             ;
*$B5A4 LD HL,$B178     ;
 $B5A7 CALL $B4A0      ;
 $B5AA CP $FF          ;
 $B5AC RET Z           ;
 $B5AD LD ($A035),A    ;
 $B5B0 LD HL,$B16E     ;
 $B5B3 SET 1,(HL)      ;
 $B5B5 RET             ;
*$B5B6 LD ($A01B),A    ;
 $B5B9 LD IX,($9FF2)   ;
 $B5BD LD ($9FF0),IX   ;
 $B5C1 LD L,(IX-$02)   ;
 $B5C4 LD H,(IX-$01)   ;
 $B5C7 LD ($9FF2),HL   ;
 $B5CA LD (IX-$02),$00 ;
 $B5CE LD (IX-$01),$00 ;
 $B5D2 RET             ;
 $B5D3 LD A,($B16E)    ;
 $B5D6 BIT 0,A         ;
 $B5D8 JR Z,$B610      ;
 $B5DA LD A,($B183)    ;
 $B5DD LD HL,$B178     ;
 $B5E0 JR $B5EF        ;
 $B5E2 LD A,($B16D)    ;
 $B5E5 BIT 0,A         ;
 $B5E7 JR Z,$B5FC      ;
 $B5E9 LD A,($B182)    ;
 $B5EC LD HL,$B172     ;
*$B5EF CALL $B83C      ;
 $B5F2 CALL $B5B6      ;
 $B5F5 LD HL,$6888     ;
 $B5F8 CALL $A59F      ;
 $B5FB RET             ;
*$B5FC CALL $B633      ;
 $B5FF LD HL,($B186)   ;
 $B602 PUSH HL         ;
 $B603 LD A,($B182)    ;
 $B606 CALL $B5B6      ;
 $B609 LD HL,$6880     ;
 $B60C CALL $A59F      ;
 $B60F RET             ;
*$B610 CALL $B62F      ;
 $B613 LD HL,$0000     ;
 $B616 PUSH HL         ;
 $B617 LD HL,$B172     ;
 $B61A PUSH HL         ;
 $B61B CALL $B633      ;
 $B61E LD HL,($B186)   ;
 $B621 PUSH HL         ;
 $B622 LD A,($B183)    ;
 $B625 CALL $B5B6      ;
 $B628 LD HL,$687C     ;
 $B62B CALL $A59F      ;
 $B62E RET             ;
; This entry point is used by the routine at #R$B6F0.
*$B62F LD A,$28        ;
 $B631 JR $B635        ;
; This entry point is used by the routine at #R$B6DA.
*$B633 LD A,$20        ;
*$B635 LD ($B649),A    ;
 $B638 LD ($B658),A    ;
 $B63B LD IX,($B18E)   ;
 $B63F LD L,(IX+$04)   ;
 $B642 LD H,(IX+$05)   ;
 $B645 BIT 7,(IX+$07)  ;
 $B649 JR NZ,$B64E     ;
 $B64B LD HL,$0000     ;
*$B64E EX (SP),HL      ;
 $B64F PUSH HL         ;
 $B650 LD L,(IX+$02)   ;
 $B653 LD H,(IX+$03)   ;
 $B656 BIT 5,H         ;
 $B658 JR NZ,$B65D     ;
 $B65A LD HL,$0000     ;
*$B65D EX (SP),HL      ;
 $B65E JP (HL)         ;
 $B65F LD A,($A00F)    ;
 $B662 CP $05          ;
 $B664 JR Z,$B671      ;
 $B666 CP $06          ;
 $B668 JR Z,$B671      ;
 $B66A LD A,($B173)    ;
 $B66D BIT 7,A         ;
 $B66F JR Z,$B678      ;
*$B671 LD HL,$6855     ;
 $B674 CALL $A59F      ;
 $B677 RET             ;
*$B678 LD HL,$B16D     ;
 $B67B BIT 0,(HL)      ;
 $B67D LD HL,$B172     ;
 $B680 CALL NZ,$B6DA   ;
 $B683 CALL $B633      ;
 $B686 LD A,($B16D)    ;
 $B689 LD HL,$B172     ;
*$B68C LD DE,($B186)   ;
 $B690 PUSH DE         ;
 $B691 BIT 0,A         ;
 $B693 JR Z,$B69D      ;
 $B695 CALL $B83C      ;
 $B698 LD HL,$05B3     ;
 $B69B JR $B6A6        ;
*$B69D LD HL,$0000     ;
 $B6A0 PUSH HL         ;
 $B6A1 PUSH HL         ;
 $B6A2 PUSH HL         ;
 $B6A3 LD HL,$05DB     ;
*$B6A6 PUSH HL         ;
 $B6A7 LD HL,$6894     ;
 $B6AA CALL $A59F      ;
 $B6AD RET             ;
 $B6AE LD A,($A010)    ;
 $B6B1 CP $05          ;
 $B6B3 JR Z,$B671      ;
 $B6B5 CP $06          ;
 $B6B7 JR Z,$B671      ;
 $B6B9 LD A,($B179)    ;
 $B6BC BIT 7,A         ;
 $B6BE JR NZ,$B671     ;
 $B6C0 LD HL,$B16E     ;
 $B6C3 BIT 0,(HL)      ;
 $B6C5 LD HL,$B178     ;
 $B6C8 CALL NZ,$B6F0   ;
 $B6CB CALL $B62F      ;
 $B6CE LD A,($B16E)    ;
 $B6D1 LD HL,$B178     ;
 $B6D4 JR $B68C        ;

; Game status buffer entry at B6D6
g$B6D6 DEFW $0000
 $B6D8 DEFW $0000

; Routine at B6DA
;
; Used by the routine at #R$B54A.
c$B6DA CALL $B6FD    ;
 $B6DD RET Z         ;
 $B6DE POP DE        ;
 $B6DF CALL $B83C    ;
 $B6E2 CALL $B633    ;
; This entry point is used by the routine at #R$B6F0.
*$B6E5 LD HL,($B186) ;
 $B6E8 PUSH HL       ;
 $B6E9 LD HL,$68A2   ;
 $B6EC CALL $A59F    ;
 $B6EF RET           ;

; Routine at B6F0
;
; Used by the routine at #R$B54A.
c$B6F0 CALL $B6FD    ;
 $B6F3 RET Z         ;
 $B6F4 POP DE        ;
 $B6F5 CALL $B83C    ;
 $B6F8 CALL $B62F    ;
 $B6FB JR $B6E5      ;

; Routine at B6FD
;
; Used by the routines at #R$B6DA and #R$B6F0.
c$B6FD XOR A         ; {Write #N$00 to *#R$B77E.
 $B6FE LD ($B77E),A  ; }
 $B701 LD ($B6D8),HL ; Write #REGhl to *#R$B6D8.
 $B704 CALL $D33C    ; Call #R$D33C.
 $B707 LD L,(IX+$07) ; #REGl=*#REGix+#N$07.
 $B70A LD H,(IX+$08) ; #REGh=*#REGix+#N$08.
 $B70D LD A,H        ; {Return if #REGhl is zero.
 $B70E OR L          ;
 $B70F RET Z         ; }
 $B710 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $B711 POP IX        ; }
 $B713 LD HL,$0000   ; {Write #N($0000,$04,$04) to *#R$B6D6.
 $B716 LD ($B6D6),HL ; }
 $B719 LD IY,$AAAC   ; #REGiy=#R$AAAC.
*$B71D LD HL,$AAAC   ; #REGhl=#R$AAAC.
 $B720 LD B,$06      ; #REGb=#N$06.
 $B722 CALL $A2AB    ; Call #R$A2AB.
*$B725 CALL $B77F    ; Call #R$B77F.
 $B728 RET Z         ; Return if the zero flag is set.
 $B729 CALL $B772    ; Call #R$B772.
 $B72C CP $50        ; {Jump to #R$B75A if #REGa is equal to #N$50.
 $B72E JR Z,$B75A    ; }
 $B730 CP $60        ; {Jump to #R$B725 if #REGa is not equal to #N$60.
 $B732 JR NZ,$B725   ; }
 $B734 LD (IY+$02),E ; Write #REGe to *#REGiy+#N$02.
 $B737 LD (IY+$03),D ; Write #REGd to *#REGiy+#N$03.
 $B73A CALL $B77F    ; Call #R$B77F.
 $B73D RET Z         ; Return if the zero flag is set.
 $B73E CALL $B772    ; Call #R$B772.
 $B741 CP $50        ; {Jump to #R$B75A if #REGa is equal to #N$50.
 $B743 JR Z,$B75A    ; }
 $B745 CP $60        ; {Jump to #R$B71D if #REGa is not equal to #N$60.
 $B747 JR NZ,$B71D   ; }
 $B749 LD (IY+$04),E ; Write #REGe to *#REGiy+#N$04.
 $B74C LD (IY+$05),D ; Write #REGd to *#REGiy+#N$05.
 $B74F CALL $B77F    ; Call #R$B77F.
 $B752 RET Z         ; Return if the zero flag is set.
 $B753 CALL $B772    ; Call #R$B772.
 $B756 CP $50        ; {Jump to #R$B71D if #REGa is not equal to #N$50.
 $B758 JR NZ,$B71D   ; }
*$B75A LD (IY+$00),E ; Write #REGe to *#REGiy+#N$00.
 $B75D LD (IY+$01),D ; Write #REGd to *#REGiy+#N$01.
 $B760 LD HL,($B6D8) ; #REGhl=*#R$B6D8.
 $B763 CALL $A4E0    ; Call #R$A4E0.
 $B766 JR NZ,$B71D   ; Jump to #R$B71D if the zero flag is not set.
 $B768 LD IX,($B6D6) ; #REGix=*#R$B6D6.
 $B76C CALL $A1AF    ; Call #R$A1AF.
 $B76F OR %00000001  ; Set bit 0.
 $B771 RET           ; Return.

; Routine at B772
;
; Used by the routine at #R$B6FD.
c$B772 LD HL,$5DBF   ; #REGhl=#N$5DBF.
 $B775 LD A,D        ; #REGa=#REGd.
 $B776 AND %00001111 ; Keep only bits 0-3.
 $B778 LD D,A        ; #REGd=#REGa.
 $B779 ADD HL,DE     ; #REGhl+=#REGde.
 $B77A LD A,(HL)     ; #REGa=*#REGhl.
 $B77B AND %11110000 ; Keep only bits 4-7.
 $B77D RET           ; Return.

; Game status buffer entry at B77E
g$B77E DEFB $00

; Routine at B77F
;
; Used by the routine at #R$B6FD.
c$B77F LD A,($B77E)  ; {Jump to #R$B7AA if *#R$B77E is not equal to #N$FF.
 $B782 CP $FF        ;
 $B784 JR NZ,$B7AA   ; }
*$B786 LD HL,($B6D6) ; #REGhl=*#R$B6D6.
 $B789 LD A,L        ; {Return if #REGhl is zero.
 $B78A OR H          ;
 $B78B RET Z         ; }
 $B78C XOR A         ; {Write #N$00 to *#R$B77E.
 $B78D LD ($B77E),A  ; }
 $B790 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $B791 POP IX        ; }
 $B793 LD L,(IX-$02) ; #REGl=*#REGix-#N$02.
 $B796 LD H,(IX-$01) ; #REGh=*#REGix-#N$01.
 $B799 LD ($B6D6),HL ; Write #REGhl to *#R$B6D6.
 $B79C LD L,(IX+$00) ; #REGl=*#REGix+#N$00.
 $B79F LD H,(IX+$01) ; #REGh=*#REGix+#N$01.
 $B7A2 CALL $A1C7    ; Call #R$A1C7.
 $B7A5 INC HL        ; {Increment #REGhl by two.
 $B7A6 INC HL        ; }
 $B7A7 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $B7A8 POP IX        ; }
*$B7AA LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $B7AD INC IX        ; Increment #REGix by one.
 $B7AF BIT 7,A       ; {Jump to #R$B7CD if  bit 7 of #REGa is not set.
 $B7B1 JR Z,$B7CD    ; }
 $B7B3 LD D,A        ; #REGd=#REGa.
 $B7B4 LD E,(IX+$00) ; #REGe=*#REGix+#N$00.
 $B7B7 INC IX        ; Increment #REGix by one.
 $B7B9 AND %01110000 ; Keep only bits 4-6.
 $B7BB CP $60        ; {Jump to #R$B7C6 if #REGa is equal to #N$60.
 $B7BD JR Z,$B7C6    ; }
 $B7BF CP $30        ; {Jump to #R$B7C6 if #REGa is equal to #N$30.
 $B7C1 JR Z,$B7C6    ; }
 $B7C3 CP $20        ; {Return if #REGa is not equal to #N$20.
 $B7C5 RET NZ        ; }
*$B7C6 LD A,$FF      ; {Write #N$FF to *#R$B77E.
 $B7C8 LD ($B77E),A  ; }
 $B7CB AND A         ; Set flags.
 $B7CC RET           ; Return.
*$B7CD CP $20        ; {Jump to #R$B7F7 if #REGa is less than #N$20.
 $B7CF JR C,$B7F7    ; }
 $B7D1 CP $60        ; {Jump to #R$B7DD if #REGa is less than #N$60.
 $B7D3 JR C,$B7DD    ; }
 $B7D5 CALL $A840    ; Call #R$A840.
 $B7D8 OR %00000001  ; Set bit 0.
 $B7DA LD A,$00      ; #REGa=#N$00.
 $B7DC RET           ; Return.
*$B7DD AND %00011111 ; Keep only bits 0-4.
 $B7DF INC A         ; Increment #REGa by one.
 $B7E0 LD B,A        ; #REGb=#REGa.
 $B7E1 PUSH IX       ; {#REGhl=#REGix (using the stack).
 $B7E3 POP HL        ; }
 $B7E4 INC HL        ; Increment #REGhl by one.
 $B7E5 LD C,$00      ; #REGc=#N$00.
*$B7E7 CALL $A990    ; Call #R$A990.
 $B7EA DJNZ $B7E7    ; Decrease counter by one and loop back to #R$B7E7 until
                     ; counter is zero.
 $B7EC PUSH HL       ; {#REGix=#REGhl (using the stack).
 $B7ED POP IX        ; }
 $B7EF LD A,C        ; #REGa=#REGc.
 $B7F0 AND A         ; {Jump to #R$B7AA if #REGhl is not equal to #REGa.
 $B7F1 JR NZ,$B7AA   ; }
 $B7F3 DEC IX        ; Decrease #REGix by one.
 $B7F5 JR $B7AA      ; Jump to #R$B7AA.
*$B7F7 CP $02        ;
 $B7F9 JR NZ,$B807   ;
 $B7FB LD E,(IX+$00) ;
 $B7FE LD D,(IX+$01) ;
 $B801 ADD IX,DE     ;
*$B803 DEC IX        ;
 $B805 JR $B7AA      ;
*$B807 CP $0B        ;
 $B809 JR NZ,$B834   ;
 $B80B LD E,(IX+$00) ;
 $B80E LD D,(IX+$01) ;
 $B811 PUSH IX       ;
 $B813 POP HL        ;
 $B814 LD A,$02      ;
 $B816 CALL $A11C    ;
 $B819 LD (IX+$00),L ;
 $B81C LD (IX+$01),H ;
 $B81F PUSH HL       ;
 $B820 LD HL,($B6D6) ;
 $B823 LD ($B6D6),IX ;
 $B827 LD (IX-$02),L ;
 $B82A LD (IX-$01),H ;
 $B82D POP HL        ;
 $B82E ADD HL,DE     ;
 $B82F PUSH HL       ;
 $B830 POP IX        ;
 $B832 JR $B803      ;
*$B834 CP $1D        ;
 $B836 JP C,$B7AA    ;
 $B839 JP $B786      ;
; This entry point is used by the routines at #R$B54A, #R$B6DA and #R$B6F0.
*$B83C POP IX        ;
 $B83E LD B,$03      ;
*$B840 LD E,(HL)     ;
 $B841 INC HL        ;
 $B842 LD D,(HL)     ;
 $B843 INC HL        ;
 $B844 PUSH DE       ;
 $B845 DJNZ $B840    ;
 $B847 POP HL        ;
 $B848 EX (SP),HL    ;
 $B849 PUSH HL       ;
 $B84A JP (IX)       ;
 $B84C LD HL,($B18A) ;
 $B84F PUSH HL       ;
 $B850 LD HL,($B188) ;
 $B853 PUSH HL       ;
 $B854 LD HL,($B186) ;
 $B857 PUSH HL       ;
 $B858 LD HL,($B18C) ;
 $B85B PUSH HL       ;
 $B85C LD HL,$686A   ;
 $B85F CALL $A59F    ;
 $B862 RET           ;
 $B863 JP $C929      ;
 $B866 NOP           ;
 $B867 NOP           ;
 $B868 NOP           ;
 $B869 NOP           ;
; This entry point is used by the routine at #R$DC6C.
*$B86A PUSH AF       ;
 $B86B LD IX,$9FEE   ;
 $B86F CALL $A0F7    ;
 $B872 JR Z,$B8A8    ;
 $B874 LD C,(IX+$00) ;
 $B877 LD B,(IX+$01) ;
 $B87A LD ($B868),BC ;
 $B87E LD L,(IX-$02) ;
 $B881 LD H,(IX-$01) ;
 $B884 LD ($9FEC),HL ;
 $B887 CALL $A1C7    ;
 $B88A POP AF        ;
 $B88B PUSH AF       ;
 $B88C AND A         ;
 $B88D JR Z,$B894    ;
 $B88F CALL $B8AA    ;
 $B892 JR Z,$B8A8    ;
*$B894 LD BC,($B868) ;
 $B898 LD ($A02B),BC ;
*$B89C CALL $AE7F    ;
 $B89F CP $C0        ;
 $B8A1 JR NZ,$B89C   ;
 $B8A3 LD HL,($A029) ;
 $B8A6 LD (HL),$90   ;
*$B8A8 POP AF        ;
 $B8A9 RET           ;
*$B8AA LD HL,($B868) ;
 $B8AD LD ($A02B),HL ;
 $B8B0 XOR A         ;
 $B8B1 LD ($A024),A  ;
 $B8B4 LD HL,($9FF0) ;
 $B8B7 PUSH HL       ;
 $B8B8 LD HL,$0000   ;
 $B8BB LD ($9FF0),HL ;
*$B8BE CALL $AAB2    ;
 $B8C1 JR Z,$B8C7    ;
 $B8C3 CP $02        ;
 $B8C5 JR NZ,$B904   ;
*$B8C7 LD HL,($A02B) ;
 $B8CA LD A,(HL)     ;
 $B8CB AND $F0       ;
 $B8CD CP $C0        ;
 $B8CF JR NZ,$B8BE   ;
 $B8D1 LD (HL),$90   ;
 $B8D3 LD A,$08      ;
 $B8D5 CALL $A11C    ;
 $B8D8 LD HL,($9FEE) ;
 $B8DB LD ($9FEE),IX ;
 $B8DF LD (IX-$02),L ;
 $B8E2 LD (IX-$01),H ;
 $B8E5 LD HL,($9FF0) ;
 $B8E8 LD (IX+$05),L ;
 $B8EB LD (IX+$06),H ;
 $B8EE POP HL        ;
 $B8EF LD ($9FF0),HL ;
 $B8F2 XOR A         ;
 $B8F3 LD (IX+$01),A ;
 $B8F6 LD A,($A034)  ;
 $B8F9 LD (IX+$00),A ;
 $B8FC LD A,($A024)  ;
 $B8FF LD (IX+$07),A ;
 $B902 XOR A         ;
 $B903 RET           ;
*$B904 PUSH AF       ;
 $B905 CALL $D87D    ;
 $B908 POP AF        ;
 $B909 POP HL        ;
 $B90A LD ($9FF0),HL ;
 $B90D RET           ;
; This entry point is used by the routine at #R$B936.
*$B90E CALL $B91F    ;
 $B911 LD ($B866),IX ;
 $B915 LD E,(IX+$05) ;
 $B918 LD D,(IX+$06) ;
 $B91B PUSH DE       ;
 $B91C POP IY        ;
 $B91E RET           ;

; Routine at B91F
;
; Used by the routines at #R$B77F and #R$CC37.
c$B91F LD IX,$9FF0   ; #REGix=#R$9FF0.
*$B923 CALL $A0F7    ; Call #R$A0F7.
 $B926 JR Z,$B931    ; Jump to #R$B931 if the zero flag is set.
 $B928 LD A,($A036)  ; {Return if *#R$A036 is equal to *#REGix+#N$00.
 $B92B CP (IX+$00)   ;
 $B92E RET Z         ; }
 $B92F JR $B923      ; Jump to #R$B923.
*$B931 OR %00000001  ; Set bit 0.
 $B933 RET           ; Return.

; Game status buffer entry at B934
g$B934 DEFB $00
 $B935 DEFB $00

; Routine at B936
;
; Used by the routine at #R$CC78.
c$B936 PUSH IX         ;
 $B938 PUSH IY         ;
 $B93A PUSH HL         ;
 $B93B LD ($B935),A    ;
*$B93E CALL $B90E      ;
 $B941 LD A,(IX+$07)   ;
 $B944 CP $02          ;
 $B946 JP Z,$BA20      ;
 $B949 LD A,(IX+$01)   ;
 $B94C CP $FF          ;
 $B94E JR Z,$B98C      ;
 $B950 LD A,($B935)    ;
 $B953 LD ($B934),A    ;
 $B956 LD A,(IX+$02)   ;
 $B959 LD ($A01C),A    ;
 $B95C LD C,(IX+$03)   ;
 $B95F LD B,(IX+$04)   ;
 $B962 LD ($B17E),BC   ;
 $B966 CALL $B191      ;
 $B969 JR Z,$B9B4      ;
 $B96B LD IX,($B866)   ;
 $B96F LD BC,($B17E)   ;
 $B973 LD (IX+$03),C   ;
 $B976 LD (IX+$04),B   ;
 $B979 LD A,($A01C)    ;
 $B97C LD (IX+$02),A   ;
 $B97F AND A           ;
 $B980 CALL Z,$B9CA    ;
*$B983 LD A,$01        ;
*$B985 POP HL          ;
 $B986 POP IY          ;
 $B988 POP IX          ;
 $B98A AND A           ;
 $B98B RET             ;
*$B98C LD A,(IX+$02)   ;
 $B98F CALL $CEDE      ;
 $B992 LD ($A033),A    ;
 $B995 LD A,(IX+$03)   ;
 $B998 CALL $CEDE      ;
 $B99B LD ($A034),A    ;
 $B99E LD A,(IX+$04)   ;
 $B9A1 CALL $CEDE      ;
 $B9A4 LD ($A035),A    ;
 $B9A7 CALL $B9FA      ;
 $B9AA JR $B983        ;
*$B9AC CALL $B9CA      ;
 $B9AF JR NZ,$B9AC     ;
*$B9B1 XOR A           ;
 $B9B2 JR $B985        ;
*$B9B4 LD A,($A01C)    ;
 $B9B7 AND A           ;
 $B9B8 JR Z,$B9AC      ;
 $B9BA LD IX,($B866)   ;
 $B9BE LD (IX+$02),$00 ;
 $B9C2 CALL $B9CA      ;
 $B9C5 JR Z,$B9B1      ;
 $B9C7 JP $B93E        ;
*$B9CA LD IX,($B866)   ;
*$B9CE LD L,(IY-$02)   ;
 $B9D1 LD H,(IY-$01)   ;
 $B9D4 LD (IX+$05),L   ;
 $B9D7 LD (IX+$06),H   ;
 $B9DA PUSH IX         ;
 $B9DC PUSH IY         ;
 $B9DE POP IX          ;
 $B9E0 CALL $A1C7      ;
 $B9E3 POP IX          ;
 $B9E5 LD A,L          ;
 $B9E6 OR H            ;
 $B9E7 JR Z,$B9F5      ;
 $B9E9 PUSH HL         ;
 $B9EA POP IY          ;
 $B9EC BIT 6,(IY+$01)  ;
 $B9F0 JR NZ,$B9CE     ;
 $B9F2 OR $01          ;
 $B9F4 RET             ;
*$B9F5 CALL $B9FA      ;
 $B9F8 XOR A           ;
 $B9F9 RET             ;

; Routine at B9FA
;
; Used by the routines at #R$B936 and #R$BA20.
c$B9FA LD IY,$9FEE   ;
 $B9FE PUSH IX       ;
 $BA00 POP DE        ;
 $BA01 CALL $A104    ;
 $BA04 LD L,(IX-$02) ;
 $BA07 LD H,(IX-$01) ;
 $BA0A LD (IY-$02),L ;
 $BA0D LD (IY-$01),H ;
 $BA10 JP $A1C7      ;

; Game status buffer entry at BA13
g$BA13 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BA1B DEFB $00,$00,$00,$00,$00

; Routine at BA20
;
; Used by the routine at #R$B936.
c$BA20 LD A,($A036)   ;
 $BA23 LD HL,$BA67    ;
 $BA26 CP $03         ;
 $BA28 JR Z,$BA31     ;
 $BA2A LD HL,$BB67    ;
 $BA2D CP $02         ;
 $BA2F JR NZ,$BA34    ;
*$BA31 CALL $BA3E     ;
*$BA34 LD A,$01       ;
 $BA36 POP HL         ;
 $BA37 POP IY         ;
 $BA39 POP IX         ;
 $BA3B AND A          ;
 $BA3C SCF            ;
 $BA3D RET            ;
*$BA3E PUSH IX        ;
 $BA40 XOR A          ;
 $BA41 LD ($9FEB),A   ;
 $BA44 LD E,(IX+$05)  ;
 $BA47 LD D,(IX+$06)  ;
 $BA4A PUSH DE        ;
 $BA4B PUSH DE        ;
 $BA4C POP IY         ;
 $BA4E CALL $D1DB     ;
 $BA51 POP IX         ;
 $BA53 PUSH AF        ;
 $BA54 CALL $A1AF     ;
 $BA57 POP AF         ;
 $BA58 POP IX         ;
 $BA5A PUSH AF        ;
 $BA5B CALL $B9FA     ;
 $BA5E POP AF         ;
 $BA5F RET            ;
 $BA60 NOP            ;
 $BA61 NOP            ;
 $BA62 NOP            ;
 $BA63 NOP            ;
 $BA64 NOP            ;
 $BA65 NOP            ;
 $BA66 NOP            ;
 $BA67 LD ($BA60),A   ;
 $BA6A LD ($BA61),A   ;
*$BA6D CALL $BD7E     ;
 $BA70 JP C,$BBBE     ;
 $BA73 JR Z,$BAA6     ;
 $BA75 CALL $BD4B     ;
 $BA78 JR NZ,$BA85    ;
 $BA7A LD A,$01       ;
*$BA7C CALL $BB46     ;
 $BA7F LD ($BA65),IX  ;
 $BA83 JR $BAAB       ;
*$BA85 CALL $BD51     ;
 $BA88 JR NZ,$BA9D    ;
 $BA8A LD A,$02       ;
 $BA8C BIT 5,(IX+$03) ;
 $BA90 JR NZ,$BA7C    ;
 $BA92 CALL $D29D     ;
 $BA95 CP $32         ;
 $BA97 LD A,$03       ;
 $BA99 JR C,$BA7C     ;
 $BA9B JR $BAA6       ;
*$BA9D CALL $D29D     ;
 $BAA0 CP $46         ;
 $BAA2 LD A,$04       ;
 $BAA4 JR C,$BA7C     ;
*$BAA6 CALL $AEA9     ;
 $BAA9 JR NZ,$BA6D    ;
*$BAAB LD A,($BA60)   ;
 $BAAE AND A          ;
 $BAAF JP Z,$BB3F     ;
 $BAB2 LD A,($BA61)   ;
 $BAB5 AND A          ;
 $BAB6 JR Z,$BB16     ;
 $BAB8 LD IX,$9FF6    ;
*$BABC CALL $A0F7     ;
 $BABF JR Z,$BAF5     ;
 $BAC1 LD A,($BA62)   ;
 $BAC4 CP (IX+$00)    ;
 $BAC7 JR NZ,$BABC    ;
 $BAC9 LD A,($BA63)   ;
 $BACC CP (IX+$01)    ;
 $BACF JR NZ,$BABC    ;
 $BAD1 LD A,($BA64)   ;
 $BAD4 CP (IX+$02)    ;
 $BAD7 JR NZ,$BABC    ;
 $BAD9 PUSH IY        ;
 $BADB PUSH IX        ;
 $BADD POP DE         ;
 $BADE LD IY,$9FF4    ;
 $BAE2 CALL $A104     ;
 $BAE5 LD A,(IX-$02)  ;
 $BAE8 LD (IY-$02),A  ;
 $BAEB LD A,(IX-$01)  ;
 $BAEE LD (IY-$01),A  ;
 $BAF1 POP IY         ;
 $BAF3 JR $BAFA       ;
*$BAF5 LD A,$05       ;
 $BAF7 CALL $A11C     ;
*$BAFA LD A,($BA62)   ;
 $BAFD LD HL,($BA63)  ;
 $BB00 LD (IX+$00),A  ;
 $BB03 LD (IX+$01),L  ;
 $BB06 LD (IX+$02),H  ;
 $BB09 LD HL,($9FF4)  ;
 $BB0C LD ($9FF4),IX  ;
 $BB10 LD (IX-$02),L  ;
 $BB13 LD (IX-$01),H  ;
*$BB16 LD A,($BA60)   ;
 $BB19 CP $01         ;
 $BB1B JR Z,$BB5C     ;
 $BB1D CALL $D29D     ;
 $BB20 CP $19         ;
 $BB22 JR C,$BB3F     ;
 $BB24 LD IX,$BA62    ;
 $BB28 CALL $BD06     ;
 $BB2B JR NZ,$BB3F    ;
 $BB2D LD A,C         ;
 $BB2E PUSH BC        ;
 $BB2F CALL $A4BC     ;
 $BB32 POP AF         ;
 $BB33 PUSH HL        ;
 $BB34 CALL $A4BC     ;
 $BB37 PUSH HL        ;
 $BB38 LD HL,$6F62    ;
 $BB3B CALL $A59F     ;
 $BB3E RET            ;
*$BB3F LD HL,$6F54    ;
 $BB42 CALL $A59F     ;
 $BB45 RET            ;
*$BB46 PUSH AF        ;
 $BB47 LD A,$01       ;
 $BB49 LD ($BA61),A   ;
 $BB4C POP AF         ;
 $BB4D LD ($BA60),A   ;
 $BB50 LD HL,$BA19    ;
 $BB53 LD DE,$BA62    ;
 $BB56 LD BC,$0003    ;
 $BB59 LDIR           ;
 $BB5B RET            ;
*$BB5C LD IX,($BA65)  ;
 $BB60 LD L,(IX+$03)  ;
 $BB63 LD H,(IX+$04)  ;
 $BB66 JP (HL)        ;
 $BB67 LD ($BA1D),A   ;
 $BB6A LD ($BA1C),A   ;
*$BB6D CALL $BD7E     ;
 $BB70 JP C,$BBBE     ;
 $BB73 CALL $BC21     ;
 $BB76 JR Z,$BB7C     ;
 $BB78 LD HL,$BA1C    ;
 $BB7B INC (HL)       ;
*$BB7C CALL $AEA9     ;
 $BB7F JR NZ,$BB6D    ;
 $BB81 LD A,($BA1C)   ;
 $BB84 AND A          ;
 $BB85 JR NZ,$BB8E    ;
 $BB87 LD HL,$725F    ;
 $BB8A CALL $A59F     ;
 $BB8D RET            ;
*$BB8E LD A,($BA1D)   ;
 $BB91 AND A          ;
 $BB92 JR Z,$BBC9     ;
 $BB94 LD IX,($BA1E)  ;
 $BB98 PUSH IX        ;
 $BB9A CALL $BE5A     ;
*$BB9D LD A,(IX+$03)  ;
 $BBA0 AND $C0        ;
 $BBA2 CP $80         ;
 $BBA4 JR Z,$BBB1     ;
 $BBA6 BIT 3,(IX+$03) ;
 $BBAA JR NZ,$BBB1    ;
 $BBAC CALL $BE72     ;
 $BBAF JR $BB9D       ;
*$BBB1 POP IX         ;
 $BBB3 JR NZ,$BBC4    ;
 $BBB5 LD HL,$7295    ;
*$BBB8 PUSH IX        ;
 $BBBA CALL $A59F     ;
 $BBBD RET            ;
*$BBBE LD HL,$7243    ;
 $BBC1 JP $A59F       ;
*$BBC4 LD HL,$72A6    ;
 $BBC7 JR $BBB8       ;
*$BBC9 CALL $BC46     ;
 $BBCC CALL $BC9C     ;
 $BBCF LD A,B         ;
 $BBD0 AND A          ;
 $BBD1 JR NZ,$BBE5    ;
 $BBD3 CALL $BC74     ;
 $BBD6 AND A          ;
 $BBD7 JR Z,$BBDE     ;
 $BBD9 LD HL,$72BD    ;
 $BBDC JR $BBB8       ;
*$BBDE LD HL,$727E    ;
 $BBE1 CALL $A59F     ;
 $BBE4 RET            ;

; Routine at BBE5
;
; Used by the routines at #R$9D95 and #R$BA20.
c$BBE5 PUSH AF        ;
 $BBE6 LD HL,$67FF    ;
 $BBE9 CALL $A59F     ;
 $BBEC POP AF         ;
 $BBED CP $01         ;
 $BBEF LD HL,$72D6    ;
 $BBF2 CALL NZ,$A59F  ;
 $BBF5 BIT 4,(IX+$03) ;
 $BBF9 JR Z,$BC1A     ;
 $BBFB RES 1,(IX+$03) ;
 $BBFF PUSH IX        ;
 $BC01 LD HL,$72E1    ;
 $BC04 CALL $A59F     ;
 $BC07 LD L,(IX+$04)  ;
 $BC0A LD H,(IX+$05)  ;
 $BC0D LD A,L         ;
 $BC0E OR H           ;
 $BC0F JP NZ,$A59F    ;
 $BC12 LD A,$22       ;
 $BC14 CALL $A9B7     ;
 $BC17 JP $A414       ;
*$BC1A LD L,(IX+$04)  ;
 $BC1D LD H,(IX+$05)  ;
 $BC20 JP (HL)        ;

; Routine at BC21
;
; Used by the routine at #R$BA20.
c$BC21 CALL $BD51     ;
 $BC24 JR NZ,$BC2F    ;
 $BC26 LD A,(IX+$03)  ;
 $BC29 AND $C0        ;
 $BC2B CP $80         ;
 $BC2D JR Z,$BC31     ;
*$BC2F XOR A          ;
 $BC30 RET            ;
*$BC31 LD ($BA1E),IX  ;
 $BC35 CALL $BCC9     ;
 $BC38 JR Z,$BC43     ;
 $BC3A LD A,$01       ;
 $BC3C LD ($BA1D),A   ;
 $BC3F SET 0,(IX+$03) ;
*$BC43 OR $01         ;
 $BC45 RET            ;

; Routine at BC46
;
; Used by the routines at #R$9D95 and #R$BA20.
c$BC46 LD IX,$9965    ;
 $BC4A LD HL,$0000    ;
 $BC4D PUSH HL        ;
*$BC4E LD A,(IX+$00)  ;
 $BC51 CP $FF         ;
 $BC53 JR Z,$BC68     ;
 $BC55 BIT 0,(IX+$03) ;
 $BC59 JR Z,$BC63     ;
 $BC5B BIT 5,(IX+$03) ;
 $BC5F JR NZ,$BC63    ;
 $BC61 PUSH IX        ;
*$BC63 CALL $BE5A     ;
 $BC66 JR $BC4E       ;
*$BC68 POP HL         ;
 $BC69 LD A,H         ;
 $BC6A OR L           ;
 $BC6B RET Z          ;
 $BC6C PUSH HL        ;
 $BC6D POP IX         ;
 $BC6F CALL $BCC9     ;
 $BC72 JR $BC68       ;

; Routine at BC74
;
; Used by the routines at #R$9D95 and #R$BA20.
c$BC74 LD IX,$9965    ;
 $BC78 LD B,$00       ;
*$BC7A LD A,(IX+$00)  ;
 $BC7D CP $FF         ;
 $BC7F JR Z,$BC96     ;
 $BC81 BIT 0,(IX+$03) ;
 $BC85 JR Z,$BC91     ;
 $BC87 CALL $BCC9     ;
 $BC8A JR Z,$BC91     ;
 $BC8C LD ($BA1E),IX  ;
 $BC90 INC B          ;
*$BC91 CALL $BE5A     ;
 $BC94 JR $BC7A       ;
*$BC96 LD A,B         ;
 $BC97 LD IX,($BA1E)  ;
 $BC9B RET            ;

; Routine at BC9C
;
; Used by the routines at #R$9D95 and #R$BA20.
c$BC9C LD IX,$9965    ;
 $BCA0 LD B,$00       ;
*$BCA2 LD A,(IX+$00)  ;
 $BCA5 CP $FF         ;
 $BCA7 JR Z,$BCC4     ;
 $BCA9 BIT 0,(IX+$03) ;
 $BCAD JR Z,$BCBD     ;
 $BCAF CALL $BCC9     ;
 $BCB2 JR NZ,$BCBD    ;
 $BCB4 LD A,B         ;
 $BCB5 INC B          ;
 $BCB6 AND A          ;
 $BCB7 JR NZ,$BCBD    ;
 $BCB9 LD ($BA1E),IX  ;
*$BCBD PUSH BC        ;
 $BCBE CALL $BE72     ;
 $BCC1 POP BC         ;
 $BCC2 JR $BCA2       ;
*$BCC4 LD IX,($BA1E)  ;
 $BCC8 RET            ;

; Routine at BCC9
;
; Used by the routines at #R$BC21, #R$BC46, #R$BC74 and #R$BC9C.
c$BCC9 BIT 2,(IX+$03) ;
 $BCCD JR Z,$BCDA     ;
 $BCCF PUSH IX        ;
 $BCD1 PUSH BC        ;
 $BCD2 CALL $BF08     ;
 $BCD5 POP BC         ;
 $BCD6 POP IX         ;
 $BCD8 JR Z,$BD03     ;
*$BCDA BIT 5,(IX+$03) ;
 $BCDE JR Z,$BCE6     ;
 $BCE0 SET 0,(IX+$03) ;
 $BCE4 JR $BD01       ;
*$BCE6 SET 1,(IX+$03) ;
 $BCEA RES 0,(IX+$03) ;
 $BCEE BIT 4,(IX+$03) ;
 $BCF2 JR Z,$BD01     ;
 $BCF4 LD L,(IX+$04)  ;
 $BCF7 LD H,(IX+$05)  ;
 $BCFA PUSH IX        ;
 $BCFC CALL $D1DB     ;
 $BCFF POP IX         ;
*$BD01 XOR A          ;
 $BD02 RET            ;
*$BD03 OR $01         ;
 $BD05 RET            ;

; Routine at BD06
;
; Used by the routine at #R$BA20.
c$BD06 PUSH IY       ;
 $BD08 PUSH IX       ;
 $BD0A POP IY        ;
 $BD0C LD IX,$9FF6   ;
*$BD10 CALL $A0F7    ;
 $BD13 JR Z,$BD46    ;
 $BD15 LD B,(IX+$02) ;
 $BD18 LD C,(IY+$02) ;
 $BD1B LD A,(IX+$00) ;
 $BD1E CP (IY+$00)   ;
 $BD21 JR Z,$BD3E    ;
 $BD23 LD C,(IY+$00) ;
 $BD26 CP (IY+$02)   ;
 $BD29 JR Z,$BD3E    ;
 $BD2B LD B,(IX+$00) ;
 $BD2E LD A,(IX+$02) ;
 $BD31 CP (IY+$02)   ;
 $BD34 JR Z,$BD3E    ;
 $BD36 LD C,(IY+$02) ;
 $BD39 CP (IY+$00)   ;
 $BD3C JR NZ,$BD10   ;
*$BD3E LD A,B        ;
 $BD3F CP C          ;
 $BD40 JR Z,$BD10    ;
 $BD42 POP IY        ;
 $BD44 XOR A         ;
 $BD45 RET           ;
*$BD46 OR $01        ;
 $BD48 POP IY        ;
 $BD4A RET           ;

; Routine at BD4B
;
; Used by the routine at #R$BA20.
c$BD4B LD IX,$9A7D   ;
 $BD4F JR $BD55      ;

; Routine at BD51
;
; Used by the routines at #R$BA20 and #R$BC21.
c$BD51 LD IX,$9965   ;
; This entry point is used by the routine at #R$BD4B.
*$BD55 LD A,(IX+$00) ;
 $BD58 CP $FF        ;
 $BD5A JR Z,$BD66    ;
 $BD5C CALL $BD69    ;
 $BD5F JR Z,$BD68    ;
 $BD61 CALL $BE5A    ;
 $BD64 JR $BD55      ;
*$BD66 OR $01        ;
*$BD68 RET           ;
*$BD69 LD A,($BA1A)  ;
 $BD6C CP (IX+$01)   ;
 $BD6F RET NZ        ;
 $BD70 LD A,($BA19)  ;
 $BD73 CP (IX+$00)   ;
 $BD76 RET NZ        ;
 $BD77 LD A,($BA1B)  ;
 $BD7A CP (IX+$02)   ;
 $BD7D RET           ;

; Routine at BD7E
;
; Used by the routine at #R$BA20.
c$BD7E PUSH IY        ;
 $BD80 POP HL         ;
 $BD81 LD DE,$0018    ;
 $BD84 ADD HL,DE      ;
 $BD85 BIT 7,(IY+$19) ;
 $BD89 JR Z,$BD8E     ;
 $BD8B LD HL,$9FF6    ;
*$BD8E BIT 6,(IY+$19) ;
 $BD92 JR Z,$BD97     ;
 $BD94 LD HL,$9FFC    ;
*$BD97 LD DE,$B172    ;
 $BD9A LD BC,$0006    ;
 $BD9D LDIR           ;
 $BD9F PUSH IY        ;
 $BDA1 POP HL         ;
 $BDA2 LD DE,$0008    ;
 $BDA5 ADD HL,DE      ;
 $BDA6 LD DE,$B178    ;
 $BDA9 LD BC,$0006    ;
 $BDAC LDIR           ;
 $BDAE LD L,(IY+$00)  ;
 $BDB1 LD A,(IY+$01)  ;
 $BDB4 AND $0F        ;
 $BDB6 LD H,A         ;
 $BDB7 LD ($BA17),HL  ;
 $BDBA PUSH IY        ;
 $BDBC CALL $BDC2     ;
 $BDBF POP IY         ;
 $BDC1 RET            ;
*$BDC2 CALL $D04F     ;
 $BDC5 LD ($BA13),IX  ;
 $BDC9 LD ($BA15),IX  ;
 $BDCD LD DE,($BA17)  ;
 $BDD1 LD HL,$994D    ;
 $BDD4 LD B,$01       ;
*$BDD6 LD A,(HL)      ;
 $BDD7 INC HL         ;
 $BDD8 OR (HL)        ;
 $BDD9 DEC HL         ;
 $BDDA RET Z          ;
 $BDDB LD A,E         ;
 $BDDC CP (HL)        ;
 $BDDD JR NZ,$BDE5    ;
 $BDDF INC HL         ;
 $BDE0 LD A,D         ;
 $BDE1 CP (HL)        ;
 $BDE2 DEC HL         ;
 $BDE3 JR Z,$BDEA     ;
*$BDE5 INC HL         ;
 $BDE6 INC HL         ;
 $BDE7 INC B          ;
 $BDE8 JR $BDD6       ;
*$BDEA LD A,B         ;
 $BDEB LD ($BA1A),A   ;
 $BDEE LD A,$02       ;
 $BDF0 LD ($A038),A   ;
 $BDF3 CALL $BE3C     ;
 $BDF6 CP $FF         ;
 $BDF8 RET Z          ;
 $BDF9 LD ($BA19),A   ;
 $BDFC CALL $BE3C     ;
 $BDFF CP $FF         ;
 $BE01 JR NZ,$BE3A    ;
 $BE03 LD A,($BA19)   ;
 $BE06 CALL $BE22     ;
 $BE09 CALL $BE4B     ;
 $BE0C CP $FF         ;
 $BE0E RET Z          ;
 $BE0F LD ($BA1B),A   ;
 $BE12 CALL $BE4B     ;
 $BE15 CP $FF         ;
 $BE17 JR NZ,$BE3A    ;
 $BE19 LD A,($BA1B)   ;
 $BE1C CALL $BE22     ;
 $BE1F OR $01         ;
 $BE21 RET            ;
*$BE22 CALL $D237     ;
 $BE25 PUSH IX        ;
 $BE27 POP HL         ;
 $BE28 BIT 6,(IX+$05) ;
 $BE2C LD DE,$9FF6    ;
 $BE2F JR NZ,$BE34    ;
 $BE31 LD DE,$9FFC    ;
*$BE34 LD BC,$0006    ;
 $BE37 LDIR           ;
 $BE39 RET            ;
*$BE3A SCF            ;
 $BE3B RET            ;
*$BE3C LD IX,($BA13)  ;
 $BE40 LD HL,$B172    ;
 $BE43 CALL $D36A     ;
 $BE46 LD ($BA13),IX  ;
 $BE4A RET            ;
*$BE4B LD IX,($BA15)  ;
 $BE4F LD HL,$B178    ;
 $BE52 CALL $D36A     ;
 $BE55 LD ($BA15),IX  ;
 $BE59 RET            ;

; Routine at BE5A
;
; Used by the routines at #R$BA20, #R$BC46, #R$BC74, #R$BD51, #R$BE72 and
; #R$BF08.
c$BE5A PUSH AF        ;
 $BE5B LD DE,$0002    ;
 $BE5E ADD IX,DE      ;
 $BE60 ADD IX,DE      ;
 $BE62 BIT 5,(IX-$01) ;
 $BE66 JR NZ,$BE6E    ;
 $BE68 BIT 4,(IX-$01) ;
 $BE6C JR Z,$BE70     ;
*$BE6E ADD IX,DE      ;
*$BE70 POP AF         ;
 $BE71 RET            ;

; Routine at BE72
;
; Used by the routines at #R$BA20 and #R$BC9C.
c$BE72 PUSH AF        ;
 $BE73 LD B,$00       ;
*$BE75 LD C,(IX+$03)  ;
 $BE78 CALL $BE5A     ;
 $BE7B BIT 3,C        ;
 $BE7D JR Z,$BE84     ;
 $BE7F LD A,B         ;
 $BE80 AND A          ;
 $BE81 JR Z,$BE84     ;
 $BE83 DEC B          ;
*$BE84 BIT 2,C        ;
 $BE86 JR Z,$BE8B     ;
 $BE88 INC B          ;
 $BE89 JR $BE75       ;
*$BE8B LD A,B         ;
 $BE8C AND A          ;
 $BE8D JR NZ,$BE75    ;
 $BE8F POP AF         ;
 $BE90 RET            ;
; This entry point is used by the routine at #R$BF08.
*$BE91 BIT 1,(IX+$03) ;
 $BE95 JR NZ,$BE72    ;
 $BE97 LD A,(IX+$03)  ;
 $BE9A AND $C0        ;
 $BE9C CP $00         ;
 $BE9E JR NZ,$BECD    ;
 $BEA0 LD A,(IX+$00)  ;
 $BEA3 PUSH IX        ;
 $BEA5 CALL $D237     ;
 $BEA8 BIT 7,(IX+$06) ;
 $BEAC POP IX         ;
 $BEAE JR Z,$BE72     ;
 $BEB0 LD A,(IX+$02)  ;
 $BEB3 PUSH IX        ;
 $BEB5 CALL $D237     ;
 $BEB8 BIT 7,(IX+$06) ;
 $BEBC POP IX         ;
 $BEBE JR Z,$BE72     ;
*$BEC0 SET 1,(IX+$03) ;
 $BEC4 RES 0,(IX+$03) ;
 $BEC8 OR $01         ;
 $BECA JP $BE72       ;
*$BECD CP $80         ;
 $BECF JR Z,$BE72     ;
 $BED1 CP $40         ;
 $BED3 JR NZ,$BEF6    ;
 $BED5 LD A,(IX+$00)  ;
 $BED8 PUSH IX        ;
 $BEDA CALL $D237     ;
 $BEDD BIT 6,(IX+$06) ;
 $BEE1 POP IX         ;
 $BEE3 JR Z,$BE72     ;
 $BEE5 LD A,(IX+$02)  ;
 $BEE8 PUSH IX        ;
 $BEEA CALL $D237     ;
 $BEED BIT 6,(IX+$06) ;
 $BEF1 POP IX         ;
 $BEF3 JP Z,$BE72     ;
*$BEF6 BIT 2,(IX+$03) ;
 $BEFA JR Z,$BEC0     ;
 $BEFC PUSH IX        ;
 $BEFE CALL $BF08     ;
 $BF01 POP IX         ;
 $BF03 JR NZ,$BEC0    ;
 $BF05 JP $BE72       ;

; Routine at BF08
;
; Used by the routines at #R$BCC9 and #R$BE72.
c$BF08 CALL $BE5A     ;
*$BF0B BIT 3,(IX+$03) ;
 $BF0F PUSH AF        ;
 $BF10 CALL $BE91     ;
 $BF13 JR NZ,$BF18    ;
 $BF15 POP AF         ;
 $BF16 XOR A          ;
 $BF17 RET            ;
*$BF18 POP AF         ;
 $BF19 JR Z,$BF0B     ;
 $BF1B RET            ;

; Routine at BF1C
;
; Used by the routine at #R$A711.
c$BF1C LD A,(IX+$00) ;
 $BF1F CALL $A4BC    ;
 $BF22 PUSH HL       ;
 $BF23 POP IY        ;
 $BF25 CALL $D3E8    ;
 $BF28 CALL $BF45    ;
 $BF2B JR Z,$BF3D    ;
 $BF2D CALL $A887    ;
*$BF30 LD A,(IX+$02) ;
 $BF33 CALL $A4BC    ;
 $BF36 PUSH HL       ;
 $BF37 POP IY        ;
 $BF39 CALL $D3E8    ;
 $BF3C RET           ;
*$BF3D LD DE,$005D   ;
 $BF40 CALL $A887    ;
 $BF43 JR $BF30      ;

; Routine at BF45
;
; Used by the routine at #R$BF1C.
c$BF45 LD A,(IX+$01) ;
 $BF48 AND A         ;
 $BF49 RET Z         ;
 $BF4A DEC A         ;
 $BF4B LD E,A        ;
 $BF4C LD D,$00      ;
 $BF4E LD HL,$994D   ;
 $BF51 ADD HL,DE     ;
 $BF52 ADD HL,DE     ;
 $BF53 LD E,(HL)     ;
 $BF54 INC HL        ;
 $BF55 LD D,(HL)     ;
 $BF56 OR $01        ;
 $BF58 RET           ;

; Table: Days Of The Week Strings
@label=Table_DaysOfWeekStrings
t$BF59 DEFM "Mon"
 $BF5C DEFM "Tue"
 $BF5F DEFM "Wed"
 $BF62 DEFM "Thu"
 $BF65 DEFM "Fri"
 $BF68 DEFM "Sat"
 $BF6B DEFM "Sun"

; Messaging: Current Date
@label=Messaging_CurrentDate
g$BF6E DEFM "MON 00:00am" ; "#STR$BF6E,$08,$0B".

; Handler: Date Bar
;
; Used by the routine at #R$A040.
;
; .
;
; #PUSHS #SIM(start=$BF79,stop=$C1BF)
; #UDGTABLE {
;   #SCR$02{$00,$120,$200,$10}(date-bar)
; } UDGTABLE# #POPS
@label=Handler_DateBar
c$BF79 LD IX,$BF6E   ; #REGix=#R$BF6E.
 $BF7D LD A,($9FE1)  ; #REGa=*#R$9FE1.
 $BF80 LD HL,$BF59   ; #REGhl=#R$BF59.
 $BF83 CALL $BFC6    ; Call #R$BFC6.
 $BF86 INC IX        ; Increment #REGix by one.
 $BF88 LD A,($9FE0)  ; #REGa=*#R$9FE0.
 $BF8B CALL $BFB0    ; Call #R$BFB0.
 $BF8E INC IX        ; Increment #REGix by one.
 $BF90 LD A,($9FDF)  ; #REGa=*#R$9FDF.
 $BF93 CALL $BFB0    ; Call #R$BFB0.
 $BF96 LD A,($9FE2)  ; {Write *#R$9FE2 to *#REGix+#N$00.
 $BF99 LD (IX+$00),A ; }
; Now the date bar has been updated, set up printing it to the screen.
 $BF9C LD HL,$BF6E   ; Load #REGhl with a pointer to #R$BF6E.
 $BF9F LD B,$0B      ; Set the length of the date bar in #REGb (#N$0B bytes).
 $BFA1 JP $C1A8      ; Jump to #R$C1A8.

; Routine at BFA4
;
; Used by the routine at #R$BFB0.
c$BFA4 CALL $BFAA    ;
 $BFA7 LD A,L        ;
 $BFA8 ADD A,$30     ;
*$BFAA LD (IX+$00),A ;
 $BFAD INC IX        ;
 $BFAF RET           ;

; Routine at BFB0
;
; Used by the routine at #R$BF79.
c$BFB0 LD L,A        ; #REGl=#REGa.
 $BFB1 LD H,$00      ; #REGh=#N$00.
 $BFB3 LD DE,$000A   ; #REGde=#N($000A,$04,$04).
 $BFB6 CALL $BFBB    ; Call #R$BFBB.
 $BFB9 JR $BFA4      ; Jump to #R$BFA4.
*$BFBB LD C,$2F      ; #REGc=#N$2F.
*$BFBD INC C         ; Increment #REGc by one.
 $BFBE AND A         ; {#REGhl-=#REGde (with carry).
 $BFBF SBC HL,DE     ; }
 $BFC1 JR NC,$BFBD   ; Jump to #R$BFBD if #REGc is greater than or equal to
                     ; #REGa.
 $BFC3 ADD HL,DE     ; #REGhl+=#REGde.
 $BFC4 LD A,C        ; #REGa=#REGc.
 $BFC5 RET           ; Return.

; Populate Day Of The Week
;
; Used by the routine at #R$BF79.
;
; A Number representing the current day of the week
; HL Pointer to the table containing the days of the week strings
; IX Pointer to the current date messaging
@label=PopulateDayOfWeek
c$BFC6 LD C,A        ; {Multiply the day of the week by #N$03 and store the result in
 $BFC7 ADD A,A       ; #REGbc.
 $BFC8 ADD A,C       ;
 $BFC9 LD C,A        ;
 $BFCA LD B,$00      ; }
 $BFCC ADD HL,BC     ; Add this to the base address of the table containing the days of
                     ; the week strings.
; Each day string is three characters long (e.g. "Mon" for Monday).
 $BFCD LD B,$03      ; Set a counter in #REGb for three characters.
@label=PopulateDayOfWeek_Loop
*$BFCF LD A,(HL)     ; Fetch a character from the table containing the days of the week
                     ; strings.
 $BFD0 LD (IX+$00),A ; Write the character to the current date messaging.
 $BFD3 INC IX        ; Move to the next character in the current date
                     ; messaging.
 $BFD5 INC HL        ; Move to the next character in the days of the week
                     ; string table.
 $BFD6 DJNZ $BFCF    ; Decrease the character counter by one and loop back to #R$BFCF
                     ; until all three characters of the current day have been copied into the
                     ; current date messaging bar.
 $BFD8 RET           ; Return.

; Handler: Game Clock
;
; Used by the routine at #R$A040.
;
; .
;
; Handle the game ticker.
@label=Handler_GameClock
c$BFD9 LD HL,($9FDD) ; {Increment *#R$9FDD by one.
 $BFDC INC HL        ;
 $BFDD LD ($9FDD),HL ; }
; Handle the clock minutes.
 $BFE0 LD HL,$9FDF   ; {Increment *#R$9FDF by one.
 $BFE3 INC (HL)      ; }
 $BFE4 LD A,(HL)     ; {Return if *#REGhl is not equal to 60 (e.g. it's less than 60
 $BFE5 CP $3C        ; minutes).
 $BFE7 RET NZ        ; }
; The minutes is at 60, which is invalid - so handle rolling the clock
; hour digits.
 $BFE8 LD (HL),$00   ; Reset the minutes back to #N$00 at *#REGhl.
; Handle the clock hours.
 $BFEA LD HL,$9FE0   ; {Increment *#R$9FE0 by one.
 $BFED INC (HL)      ; }
 $BFEE LD A,(HL)     ; {Jump to #R$BFF6 if *#REGhl is not equal to 13 (e.g. it's less than
 $BFEF CP $0D        ; 13 o'clock).
 $BFF1 JR NZ,$BFF6   ; }
; The hours is at 13. which is invalid - so handle rolling the clock.
 $BFF3 LD (HL),$01   ; Reset the hours back to #N$01 at *#REGhl.
 $BFF5 RET           ; Return.
; Is it midday yet?
@label=Handler_GameClock_AM_PM
*$BFF6 CP $0C        ; {Return if *#REGhl is not equal to 12.
 $BFF8 RET NZ        ; }
; It's either midday or midnight, so flip between AM and PM.
 $BFF9 LD A,($9FE2)  ; #REGa=*#R$9FE2.
; Smart way of altering the letter from "a" to "p" and back again.
; #TABLE(default,centre,centre)
; { =h Letter | =h Bits }
; { "a" | #EVAL($61,$02,$08) }
; { "p" | #EVAL($70,$02,$08) }
; TABLE#
 $BFFC XOR %00010001 ; Flip bits 0, 4.
 $BFFE LD ($9FE2),A  ; Write this back to *#R$9FE2.
; If the clock went from PM to AM, handle rolling the day of the week.
 $C001 CP $61        ; {Return if #REGa is not equal to ASCII #N$61
 $C003 RET NZ        ; ("#CHR$61").}
 $C004 LD A,($9FE1)  ; {Increment *#R$9FE1 by one.
 $C007 INC A         ;
 $C008 LD ($9FE1),A  ; }
 $C00B RET           ; Return.

; Get Time Period
;
; Used by the routines at #R$A68C, #R$A694, #R$A69C, #R$A6A4, #R$A6AC and
; #R$D078.
; .
; Handles calculating a time-period code for scheduling events.
; #TABLE(default,centre)
; { =h Time Period Code | =h Meaning }
; { #N$01 | Late night/ evening (8 PM - 5 AM) }
; { #N$02 | 7 PM }
; { #N$03 | Afternoon (1 PM - 6 PM) }
; { #N$04 | Morning/ Midday (7 AM - 12 PM) }
; { #N$05 | 6 AM }
; TABLE#
;
; O:A Time period code
@label=GetTimePeriod
c$C00C LD A,($9FE2)  ; Fetch *#R$9FE2.
 $C00F CP $61        ; Check if its "A" for AM.
 $C011 LD A,($9FE0)  ; Load *#R$9FE0 into #REGa.
; Is it morning?
 $C014 JR Z,$C02B    ; Jump to #R$C02B if *#R$9FE2 is ASCII #N$61 ("#CHR$61").
; It's the afternoon (as in, "PM").
 $C016 CP $0C        ; {Jump to #R$C035 if it's noon (12 PM).
 $C018 JR Z,$C035    ; }
 $C01A CP $08        ; {Jump to #R$C021 if it's before 8 PM.
 $C01C JR C,$C021    ; }
; It's late PM/ evening; 8 PM - 11 PM.
@label=TimePeriod_LateEvening
*$C01E LD A,$01      ; #REGa=#N$01.
 $C020 RET           ; Return.
; It's before 8 PM, but break this down further.
@label=TimePeriod_Pre_8PM
*$C021 CP $07        ; {Jump to #R$C028 if its not 7 PM.
 $C023 JR NZ,$C028   ; }
; It's 7 PM.
 $C025 LD A,$02      ; #REGa=#N$02.
 $C027 RET           ; Return.
; It's afternoon/ early PM; 1 PM - 6 PM.
@label=TimePeriod_Afternoon
*$C028 LD A,$03      ; #REGa=#N$03.
 $C02A RET           ; Return.
; It's morning, but break this down further.
@label=TimePeriod_AM
*$C02B CP $0C        ; {Jump to #R$C01E if it's midnight (12 AM).
 $C02D JR Z,$C01E    ; }
 $C02F CP $06        ; {Jump to #R$C01E if it's before 6 AM.
 $C031 JR C,$C01E    ; }
 $C033 JR Z,$C038    ; Jump to #R$C038 if it's 6 AM.
; It's morning; 7 AM - noon (12 PM).
@label=TimePeriod_Morning
*$C035 LD A,$04      ; #REGa=#N$04.
 $C037 RET           ; Return.
; It's early morning; 6 AM.
@label=TimePeriod_EarlyMorning
*$C038 LD A,$05      ; #REGa=#N$05.
 $C03A RET           ; Return.

; Routine at C03B
;
; Used by the routine at #R$AFE1.
c$C03B IN A,($FB)    ;
 $C03D AND $40       ;
 $C03F RET           ;

; Save Game
;
; Used by the routine at #R$B0E4.
;
; .
;
; Prints "#STR$09A2".
@label=SaveGame
c$C040 LD HL,$09A2   ; #REGhl=#N$09A2.
 $C043 CALL $C1C0    ; Call #R$C1C0.
 $C046 LD ($C109),DE ; Write #REGde to *#R$C109.
 $C04A LD ($C10B),IX ; Write #REGix to *#R$C10B.
 $C04E LD IX,$C0FE   ; #REGix=#R$C0FE.
 $C052 LD DE,$0011   ; #REGde=#N($0011,$04,$04).
 $C055 XOR A         ; Set #REGa to #N$00 to indicate this is a header block.
 $C056 CALL $04C2    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/04C2.html">SA_BYTES</a>.)
 $C059 LD B,$32      ; #REGb=#N$32.
@label=SaveGame_PauseLoop
*$C05B HALT          ; Halt operation (suspend CPU until the next interrupt).
 $C05C DJNZ $C05B    ; Decrease counter by one and loop back to #R$C05B until
                     ; counter is zero.
 $C05E DI            ; Disable interrupts.
 $C05F LD DE,($C109) ; #REGde=*#R$C109.
 $C063 LD IX,($C10B) ; #REGix=*#R$C10B.
 $C067 LD A,$FF      ; Set #REGa to #N$FF to indicate this is a data block.
 $C069 CALL $04C2    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/04C2.html">SA_BYTES</a>.)
 $C06C DI            ; Disable interrupts.
; Prints "#STR$C0A5".
 $C06D LD HL,$C0A5   ; #REGhl=#R$C0A5.
 $C070 CALL $C1CB    ; Call #R$C1CB.
; Prints "#STR$09AC".
 $C073 LD HL,$09AC   ; #REGhl=#N$09AC.
 $C076 CALL $C1C0    ; Call #R$C1C0.
 $C079 LD IX,$C0FE   ; #REGix=#R$C0FE.
 $C07D LD DE,$0011   ; #REGde=#N($0011,$04,$04).
 $C080 LD A,$00      ; Set #REGa to #N$00 to indicate this is a header block.
 $C082 AND A         ; Set flags.
 $C083 CALL $0556    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0556.html">LD_BYTES</a>.)
 $C086 JR NC,$C098   ; Jump to #R$C098 if there was any error returned.
 $C088 AND A         ; Set flags.
; This entry point is used by the routine at #R$C0DF.
@label=LoadGameData
*$C089 LD DE,($C109) ; #REGde=*#R$C109.
 $C08D LD IX,($C10B) ; #REGix=*#R$C10B.
 $C091 LD A,$FF      ; Set #REGa to #N$FF to indicate this is a data block.
 $C093 CALL $0556    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0556.html">LD_BYTES</a>.)
 $C096 DI            ; Disable interrupts.
 $C097 RET C         ; Return if there were no tape loading errors.
; There were errors ... so alert the player.
@label=SaveGame_Error
*$C098 DI            ; Disable interrupts.
; Prints "#STR$C0B1".
 $C099 LD HL,$C0B1   ; #REGhl=#R$C0B1.
 $C09C CALL $C1CB    ; Call #R$C1CB.
; Prints "#STR$09B2".
 $C09F LD HL,$09B2   ; #REGhl=#N$09B2.
 $C0A2 JP $C1C0      ; Jump to #R$C1C0.

; Messaging: Rewind Tape
@label=Messaging_RewindTape
t$C0A5 DEFM "REWIND TAPE",$AE ; "#STR$C0A5".

; Messaging: Tape Error
@label=Messaging_TapeError
t$C0B1 DEFM "TAPE ERROR",$AE ; "#STR$C0B1".

; Messaging: Play Saved Game Tape
@label=Messaging_PlaySavedGameTape
t$C0BC DEFM "PLAY SAVED GAME TAPE TO BE LOADED",$0D,$AE ; "#STR$C0BC".

; Load Game
;
; Used by the routine at #R$B0D7.
@label=LoadGame
c$C0DF LD ($C109),DE ; Write #REGde to *#R$C109.
 $C0E3 LD ($C10B),IX ; Write #REGix to *#R$C10B.
; "#STR$C0BC".
 $C0E7 LD HL,$C0BC   ; #REGhl=#R$C0BC.
 $C0EA CALL $C1CB    ; Call #R$C1CB.
@label=TryLoading
*$C0ED LD IX,$C0FE   ; #REGix=#R$C0FE.
 $C0F1 LD DE,$0011   ; #REGde=#N($0011,$04,$04).
 $C0F4 LD A,$00      ; Set #REGa to #N$00 to indicate this is a header block.
 $C0F6 AND A         ; Set flags.
 $C0F7 CALL $0556    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0556.html">LD_BYTES</a>.)
 $C0FA JR NC,$C0ED   ; Jump back to #R$C0ED if there was a tape loading error to try
                     ; again.
 $C0FC JR $C089      ; Jump to #R$C089.

; Data block at C0FE
b$C0FE DEFB $03,$53,$48,$44,$20,$56,$32,$2E
 $C106 DEFB $30,$20,$20
 $C109 DEFW $0000
 $C10B DEFW $0000
 $C10D DEFW $8000

; Clear Screen
;
; Used by the routine at #R$C14A.
@label=ClearScreen
c$C10F LD A,$07      ; {Set border colour to #INK$07.
 $C111 OUT ($FE),A   ; }
 $C113 LD HL,$4000   ; #REGhl=#N$4000 (screen buffer location).
 $C116 LD DE,$4001   ; #REGde=#N$4001.
 $C119 LD BC,$1800   ; #REGbc=#N$1800.
 $C11C LD (HL),$00   ; Write #N$00 to the screen buffer.
 $C11E LDIR          ; Copy the #N$00 across the rest of the screen buffer
                     ; bytes.
 $C120 LD BC,$02FF   ; #REGbc=#N$02FF.
 $C123 LD (HL),$38   ; Write #COLOUR$38 to the attribute buffer.
 $C125 LDIR          ; Copy the #N$38 across the rest of the attribute buffer
                     ; bytes.
 $C127 RET           ; Return.

; Game status buffer entry at C128
g$C128 DEFB $00

; Routine at C129
;
; Used by the routine at #R$A277.
c$C129 XOR A         ; {Write #N$00 to *#R$A019.
 $C12A LD ($A019),A  ; }
 $C12D INC A         ; {Write #N$01 to *#R$C128.
 $C12E LD ($C128),A  ; }
 $C131 LD A,$12      ; {Write #N$12 to *#R$C1F5.
; This entry point is used by the routine at #R$C142.
*$C133 LD ($C1F5),A  ; }
 $C136 LD HL,$5020   ; {Write #N$5020 (screen buffer location) to *#R$C1F8.
 $C139 LD ($C1F8),HL ; }
 $C13C LD A,$02      ; {Write #N$02 to *#R$C1FA.
 $C13E LD ($C1FA),A  ; }
 $C141 RET           ; Return.

; Routine at C142
;
; Used by the routines at #R$C14A and #R$C306.
c$C142 XOR A         ; {Write #N$00 to *#R$C128.
 $C143 LD ($C128),A  ; }
 $C146 LD A,$24      ; #REGa=#N$24.
 $C148 JR $C133      ; Jump to #R$C133.

; Draw Decorative Line
;
; Used by the routine at #R$A040.
; .
; Draws a decorative horizontal pattern on screen as a separator.
; .
; #PUSHS #SIM(start=$C14A,stop=$C18F)
; #UDGTABLE
; { #SCR$02{$00,$120,$200,$10}(decorative-line) }
; UDGTABLE# #POPS
@label=DrawDecorativeLine
c$C14A CALL $C10F    ; Call #R$C10F.
 $C14D LD A,$24      ; {Store the width value (#N$24) at *#R$C1F4.
 $C14F LD ($C1F4),A  ; }
 $C152 LD HL,$50E0   ; {Initialise the screen buffer starting point (#N$50E0)
 $C155 LD ($C1F6),HL ; at *#R$C1F6.}
 $C158 LD A,$02      ; Load the height value (#N$02) into #REGa.
@label=DrawDecorativeLine_Custom
 $C15A LD ($C1FB),A  ; Store the height value in *#R$C1FB.
 $C15D CALL $C142    ; Call #R$C142.
 $C160 LD HL,$5140   ; #REGhl=#N$5140 (screen buffer location).
 $C163 LD DE,$C190   ; #REGde=#R$C190.
 $C166 LD B,$06      ; Set a counter in #REGb for #N$06 rows.
@label=DrawDecorativeLine_RowLoop
*$C168 LD C,$08      ; Set a counter in #REGc for #N$08 repetitions.
 $C16A PUSH BC       ; {Stash the row counters and screen position on the
 $C16B PUSH HL       ; stack.}
@label=DrawDecorativeLine_SegmentLoop
*$C16C LD B,$04      ; #REGb=#N$04.
 $C16E PUSH DE       ; Stash #REGde on the stack.
@label=DrawDecorativeLine_CopyPatternLoop
*$C16F LD A,(DE)     ; {Copy the pattern byte to the current screen position.
 $C170 LD (HL),A     ; }
 $C171 INC DE        ; Increment the pattern pointer by one.
 $C172 INC L         ; Increment the screen position column by one.
 $C173 DJNZ $C16F    ; Decrease counter by one and loop back to #R$C16F until
                     ; counter is zero.
 $C175 POP DE        ; Restore the pattern pointer from the stack.
 $C176 DEC C         ; Decrease the segment counter by one.
 $C177 JR NZ,$C16C   ; Jump back to #R$C16C until all segments have been drawn.
; Skip to the next pattern.
 $C179 INC DE        ; {Increment the pattern pointer by four.
 $C17A INC DE        ;
 $C17B INC DE        ;
 $C17C INC DE        ; }
 $C17D POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $C17E POP BC        ; }
 $C17F INC H         ; Increment #REGh by one.
 $C180 DJNZ $C168    ; Decrease counter by one and loop back to #R$C168 until
                     ; counter is zero.
; Now colour the line BRIGHT WHITE.
 $C182 LD HL,$5A40   ; {Write #COLOUR$78 to #N($0020,$04,$04) bytes starting from #N$5A40
 $C185 LD DE,$5A41   ; (attribute buffer location).
 $C188 LD BC,$001F   ;
 $C18B LD (HL),$78   ;
 $C18D LDIR          ; }
 $C18F RET           ; Return.

; Data: Decorative Line
@label=Data_DecorativeLine
b$C190 DEFB $00,$3F,$C1,$C0,$20,$FE,$01,$C4
 $C198 DEFB $81,$E8,$0D,$81,$41,$B0,$17,$82
 $C1A0 DEFB $83,$80,$7F,$01,$23,$83,$FC,$04

; Print Date Bar
;
; Used by the routine at #R$BF79.
;
; HL Date messaging string
; B Length of messaging string
@label=PrintDateBar
c$C1A8 LD DE,$5041   ; Set the screen buffer position in #REGhl (#N$5041).
 $C1AB EX DE,HL      ; #REGde=Pointer to date bar messaging string.
 $C1AC LD C,$00      ; #REGc=#N$00.
; Print a "SPACE" before the date string.
 $C1AE LD A,$20      ; Load ASCII "SPACE" (#N$20) into #REGa.
 $C1B0 CALL $C388    ; Call #R$C388.
; Loop through the date messaging string and output it to the screen.
@label=PrintDateBar_Loop
*$C1B3 LD A,(DE)     ; Fetch a character from *#REGde and store it in #REGa.
 $C1B4 CALL $C388    ; Call #R$C388.
 $C1B7 INC DE        ; Move to the next character of the message.
 $C1B8 DJNZ $C1B3    ; Decrease the string length counter by one and loop back to #R$C1B3
                     ; until the whole of the date bar has been printed to the screen.
; Print a "SPACE" after the date string.
 $C1BA LD A,$20      ; Load ASCII "SPACE" (#N$20) into #REGa.
 $C1BC CALL $C388    ; Call #R$C388.
 $C1BF RET           ; Return.

; Print String And Wait For Keypress
;
; Used by the routines at #R$C040 and #R$C1D8.
@label=PrintStringAndWaitForKeypress
c$C1C0 CALL $C1CB    ; Call #R$C1CB.
 $C1C3 CALL $C415    ; Call #R$C415.
 $C1C6 LD A,$0D      ; Load "ENTER" (ASCII #N$0D) into #REGa for printing a newline
                     ; character.
 $C1C8 JP $C1FD      ; Jump to #R$C1FD.

; Print String
;
; Used by the routines at #R$C040, #R$C0DF and #R$C1C0.
;
; HL Pointer to the string data
@label=PrintString
c$C1CB LD A,(HL)     ; #REGa=*#REGhl.
; Strip off the termination bit to leave only the ASCII value.
 $C1CC AND %01111111 ; Keep only bits 0-6.
 $C1CE CALL $C1FD    ; Call #R$C1FD.
; The string is terminated by bit 7 being set, so check if this is the
; final character or not.
 $C1D1 BIT 7,(HL)    ; {Return if bit 7 of *#REGhl is set.
 $C1D3 RET NZ        ; }
 $C1D4 INC HL        ; Move to the next byte in the string.
 $C1D5 JR $C1CB      ; Jump back to #R$C1CB.

; Unused
u$C1D7 DEFB $C9      ; Return.

; Error: Out Of Memory
;
; Used by the routine at #R$A11C.
;
; .
;
; Prints "#STR$13C5".
@label=Error_OutOfMemory
c$C1D8 LD HL,$13C5   ; #REGhl=#N$13C5.
 $C1DB CALL $C1C0    ; Call #R$C1C0.
 $C1DE JP $A0EB      ; Jump to #R$A0EB.

; Routine at C1E1
;
; Used by the routine at #R$A9B7.
c$C1E1 PUSH AF       ; Stash #REGaf on the stack.
 $C1E2 LD A,($5C3C)  ; {#HTML(Jump to #R$C1EA if *<a rel="noopener nofollow"
 $C1E5 AND A         ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3C.html">TV-FLAG</a>
 $C1E6 JR NZ,$C1EA   ; is not zero.)}
 $C1E8 POP AF        ; Restore #REGaf from the stack.
 $C1E9 RET           ; Return.
*$C1EA LD A,($A027)  ; {Jump to #R$C1FC if *#R$A027 is not zero.
 $C1ED AND A         ;
 $C1EE JR NZ,$C1FC   ; }
 $C1F0 POP AF        ; Restore #REGaf from the stack.
 $C1F1 JP $C2BA      ; Jump to #R$C2BA.

; Storage Decorative Line Width
@label=DecorativeLine_Width
g$C1F4 DEFB $00

; Game status buffer entry at C1F5
g$C1F5 DEFB $00

; Storage Decorative Line Screen Position
@label=DecorativeLine_ScreenPosition
g$C1F6 DEFW $0000
 $C1F8 DEFB $00,$00

; Game status buffer entry at C1FA
g$C1FA DEFB $00

; Game status buffer entry at C1FB
g$C1FB DEFB $00

; Routine at C1FC
;
; Used by the routine at #R$C1E1.
c$C1FC POP AF        ; Restore #REGaf from the stack.
; This entry point is used by the routines at #R$C1C0 and #R$C1CB.
*$C1FD PUSH HL       ; {Stash #REGhl, #REGbc and #REGaf on the stack.
 $C1FE PUSH BC       ;
 $C1FF PUSH AF       ; }
 $C200 LD A,($C1FB)  ; {#REGc=*#R$C1FB.
 $C203 LD C,A        ; }
 $C204 POP AF        ; Restore #REGaf from the stack.
 $C205 PUSH AF       ; Stash #REGaf on the stack.
 $C206 LD HL,($C1F6) ; #REGhl=*#R$C1F6.
 $C209 CP $0D        ; {Jump to #R$C214 if #REGa is not equal to #N$0D.
 $C20B JR NZ,$C214   ; }
 $C20D LD A,$20      ; #REGa=#N$20.
; This entry point is used by the routine at #R$E691.
*$C20F CALL $C388    ; Call #R$C388.
 $C212 JR $C224      ; Jump to #R$C224.
*$C214 CP $08        ; {Jump to #R$C249 if #REGa is equal to #N$08.
 $C216 JR Z,$C249    ; }
 $C218 CALL $C240    ; Call #R$C240.
 $C21B CALL $C388    ; Call #R$C388.
 $C21E LD A,($C1F4)  ; #REGa=*#R$C1F4.
 $C221 DEC A         ; Decrease #REGa by one.
 $C222 JR NZ,$C22D   ; Jump to #R$C22D if #REGa is not equal to #N$08.
*$C224 LD L,$E0      ; #REGl=#N$E0.
 $C226 LD C,$02      ; #REGc=#N$02.
 $C228 CALL $C271    ; Call #R$C271.
 $C22B LD A,$24      ; #REGa=#N$24.
; This entry point is used by the routine at #R$C249.
*$C22D LD ($C1F4),A  ; Write #REGa to *#R$C1F4.
 $C230 LD A,C        ; {Write #REGc to *#R$C1FB.
 $C231 LD ($C1FB),A  ; }
 $C234 LD ($C1F6),HL ; Write #REGhl to *#R$C1F6.
 $C237 LD A,$2B      ; Load #REGa with ASCII code #N$2B ("#CHR$2B").
 $C239 CALL $C388    ; Call #R$C388.
 $C23C POP AF        ; {Restore #REGaf, #REGbc and #REGhl from the stack.
 $C23D POP BC        ;
 $C23E POP HL        ; }
 $C23F RET           ; Return.

; Validate Keypress
;
; Used by the routines at #R$C1FC and #R$C41F.
@label=ValidateKeypress
c$C240 CP $61        ; {Return if the keypress ASCII code is less than #N$61 ("#CHR$61") or
 $C242 RET C         ; greater than #N$7A ("#CHR$7A").
 $C243 CP $7B        ;
 $C245 RET NC        ; }
 $C246 AND %01011111 ; Keep only bits 0-4, 6.
 $C248 RET           ; Return.

; Routine at C249
;
; Used by the routine at #R$C1FC.
c$C249 LD A,$20      ; #REGa=#N$20.
 $C24B CALL $C388    ; Call #R$C388.
 $C24E CALL $C267    ; Call #R$C267.
 $C251 CALL $C267    ; Call #R$C267.
 $C254 LD A,($C1F4)  ; #REGa=*#R$C1F4.
 $C257 INC A         ; Increment #REGa by one.
 $C258 CP $25        ; {Jump to #R$C22D if #REGa is not equal to #N$25.
 $C25A JR NZ,$C22D   ; }
 $C25C LD L,$FE      ; #REGl=#N$FE.
 $C25E LD C,$07      ; #REGc=#N$07.
 $C260 CALL $C29C    ; Call #R$C29C.
 $C263 LD A,$01      ; #REGa=#N$01.
 $C265 JR $C22D      ; Jump to #R$C22D.
*$C267 LD A,C        ; {#REGc-=#N$07.
 $C268 SUB $07       ;
 $C26A LD C,A        ; }
 $C26B RET NC        ; Return if the carry flag isn't set.
 $C26C DEC L         ; Decrease #REGl by one.
 $C26D ADD A,$08     ; {#REGc=#REGa+#N$08.
 $C26F LD C,A        ; }
 $C270 RET           ; Return.

; Routine at C271
;
; Used by the routine at #R$C1FC.
c$C271 PUSH HL       ; {Stash #REGhl, #REGde and #REGbc on the stack.
 $C272 PUSH DE       ;
 $C273 PUSH BC       ; }
 $C274 LD HL,$5080   ; #REGhl=#N$5080 (screen buffer location).
 $C277 LD DE,$5060   ; #REGde=#N$5060 (screen buffer location).
 $C27A LD A,$08      ; #REGa=#N$08.
*$C27C PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $C27D PUSH DE       ; }
 $C27E LD BC,$0080   ; #REGbc=#N($0080,$04,$04).
 $C281 LDIR          ; LDIR.
 $C283 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $C284 POP HL        ; }
 $C285 INC H         ; Increment #REGh by one.
 $C286 INC D         ; Increment #REGd by one.
 $C287 DEC A         ; Decrease #REGa by one.
 $C288 JR NZ,$C27C   ; Jump to #R$C27C if #REGa is not equal to #N$08.
 $C28A LD HL,$50E0   ; #REGhl=#N$50E0 (screen buffer location).
; This entry point is used by the routine at #R$C29C.
*$C28D LD B,$24      ; #REGb=#N$24.
 $C28F LD C,$01      ; #REGc=#N$01.
 $C291 LD A,$20      ; #REGa=#N$20.
*$C293 CALL $C388    ; Call #R$C388.
 $C296 DJNZ $C293    ; Decrease counter by one and loop back to #R$C293 until
                     ; counter is zero.
 $C298 POP BC        ; {Restore #REGbc, #REGde and #REGhl from the stack.
 $C299 POP DE        ;
 $C29A POP HL        ; }
 $C29B RET           ; Return.

; Routine at C29C
;
; Used by the routine at #R$C249.
c$C29C PUSH HL       ; {Stash #REGhl, #REGde and #REGbc on the stack.
 $C29D PUSH DE       ;
 $C29E PUSH BC       ; }
 $C29F LD HL,$50DF   ; #REGhl=#N$50DF (screen buffer location).
 $C2A2 LD DE,$50FF   ; #REGde=#N$50FF (screen buffer location).
 $C2A5 LD A,$08      ; #REGa=#N$08.
*$C2A7 PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $C2A8 PUSH DE       ; }
 $C2A9 LD BC,$0080   ; #REGbc=#N($0080,$04,$04).
 $C2AC LDDR          ; LDDR.
 $C2AE POP DE        ; {Restore #REGde and #REGhl from the stack.
 $C2AF POP HL        ; }
 $C2B0 INC H         ; Increment #REGh by one.
 $C2B1 INC D         ; Increment #REGd by one.
 $C2B2 DEC A         ; Decrease #REGa by one.
 $C2B3 JR NZ,$C2A7   ; Jump to #R$C2A7 if #REGa is not equal to #N$08.
 $C2B5 LD HL,$5060   ; #REGhl=#N$5060 (screen buffer location).
 $C2B8 JR $C28D      ; Jump to #R$C28D.

; Routine at C2BA
;
; Used by the routine at #R$C1E1.
c$C2BA PUSH HL       ; {Stash #REGhl, #REGbc and #REGaf on the stack.
 $C2BB PUSH BC       ;
 $C2BC PUSH AF       ; }
 $C2BD LD HL,($C1F8) ; #REGhl=*#R$C1F8.
 $C2C0 LD A,($C1FA)  ; {#REGc=*#R$C1FA.
 $C2C3 LD C,A        ; }
 $C2C4 POP AF        ; Restore #REGaf from the stack.
 $C2C5 PUSH AF       ; Stash #REGaf on the stack.
 $C2C6 CP $0D        ; {Jump to #R$C2EE if #REGa is not equal to #N$0D.
 $C2C8 JR NZ,$C2EE   ; }
*$C2CA LD A,($A019)  ; #REGa=*#R$A019.
 $C2CD CP $0F        ; {Jump to #R$C2D6 if #REGa is not equal to #N$0F.
 $C2CF JR NZ,$C2D6   ; }
 $C2D1 CALL $C306    ; Call #R$C306.
 $C2D4 LD A,$FF      ; #REGa=#N$FF.
*$C2D6 INC A         ; Increment #REGa by one.
 $C2D7 LD ($A019),A  ; Write #REGa to *#R$A019.
 $C2DA LD HL,$5020   ; #REGhl=#N$5020 (screen buffer location).
 $C2DD LD C,$02      ; #REGc=#N$02.
 $C2DF CALL $C316    ; Call #R$C316.
 $C2E2 LD A,($C128)  ; #REGa=*#R$C128.
 $C2E5 AND A         ; Set flags.
 $C2E6 LD A,$24      ; #REGa=#N$24.
 $C2E8 JR Z,$C2F8    ; Jump to #R$C2F8 if #REGa is equal to #REGa.
 $C2EA LD A,$12      ; #REGa=#N$12.
 $C2EC JR $C2F8      ; Jump to #R$C2F8.
*$C2EE CALL $C388    ; Call #R$C388.
 $C2F1 LD A,($C1F5)  ; #REGa=*#R$C1F5.
 $C2F4 DEC A         ; Decrease #REGa by one.
 $C2F5 JP Z,$C2CA    ; Jump to #R$C2CA if #REGa is zero.
*$C2F8 LD ($C1F5),A  ; Write #REGa to *#R$C1F5.
 $C2FB LD ($C1F8),HL ; Write #REGhl to *#R$C1F8.
 $C2FE LD A,C        ; {Write #REGc to *#R$C1FA.
 $C2FF LD ($C1FA),A  ; }
 $C302 POP AF        ; {Restore #REGaf, #REGbc and #REGhl from the stack.
 $C303 POP BC        ;
 $C304 POP HL        ; }
 $C305 RET           ; Return.

; Routine at C306
;
; Used by the routines at #R$9E4A and #R$C2BA.
c$C306 PUSH HL       ; Stash #REGhl on the stack.
 $C307 LD HL,$5A5F   ; #REGhl=#N$5A5F (attribute buffer location).
 $C30A SET 7,(HL)    ; Set bit 7 of *#REGhl.
 $C30C CALL $C415    ; Call #R$C415.
 $C30F RES 7,(HL)    ; Reset bit 7 of *#REGhl.
 $C311 CALL $C142    ; Call #R$C142.
 $C314 POP HL        ; Restore #REGhl from the stack.
 $C315 RET           ; Return.

; Routine at C316
;
; Used by the routine at #R$C2BA.
c$C316 LD A,($C128)  ; #REGa=*#R$C128.
 $C319 AND A         ; Set flags.
 $C31A CALL Z,$C3E4  ; Call #R$C3E4 if #REGa is equal to #N$00.
 $C31D PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $C31E PUSH HL       ;
 $C31F PUSH DE       ; }
 $C320 LD HL,$4020   ; #REGhl=#N$4020 (screen buffer location).
 $C323 LD DE,$4000   ; #REGde=#N$4000.
 $C326 LD BC,$0011   ; #REGbc=#N($0011,$04,$04).
 $C329 LD A,($C128)  ; #REGa=*#R$C128.
 $C32C AND A         ; Set flags.
 $C32D LD A,$20      ; #REGa=#N$20.
 $C32F JR Z,$C333    ; Jump to #R$C333 if #REGa is equal to #REGa.
 $C331 LD A,$10      ; #REGa=#N$10.
*$C333 PUSH HL       ; {Stash #REGhl, #REGde and #REGbc on the stack.
 $C334 PUSH DE       ;
 $C335 PUSH BC       ; }
 $C336 LD C,$08      ; #REGc=#N$08.
*$C338 PUSH HL       ; {Stash #REGhl, #REGde and #REGbc on the stack.
 $C339 PUSH DE       ;
 $C33A PUSH BC       ; }
 $C33B LD C,A        ; #REGc=#REGa.
 $C33C LDIR          ; LDIR.
 $C33E POP BC        ; {Restore #REGbc, #REGde and #REGhl from the stack.
 $C33F POP DE        ;
 $C340 POP HL        ; }
 $C341 INC H         ; Increment #REGh by one.
 $C342 INC D         ; Increment #REGd by one.
 $C343 DEC C         ; Decrease #REGc by one.
 $C344 JR NZ,$C338   ; Jump to #R$C338 if #REGc is not equal to #REGa.
 $C346 POP BC        ; {Restore #REGbc, #REGde and #REGhl from the stack.
 $C347 POP DE        ;
 $C348 POP HL        ; }
 $C349 PUSH AF       ; Stash #REGaf on the stack.
 $C34A CALL $C37D    ; Call #R$C37D.
 $C34D CALL $C37D    ; Call #R$C37D.
 $C350 POP AF        ; Restore #REGaf from the stack.
 $C351 DEC C         ; Decrease #REGc by one.
 $C352 JR NZ,$C333   ; Jump to #R$C333 if #REGc is not equal to #REGa.
 $C354 CP $10        ; {Jump to #R$C363 if #REGa is equal to #N$10.
 $C356 JR Z,$C363    ; }
 $C358 LD HL,$5820   ; #REGhl=#N$5820 (attribute buffer location).
 $C35B LD DE,$5800   ; #REGde=#N$5800 (screen buffer location).
 $C35E LD BC,$0220   ; #REGbc=#N$0220.
 $C361 LDIR          ; LDIR.
*$C363 LD A,($C128)  ; #REGa=*#R$C128.
 $C366 AND A         ; Set flags.
 $C367 LD B,$24      ; #REGb=#N$24.
 $C369 JR Z,$C36D    ; Jump to #R$C36D if #REGa is equal to #REGa.
 $C36B LD B,$12      ; #REGb=#N$12.
*$C36D LD HL,$5020   ; #REGhl=#N$5020 (screen buffer location).
 $C370 LD C,$02      ; #REGc=#N$02.
 $C372 LD A,$20      ; #REGa=#N$20.
*$C374 CALL $C388    ; Call #R$C388.
 $C377 DJNZ $C374    ; Decrease counter by one and loop back to #R$C374 until
                     ; counter is zero.
 $C379 POP DE        ; {Restore #REGde, #REGhl and #REGbc from the stack.
 $C37A POP HL        ;
 $C37B POP BC        ; }
 $C37C RET           ; Return.

; Routine at C37D
;
; Used by the routine at #R$C316.
c$C37D EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $C37E LD A,L        ; #REGa=#REGl.
 $C37F ADD A,$20     ; #REGa+=#N$20.
 $C381 LD L,A        ; #REGl=#REGa.
 $C382 RET NC        ; Return if #REGa is greater than #REGa.
 $C383 LD A,H        ; #REGa=#REGh.
 $C384 ADD A,$08     ; #REGa+=#N$08.
 $C386 LD H,A        ; #REGh=#REGa.
 $C387 RET           ; Return.

; Print Character
;
; Used by the routines at #R$C1A8, #R$C1FC, #R$C249, #R$C271, #R$C2BA and
; #R$C316.
;
; A Character to print
; HL Screen buffer address
@label=PrintCharacter
c$C388 PUSH AF       ; {Stash #REGaf, #REGbc, #REGde and #REGhl on the stack.
 $C389 PUSH BC       ;
 $C38A PUSH DE       ;
 $C38B PUSH HL       ; }
 $C38C LD L,A        ; {Load the character into #REGhl.
 $C38D LD H,$00      ; }
 $C38F ADD HL,HL     ; {Multiply by #N$08 (each font character is #N$08 bytes
 $C390 ADD HL,HL     ; of data).
 $C391 ADD HL,HL     ; }
 $C392 LD DE,$3C00   ; {#HTML(#REGde+=<a rel="noopener nofollow"
 $C395 ADD HL,DE     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
 $C396 EX DE,HL      ; (CHARSET-#N$100).)}
 $C397 POP HL        ; Restore the screen buffer address from the stack.
 $C398 PUSH HL       ; But stash a copy of it back on the stack.
 $C399 LD B,$08      ; Set a counter in #REGb for #N$08 bytes of the font data.
*$C39B LD A,(DE)     ; #REGa=*#REGde.
 $C39C PUSH BC       ; {Stash #REGbc and #REGaf on the stack.
 $C39D PUSH AF       ; }
 $C39E DEC C         ; Decrease #REGc by one.
 $C39F INC C         ; Increment #REGc by one.
 $C3A0 LD B,$FF      ; #REGb=#N$FF.
 $C3A2 JR Z,$C3AB    ; Jump to #R$C3AB if #REGc is zero.
*$C3A4 SRL A         ; Shift #REGa right.
 $C3A6 SRL B         ; Shift #REGb right.
 $C3A8 DEC C         ; Decrease #REGc by one.
 $C3A9 JR NZ,$C3A4   ; Jump to #R$C3A4 if #REGc is not zero.
*$C3AB LD C,A        ; #REGc=#REGa.
 $C3AC LD A,B        ; #REGa=#REGb.
 $C3AD CPL           ; Invert the bits in #REGa.
 $C3AE AND (HL)      ; Merge the bits from *#REGhl.
 $C3AF OR C          ; Set the bits from #REGc.
 $C3B0 LD (HL),A     ; Write #REGa to *#REGhl.
 $C3B1 POP AF        ; {Restore #REGaf and #REGbc from the stack.
 $C3B2 POP BC        ; }
 $C3B3 DEC C         ; Decrease #REGc by one.
 $C3B4 INC C         ; Increment #REGc by one.
 $C3B5 JR Z,$C3D0    ; Jump to #R$C3D0 if #REGc is equal to #REGc.
 $C3B7 PUSH BC       ; {Stash #REGbc and #REGaf on the stack.
 $C3B8 PUSH AF       ; }
 $C3B9 LD A,$08      ; #REGa=#N$08.
 $C3BB SUB C         ; #REGa-=#REGc.
 $C3BC LD C,A        ; #REGc=#REGa.
 $C3BD POP AF        ; Restore #REGaf from the stack.
 $C3BE LD B,$FF      ; #REGb=#N$FF.
*$C3C0 SLA A         ; Shift #REGa left (with carry).
 $C3C2 SLA B         ; Shift #REGb left (with carry).
 $C3C4 DEC C         ; Decrease #REGc by one.
 $C3C5 JR NZ,$C3C0   ; Jump to #R$C3C0 if #REGc is not equal to #REGc.
 $C3C7 LD C,A        ; #REGc=#REGa.
 $C3C8 LD A,B        ; #REGa=#REGb.
 $C3C9 CPL           ; Invert the bits in #REGa.
 $C3CA INC HL        ; Increment #REGhl by one.
 $C3CB AND (HL)      ; Merge the bits from *#REGhl.
 $C3CC OR C          ; Set the bits from #REGc.
 $C3CD LD (HL),A     ; Write #REGa to *#REGhl.
 $C3CE DEC HL        ; Decrease #REGhl by one.
 $C3CF POP BC        ; Restore #REGbc from the stack.
*$C3D0 INC DE        ; Increment #REGde by one.
 $C3D1 INC H         ; Increment #REGh by one.
 $C3D2 DJNZ $C39B    ; Decrease counter by one and loop back to #R$C39B until
                     ; counter is zero.
 $C3D4 POP HL        ; {Restore #REGhl, #REGde and #REGbc from the stack.
 $C3D5 POP DE        ;
 $C3D6 POP BC        ; }
 $C3D7 LD A,C        ; #REGa=#REGc.
 $C3D8 ADD A,$07     ; #REGa+=#N$07.
 $C3DA CP $08        ; Compare #REGa with #N$08.
 $C3DC JR C,$C3E1    ; Jump to #R$C3E1 if #REGa is less than #N$08.
 $C3DE SUB $08       ; #REGa-=#N$08.
 $C3E0 INC L         ; Increment #REGl by one.
*$C3E1 LD C,A        ; #REGc=#REGa.
 $C3E2 POP AF        ; Restore #REGaf from the stack.
 $C3E3 RET           ; Return.
; This entry point is used by the routine at #R$C316.
*$C3E4 LD A,($A008)  ; #REGa=*#R$A008.
 $C3E7 AND A         ; Set flags.
 $C3E8 RET Z         ; Return if #REGl is equal to #REGa.
 $C3E9 PUSH HL       ; {Stash #REGhl, #REGde and #REGbc on the stack.
 $C3EA PUSH DE       ;
 $C3EB PUSH BC       ; }
 $C3EC LD HL,$4000   ; #REGhl=#N($4000,$04,$04).
 $C3EF LD B,$08      ; #REGb=#N$08.
*$C3F1 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $C3F2 PUSH HL       ; }
 $C3F3 CALL $C403    ; Call #R$C403.
 $C3F6 POP HL        ; Restore #REGhl from the stack.
 $C3F7 INC H         ; Increment #REGh by one.
 $C3F8 POP BC        ; Restore #REGbc from the stack.
 $C3F9 DJNZ $C3F1    ; Decrease counter by one and loop back to #R$C3F1 until
                     ; counter is zero.
 $C3FB LD A,$04      ; #REGa=#N$04.
 $C3FD OUT ($FB),A   ; OUT #N$FB
 $C3FF POP BC        ; {Restore #REGbc, #REGde and #REGhl from the stack.
 $C400 POP DE        ;
 $C401 POP HL        ; }
 $C402 RET           ; Return.
*$C403 LD A,B        ; #REGa=#REGb.
 $C404 CP $03        ; Compare #REGa with #N$03.
 $C406 SBC A,A       ; #REGa-=#REGa.
 $C407 AND %00000010 ; Keep only bits 1.
 $C409 OUT ($FB),A   ; OUT #N$FB
 $C40B LD D,A        ; #REGd=#REGa.
*$C40C IN A,($FB)    ; #REGa=byte from port #N$FB.
 $C40E ADD A,A       ; #REGa+=#REGa.
 $C40F RET M         ; Return if #REGa is lower than #N$03.
 $C410 JR NC,$C40C   ; Jump to #R$C40C if #REGa is greater than or equal to
                     ; #N$03.
 $C412 JP $0F12      ; #HTML(Jump to <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0EF4.html#0F12">COPY_LINE#0F12</a>.)

; Wait For Keypress
;
; Used by the routines at #R$A040, #R$B015, #R$C1C0 and #R$C306.
;
; O:A The ASCII code keypress value
;
; Bit 7 is only set after a key has been pressed.
@label=WaitForKeypress_Loop
c$C415 CALL $C41F    ; Call #R$C41F.
 $C418 BIT 7,A       ; {Jump to back #R$C415 until a key has been pressed.
 $C41A JR Z,$C415    ; }
; Strip off the set bit for the response.
 $C41C AND %01111111 ; Keep only bits 0-6.
 $C41E RET           ; Return.

; Get Keypress
;
; Used by the routines at #R$A040, #R$A4CD and #R$C415.
;
; O:A Keypress value, or #N$00 for no keypress
@label=GetKeypress
c$C41F PUSH IY       ; {Stash #REGiy, #REGix, #REGhl, #REGde and #REGbc on the
 $C421 PUSH IX       ; stack.
 $C423 PUSH HL       ;
 $C424 PUSH DE       ;
 $C425 PUSH BC       ; }
 $C426 LD IY,$5C3A   ; #HTML(#REGiy=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3A.html">ERR_NR</a>.)
 $C42A EI            ; Enable interrupts.
 $C42B HALT          ; Halt operation (suspend CPU until the next interrupt).
 $C42C DI            ; Disable interrupts.
 $C42D LD A,($5C3B)  ; {#HTML(Jump to #R$C437 if bit 5 of
 $C430 BIT 5,A       ; *<a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3B.html">FLAGS</a>
 $C432 JR NZ,$C437   ; is set, indicating that a key has been pressed.)}
; No key has been pressed.
 $C434 XOR A         ; Load #REGa with #N$00 (no keypress).
 $C435 JR $C456      ; Jump to #R$C456.
; A key has been pressed, so process it.
@label=GetKeypress_Process
*$C437 RES 5,A       ; {#HTML(Reset bit 5 of *<a href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3B.html">FLAGS</a>
 $C439 LD ($5C3B),A  ; which resets "when a new key has been pressed".)}
 $C43C LD A,($5C08)  ; {#HTML(Jump to #R$C445 if
 $C43F CP $5F        ; *<a href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a> (last key
 $C441 JR NZ,$C445   ; pressed) is not ASCII #N$5F ("#CHR$5F").)}
 $C443 LD A,$18      ; #REGa=#N$18.
; Did the player press "DELETE"?
@label=GetKeypress_CheckDelete
*$C445 CP $0C        ; {#HTML(Jump to #R$C44B if
 $C447 JR NZ,$C44B   ; *<a href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a> (last key
                     ; pressed) is not ASCII #N$0C ("DELETE").)}
 $C449 LD A,$08      ; Load #REGa with #N$08 (delete was pressed).
; Did the player press "UP"?
@label=GetKeypress_CheckUp
*$C44B CP $0B        ; {#HTML(Jump to #R$C451 if
 $C44D JR NZ,$C451   ; *<a href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a> (last key
                     ; pressed) is not ASCII #N$0B ("UP").)}
 $C44F LD A,$5B      ; Load #REGa with #N$5B (up was pressed).
@label=GetKeypress_Validate
*$C451 CALL $C240    ; Call #R$C240.
 $C454 SET 7,A       ; Set bit 7 of #REGa.
@label=GetKeypress_Return
*$C456 POP BC        ; {Restore #REGbc, #REGde, #REGhl, #REGix and #REGiy from
 $C457 POP DE        ; the stack.
 $C458 POP HL        ;
 $C459 POP IX        ;
 $C45B POP IY        ; }
 $C45D RET           ; Return.

; Routine at C45E
;
; Used by the routine at #R$C4D1.
c$C45E LD A,($A010)  ;
 $C461 JR $C466      ;
; This entry point is used by the routine at #R$C4D1.
*$C463 LD A,($A00F)  ;
*$C466 CP $05        ;
 $C468 LD A,B        ;
 $C469 JR C,$C46E    ;
 $C46B CP $6E        ;
 $C46D RET           ;
*$C46E CP $6A        ;
 $C470 RET           ;
 $C471 JR NC,$C47C   ;
 $C473 NOP           ;
 $C474 NOP           ;
 $C475 ADC A,B       ;
 $C476 LD (BC),A     ;
 $C477 NOP           ;
 $C478 NOP           ;
 $C479 RST $28       ;
 $C47A DEC B         ;
 $C47B CP E          ;
*$C47C LD BC,$0225   ;
 $C47F NOP           ;
 $C480 NOP           ;
 $C481 RLA           ;
 $C482 DEC B         ;
 $C483 NOP           ;
 $C484 NOP           ;
 $C485 LD E,A        ;
 $C486 INC BC        ;
 $C487 NOP           ;
 $C488 NOP           ;
 $C489 RST $38       ;
 $C48A DEC B         ;
 $C48B DEC BC        ;
 $C48C LD B,$00      ;
 $C48E NOP           ;
 $C48F NOP           ;
 $C490 NOP           ;
 $C491 NOP           ;
 $C492 NOP           ;

; Routine at C493
;
; Used by the routines at #R$A37D, #R$B191 and #R$C4D1.
c$C493 XOR A         ;
 $C494 LD HL,$A01D   ;
 $C497 BIT 3,(HL)    ;
 $C499 JR Z,$C4AE    ;
 $C49B LD A,$04      ;
 $C49D BIT 7,(HL)    ;
 $C49F JR NZ,$C4AE   ;
 $C4A1 LD A,($A01E)  ;
 $C4A4 AND $0C       ;
 $C4A6 CP $0C        ;
 $C4A8 LD A,$05      ;
 $C4AA JR Z,$C4AE    ;
 $C4AC LD A,$07      ;
*$C4AE LD ($A00F),A  ;
 $C4B1 RET           ;

; Routine at C4B2
;
; Used by the routines at #R$A37D, #R$B191 and #R$C4D1.
c$C4B2 XOR A         ;
 $C4B3 LD HL,$A01D   ;
 $C4B6 BIT 2,(HL)    ;
 $C4B8 JR Z,$C4CD    ;
 $C4BA LD A,$04      ;
 $C4BC BIT 6,(HL)    ;
 $C4BE JR NZ,$C4CD   ;
 $C4C0 LD A,($A01E)  ;
 $C4C3 AND $03       ;
 $C4C5 CP $03        ;
 $C4C7 LD A,$05      ;
 $C4C9 JR Z,$C4CD    ;
 $C4CB LD A,$07      ;
*$C4CD LD ($A010),A  ;
 $C4D0 RET           ;

; Routine at C4D1
;
; Used by the routines at #R$CC78, #R$CDA1 and #R$CE6A.
c$C4D1 LD A,($A033)   ;
 $C4D4 BIT 7,A        ;
 $C4D6 JP NZ,$C583    ;
 $C4D9 CALL $A2B1     ;
 $C4DC PUSH HL        ;
 $C4DD POP IX         ;
 $C4DF CALL $A2BD     ;
 $C4E2 CALL $C493     ;
 $C4E5 CALL $C4B2     ;
 $C4E8 XOR A          ;
 $C4E9 LD ($A00B),A   ;
 $C4EC LD A,($A01D)   ;
 $C4EF AND $0C        ;
 $C4F1 JR Z,$C53A     ;
 $C4F3 LD A,($A00F)   ;
 $C4F6 CP $05         ;
 $C4F8 JR NZ,$C502    ;
 $C4FA LD A,($A034)   ;
 $C4FD CP $FE         ;
 $C4FF JP NZ,$CB41    ;
*$C502 LD A,($A010)   ;
 $C505 CP $05         ;
 $C507 JR NZ,$C511    ;
 $C509 LD A,($A035)   ;
 $C50C CP $FE         ;
 $C50E JP NZ,$CB41    ;
*$C511 LD A,($A00F)   ;
 $C514 AND A          ;
 $C515 JR Z,$C531     ;
 $C517 LD A,($A034)   ;
 $C51A CP $FF         ;
 $C51C JR NZ,$C531    ;
 $C51E LD B,$FF       ;
*$C520 INC B          ;
 $C521 CALL $C463     ;
 $C524 RET Z          ;
 $C525 LD ($A034),A   ;
 $C528 PUSH BC        ;
 $C529 CALL $C55A     ;
 $C52C POP BC         ;
 $C52D JR NZ,$C53A    ;
 $C52F JR $C520       ;
*$C531 CALL $C542     ;
 $C534 JR Z,$C53A     ;
 $C536 CALL $C560     ;
 $C539 RET Z          ;
*$C53A LD A,$01       ;
 $C53C LD ($A00B),A   ;
 $C53F JP $C929       ;
*$C542 LD A,($A010)   ;
 $C545 AND A          ;
 $C546 RET Z          ;
 $C547 LD A,($A035)   ;
 $C54A CP $FF         ;
 $C54C JR NZ,$C558    ;
 $C54E LD A,($A01D)   ;
 $C551 AND $02        ;
 $C553 JR NZ,$C558    ;
 $C555 OR $01         ;
 $C557 RET            ;
*$C558 XOR A          ;
 $C559 RET            ;
*$C55A CALL $C542     ;
 $C55D JP Z,$C929     ;
*$C560 LD B,$FF       ;
*$C562 INC B          ;
 $C563 CALL $C45E     ;
 $C566 JR Z,$C570     ;
 $C568 LD ($A035),A   ;
 $C56B CALL $C929     ;
 $C56E JR Z,$C562     ;
*$C570 RET            ;
*$C571 LD A,(IX+$00)  ;
 $C574 AND $0F        ;
 $C576 LD ($A00F),A   ;
 $C579 RET            ;
*$C57A LD A,(IX+$01)  ;
 $C57D AND $0F        ;
 $C57F LD ($A010),A   ;
 $C582 RET            ;
*$C583 AND $7F        ;
 $C585 LD E,A         ;
 $C586 LD D,$00       ;
 $C588 LD HL,$9FAB    ;
 $C58B ADD HL,DE      ;
 $C58C ADD HL,DE      ;
 $C58D LD E,(HL)      ;
 $C58E INC HL         ;
 $C58F LD D,(HL)      ;
 $C590 EX DE,HL       ;
; This entry point is used by the routine at #R$CE4F.
*$C591 PUSH HL        ;
 $C592 POP IX         ;
 $C594 CALL $C571     ;
 $C597 CALL $C57A     ;
 $C59A XOR A          ;
 $C59B LD ($A00B),A   ;
 $C59E LD A,($A00F)   ;
 $C5A1 LD HL,$A010    ;
 $C5A4 OR (HL)        ;
 $C5A5 JR Z,$C5F4     ;
 $C5A7 LD A,($A00F)   ;
 $C5AA CP $05         ;
 $C5AC JR Z,$C5B2     ;
 $C5AE CP $06         ;
 $C5B0 JR NZ,$C5BA    ;
*$C5B2 LD A,($A034)   ;
 $C5B5 CP $FE         ;
 $C5B7 JP NZ,$CB41    ;
*$C5BA LD A,($A010)   ;
 $C5BD CP $05         ;
 $C5BF JR Z,$C5C5     ;
 $C5C1 CP $06         ;
 $C5C3 JR NZ,$C5CD    ;
*$C5C5 LD A,($A035)   ;
 $C5C8 CP $FE         ;
 $C5CA JP NZ,$CB41    ;
*$C5CD LD A,($A00F)   ;
 $C5D0 AND A          ;
 $C5D1 JR Z,$C5EB     ;
 $C5D3 LD A,($A034)   ;
 $C5D6 CP $FF         ;
 $C5D8 JR NZ,$C5EB    ;
 $C5DA LD B,$00       ;
*$C5DC CALL $C463     ;
 $C5DF RET Z          ;
 $C5E0 LD ($A034),A   ;
 $C5E3 CALL $C60D     ;
 $C5E6 JR NZ,$C5F4    ;
 $C5E8 INC B          ;
 $C5E9 JR $C5DC       ;
*$C5EB CALL $C5FC     ;
 $C5EE JR Z,$C5F4     ;
 $C5F0 CALL $C613     ;
 $C5F3 RET Z          ;
*$C5F4 LD A,$01       ;
 $C5F6 LD ($A00B),A   ;
 $C5F9 JP $C989       ;
*$C5FC LD A,($A010)   ;
 $C5FF AND A          ;
 $C600 RET Z          ;
 $C601 LD A,($A035)   ;
 $C604 CP $FF         ;
 $C606 JR NZ,$C60B    ;
 $C608 OR $01         ;
 $C60A RET            ;
*$C60B XOR A          ;
 $C60C RET            ;
*$C60D CALL $C5FC     ;
 $C610 JP Z,$C989     ;
*$C613 PUSH BC        ;
 $C614 LD B,$00       ;
*$C616 CALL $C45E     ;
 $C619 JR Z,$C626     ;
 $C61B LD ($A035),A   ;
 $C61E CALL $C989     ;
 $C621 JR NZ,$C626    ;
 $C623 INC B          ;
 $C624 JR $C616       ;
*$C626 POP BC         ;
 $C627 RET            ;
; This entry point is used by the routine at #R$C996.
*$C628 LD A,(IY+$00)  ;
 $C62B AND $0F        ;
 $C62D JR NZ,$C635    ;
*$C62F OR $01         ;
 $C631 RET            ;
*$C632 JP $DC15       ;
*$C635 CP $05         ;
 $C637 JR C,$C660     ;
 $C639 CP $07         ;
 $C63B JR NC,$C682    ;
 $C63D LD A,($A034)   ;
 $C640 CP $FE         ;
 $C642 JR NZ,$C654    ;
 $C644 LD HL,($A02F)  ;
 $C647 LD A,(IY+$00)  ;
 $C64A AND $0F        ;
 $C64C CP $05         ;
 $C64E JR NZ,$C65A    ;
 $C650 BIT 7,L        ;
 $C652 JR Z,$C62F     ;
*$C654 XOR A          ;
 $C655 LD ($A021),A   ;
 $C658 JR $C632       ;
*$C65A BIT 7,L        ;
 $C65C JR NZ,$C62F    ;
 $C65E JR $C654       ;
*$C660 CP $03         ;
 $C662 JR NC,$C670    ;
 $C664 LD A,($A034)   ;
 $C667 CALL $D224     ;
 $C66A BIT 7,(IX+$00) ;
 $C66E JR Z,$C654     ;
*$C670 BIT 0,(IY+$00) ;
 $C674 JR Z,$C62F     ;
 $C676 LD A,($A034)   ;
 $C679 CALL $D471     ;
 $C67C CP $FF         ;
 $C67E JR Z,$C654     ;
 $C680 JR $C62F       ;
*$C682 LD A,($A034)   ;
 $C685 LD ($CB7A),A   ;
 $C688 LD C,A         ;
 $C689 LD A,(IY+$00)  ;
 $C68C CALL $C7A6     ;
 $C68F JR Z,$C654     ;
 $C691 BIT 4,(IY+$00) ;
 $C695 JR Z,$C62F     ;
 $C697 LD A,(IY+$02)  ;
 $C69A LD L,(IY+$03)  ;
 $C69D LD H,(IY+$04)  ;
 $C6A0 BIT 6,(IY+$00) ;
 $C6A4 JR Z,$C6AF     ;
 $C6A6 LD A,(IY+$04)  ;
 $C6A9 LD L,(IY+$05)  ;
 $C6AC LD H,(IY+$06)  ;
*$C6AF RRCA           ;
 $C6B0 RRCA           ;
 $C6B1 RRCA           ;
 $C6B2 RRCA           ;
 $C6B3 LD B,A         ;
 $C6B4 CALL $C74E     ;
 $C6B7 RET NZ         ;
*$C6B8 LD A,$01       ;
 $C6BA LD ($A021),A   ;
 $C6BD RET            ;
; This entry point is used by the routine at #R$C996.
*$C6BE LD A,(IY+$01)  ;
 $C6C1 AND $0F        ;
 $C6C3 JR NZ,$C6CB    ;
*$C6C5 OR $01         ;
 $C6C7 RET            ;
 $C6C8 JP $DC15       ;
*$C6CB CP $05         ;
 $C6CD JR C,$C6F5     ;
 $C6CF CP $07         ;
 $C6D1 JR NC,$C719    ;
 $C6D3 LD A,($A035)   ;
 $C6D6 CP $FE         ;
 $C6D8 JP NZ,$C654    ;
 $C6DB LD HL,($A031)  ;
 $C6DE LD A,(IY+$01)  ;
 $C6E1 AND $0F        ;
 $C6E3 CP $05         ;
 $C6E5 JR NZ,$C6EE    ;
 $C6E7 BIT 7,L        ;
 $C6E9 JR Z,$C6C5     ;
 $C6EB JP $C654       ;
*$C6EE BIT 7,L        ;
 $C6F0 JR NZ,$C6C5    ;
 $C6F2 JP $C654       ;
*$C6F5 CP $03         ;
 $C6F7 JR NC,$C706    ;
 $C6F9 LD A,($A035)   ;
 $C6FC CALL $D224     ;
 $C6FF BIT 7,(IX+$00) ;
 $C703 JP Z,$C654     ;
*$C706 BIT 0,(IY+$01) ;
 $C70A JR Z,$C6C5     ;
 $C70C LD A,($A035)   ;
 $C70F CALL $D471     ;
 $C712 CP $FF         ;
 $C714 JP Z,$C654     ;
 $C717 JR $C6C5       ;
*$C719 LD A,($A035)   ;
 $C71C LD ($CB7A),A   ;
 $C71F LD C,A         ;
 $C720 LD A,(IY+$01)  ;
 $C723 CALL $C7A6     ;
 $C726 RET Z          ;
 $C727 BIT 4,(IY+$00) ;
 $C72B JP Z,$C62F     ;
 $C72E LD A,(IY+$02)  ;
 $C731 LD L,(IY+$05)  ;
 $C734 LD H,(IY+$06)  ;
 $C737 BIT 6,(IY+$00) ;
 $C73B JR Z,$C746     ;
 $C73D LD A,(IY+$04)  ;
 $C740 LD L,(IY+$07)  ;
 $C743 LD H,(IY+$08)  ;
*$C746 LD B,A         ;
 $C747 CALL $C74E     ;
 $C74A RET NZ         ;
 $C74B JP $C6B8       ;
*$C74E LD A,C         ;
 $C74F CALL $D237     ;
 $C752 LD C,(IX+$05)  ;
 $C755 LD A,B         ;
 $C756 RRCA           ;
 $C757 RRCA           ;
 $C758 AND $03        ;
 $C75A LD D,L         ;
 $C75B CALL $C763     ;
 $C75E RET Z          ;
 $C75F LD A,B         ;
 $C760 AND $03        ;
 $C762 LD D,H         ;
*$C763 JR NZ,$C76D    ;
 $C765 LD A,D         ;
 $C766 AND C          ;
 $C767 CP D           ;
*$C768 JP Z,$C62F     ;
 $C76B JR $C792       ;
*$C76D CP $01         ;
 $C76F JR NZ,$C77B    ;
 $C771 LD A,D         ;
 $C772 AND A          ;
 $C773 JR Z,$C768     ;
 $C775 AND C          ;
 $C776 JR Z,$C795     ;
 $C778 JP $C62F       ;
*$C77B CP $02         ;
 $C77D JR NZ,$C788    ;
 $C77F LD A,D         ;
 $C780 AND C          ;
 $C781 JP Z,$C62F     ;
 $C784 OR $80         ;
 $C786 JR $C797       ;
*$C788 LD A,D         ;
 $C789 AND C          ;
 $C78A CP D           ;
 $C78B JP NZ,$C62F    ;
 $C78E OR $80         ;
 $C790 JR $C797       ;
*$C792 XOR $FF        ;
 $C794 AND D          ;
*$C795 AND $7F        ;
*$C797 LD ($CB79),A   ;
 $C79A LD A,($A00B)   ;
 $C79D AND A          ;
 $C79E JP Z,$C62F     ;
 $C7A1 LD HL,$CB7B    ;
 $C7A4 XOR A          ;
 $C7A5 RET            ;
*$C7A6 AND $0F        ;
 $C7A8 CP $07         ;
 $C7AA JP Z,$C62F     ;
 $C7AD CP $08         ;
 $C7AF JR NZ,$C7BB    ;
 $C7B1 LD A,C         ;
 $C7B2 CALL $C821     ;
*$C7B5 JP Z,$C632     ;
 $C7B8 JP $C62F       ;
*$C7BB CP $09         ;
 $C7BD JR NZ,$C7E4    ;
 $C7BF LD A,C         ;
 $C7C0 CALL $C821     ;
 $C7C3 JP Z,$C632     ;
 $C7C6 LD A,C         ;
 $C7C7 CALL $C8A7     ;
 $C7CA JP NZ,$C632    ;
 $C7CD LD A,C         ;
 $C7CE CALL $C8BE     ;
 $C7D1 JP NZ,$C632    ;
 $C7D4 LD B,C         ;
 $C7D5 LD A,($A036)   ;
 $C7D8 CALL $C8C6     ;
 $C7DB JP Z,$C632     ;
 $C7DE LD A,C         ;
 $C7DF CALL $C8AF     ;
 $C7E2 JR $C768       ;
*$C7E4 CP $0A         ;
 $C7E6 JR NZ,$C7F9    ;
 $C7E8 LD A,C         ;
 $C7E9 CALL $C821     ;
 $C7EC JP Z,$C632     ;
 $C7EF LD A,C         ;
 $C7F0 CALL $D275     ;
 $C7F3 JP NC,$C632    ;
 $C7F6 JP $C62F       ;
*$C7F9 CP $0B         ;
 $C7FB JR NZ,$C80A    ;
 $C7FD LD A,C         ;
 $C7FE CALL $C821     ;
 $C801 JP Z,$C632     ;
 $C804 LD A,C         ;
 $C805 CALL $C8A7     ;
 $C808 JR $C7B5       ;
*$C80A CP $0C         ;
 $C80C JR NZ,$C814    ;
 $C80E LD A,C         ;
 $C80F CALL $C8BE     ;
 $C812 JR $C7B5       ;
*$C814 LD A,C         ;
 $C815 CALL $C821     ;
 $C818 JP Z,$C632     ;
 $C81B LD A,C         ;
 $C81C CALL $C8BE     ;
 $C81F JR $C7B5       ;

; Routine at C821
;
; Used by the routines at #R$9CCE, #R$C4D1, #R$CBC2, #R$CC37, #R$D078, #R$D36A,
; #R$D4EF and #R$DC6C.
c$C821 PUSH IX        ; {Stash #REGix and #REGbc on the stack.
 $C823 PUSH BC        ; }
 $C824 CALL $D237     ; Call #R$D237.
 $C827 LD B,A         ; #REGb=#REGa.
 $C828 LD A,($A036)   ; #REGa=*#R$A036.
 $C82B CALL $C863     ; Call #R$C863.
 $C82E CP B           ; {Jump to #R$C85D if #REGa is equal to #REGb.
 $C82F JR Z,$C85D     ; }
 $C831 BIT 7,(IX+$05) ; {Jump to #R$C85A if bit 7 of *#REGix+#N$05 is not set.
 $C835 JR Z,$C85A     ; }
 $C837 LD C,A         ; #REGc=#REGa.
 $C838 LD A,B         ; #REGa=#REGb.
 $C839 LD B,C         ; #REGb=#REGc.
 $C83A CALL $C863     ; Call #R$C863.
 $C83D LD C,A         ; #REGc=#REGa.
 $C83E LD A,($A036)   ; #REGa=*#R$A036.
 $C841 CP C           ; {Jump to #R$C85D if #REGa is equal to #REGc.
 $C842 JR Z,$C85D     ; }
 $C844 LD A,C         ; #REGa=#REGc.
 $C845 CP B           ; {Jump to #R$C85A if #REGa is not equal to #REGb.
 $C846 JR NZ,$C85A    ; }
 $C848 INC A          ; Increment #REGa by one.
 $C849 JR NZ,$C85D    ; Jump to #R$C85D if #REGa is not equal to #REGb.
 $C84B LD B,(IX+$00)  ; #REGb=*#REGix+#N$00.
 $C84E LD A,($A00A)   ; {Jump to #R$C85D if *#R$A00A is equal to *#REGix+#N$0F.
*$C851 CP (IX+$0F)    ;
 $C854 JR Z,$C85D     ; }
 $C856 INC IX         ; Increment #REGix by one.
 $C858 DJNZ $C851     ; Decrease counter by one and loop back to #R$C851 until
                      ; counter is zero.
*$C85A XOR A          ; #REGa=#N$00.
 $C85B JR $C85F       ; Jump to #R$C85F.
*$C85D OR %00000001   ; Set bit 0.
*$C85F POP BC         ; {Restore #REGbc and #REGix from the stack.
 $C860 POP IX         ; }
 $C862 RET            ; Return.

; Routine at C863
;
; Used by the routines at #R$C821, #R$D102 and #R$DC6C.
c$C863 PUSH IX       ; Stash #REGix on the stack.
 $C865 CALL $D237    ; Call #R$D237.
 $C868 CALL $C86E    ; Call #R$C86E.
 $C86B POP IX        ; Restore #REGix from the stack.
 $C86D RET           ; Return.

; Routine at C86E
;
; Used by the routines at #R$C863 and #R$D078.
c$C86E PUSH IX        ;
 $C870 EX AF,AF'      ;
 $C871 LD A,$FF       ;
*$C873 EX AF,AF'      ;
 $C874 LD A,(IX+$01)  ;
 $C877 CP $FF         ;
 $C879 JR Z,$C895     ;
 $C87B EX AF,AF'      ;
 $C87C LD A,(IX+$01)  ;
 $C87F CALL $D237     ;
 $C882 BIT 7,(IX+$05) ;
 $C886 JR Z,$C894     ;
 $C888 BIT 5,(IX+$05) ;
 $C88C JR NZ,$C873    ;
 $C88E BIT 3,(IX+$05) ;
 $C892 JR NZ,$C873    ;
*$C894 EX AF,AF'      ;
*$C895 POP IX         ;
 $C897 RET            ;
 $C898 CALL $C89E     ;
 $C89B CALL $C86E     ;
*$C89E PUSH IX        ;
 $C8A0 PUSH IY        ;
 $C8A2 POP IX         ;
 $C8A4 POP IY         ;
 $C8A6 RET            ;

; Routine at C8A7
;
; Used by the routine at #R$C4D1.
c$C8A7 CALL $D237    ; Call #R$D237.
 $C8AA LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $C8AD DEC A         ; Decrease #REGa by one.
 $C8AE RET           ; Return.

; Routine at C8AF
;
; Used by the routines at #R$C4D1 and #R$DC6C.
c$C8AF CALL $D237    ; Call #R$D237.
*$C8B2 LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $C8B5 CP $FF        ; {Return if #REGa is equal to #N$FF.
 $C8B7 RET Z         ; }
 $C8B8 CALL $C8BE    ; Call #R$C8BE.
 $C8BB RET NZ        ; Return if #REGa is not equal to #N$FF.
 $C8BC JR $C8B2      ; Jump to #R$C8B2.

; Routine at C8BE
;
; Used by the routines at #R$C4D1 and #R$C8AF.
c$C8BE CALL $D237     ; Call #R$D237.
 $C8C1 BIT 6,(IX+$05) ; Test bit 6 of *#REGix+#N$05.
 $C8C5 RET            ; Return.

; Routine at C8C6
;
; Used by the routines at #R$C4D1 and #R$DC6C.
c$C8C6 PUSH BC        ;
 $C8C7 PUSH AF        ;
 $C8C8 LD A,B         ;
 $C8C9 CALL $D237     ;
 $C8CC LD A,B         ;
 $C8CD CALL $D2F2     ;
 $C8D0 ADD A,(IX+$03) ;
 $C8D3 JR NC,$C8D7    ;
 $C8D5 LD A,$FF       ;
*$C8D7 LD B,A         ;
 $C8D8 POP AF         ;
 $C8D9 LD C,A         ;
 $C8DA CALL $D237     ;
 $C8DD LD A,C         ;
 $C8DE CALL $D2F2     ;
 $C8E1 SUB (IX+$03)   ;
 $C8E4 NEG            ;
 $C8E6 SUB B          ;
 $C8E7 POP BC         ;
 $C8E8 JR C,$C8ED     ;
 $C8EA OR $01         ;
 $C8EC RET            ;
*$C8ED XOR A          ;
 $C8EE RET            ;

; Routine at C8EF
;
; Used by the routines at #R$C929 and #R$C989.
c$C8EF LD A,($A034)  ; {Jump to #R$C90C if *#R$A034 is greater than or equal to
 $C8F2 CP $FE        ; #N$FE.
 $C8F4 JR NC,$C90C   ; }
 $C8F6 LD A,($A00F)  ; {Compare *#R$A00F with #N$05.
 $C8F9 CP $05        ; }
 $C8FB LD A,($A034)  ; #REGa=*#R$A034.
 $C8FE JR NC,$C905   ; Jump to #R$C905 if *#R$A00F is greater than or equal to
                     ; #N$05.
 $C900 CALL $D224    ; Call #R$D224.
 $C903 JR $C908      ; Jump to #R$C908.
*$C905 CALL $D237    ; Call #R$D237.
*$C908 LD ($A013),IX ; Write #REGix to *#R$A013.
*$C90C LD A,($A035)  ; {Return if *#R$A035 is greater than #N$FE.
 $C90F CP $FE        ;
 $C911 RET NC        ; }
 $C912 LD A,($A010)  ; {Compare *#R$A010 with #N$05.
 $C915 CP $05        ; }
 $C917 LD A,($A035)  ; #REGa=*#R$A035.
 $C91A JR NC,$C921   ; Jump to #R$C921 if *#R$A010 is greater than or equal to
                     ; #N$05.
 $C91C CALL $D224    ; Call #R$D224.
 $C91F JR $C924      ; Jump to #R$C924.
*$C921 CALL $D237    ; Call #R$D237.
*$C924 LD ($A015),IX ; Write #REGix to *#R$A015.
 $C928 RET           ; Return.

; Routine at C929
;
; Used by the routines at #R$B191, #R$B77F and #R$C4D1.
c$C929 CALL $C8EF     ; Call #R$C8EF.
 $C92C LD A,($A034)   ; {Jump to #R$C972 if *#R$A034 is greater than or equal
 $C92F CP $FE         ; to #N$FE.
 $C931 JR NC,$C972    ; }
 $C933 LD IX,($A017)  ; #REGix=*#R$A017.
 $C937 BIT 6,(IX+$05) ; {Jump to #R$C94D if bit 6 of *#REGix+#N$05 is not set.
 $C93B JR Z,$C94D     ; }
 $C93D XOR A          ; #REGa=#N$00.
 $C93E CALL $D1DC     ; Call #R$D1DC.
 $C941 JR NC,$C94D    ; Jump to #R$C94D if #REGa is greater than or equal to
                      ; #N$FE.
 $C943 LD A,($A033)   ; #REGa=*#R$A033.
 $C946 CALL $D349     ; Call #R$D349.
 $C949 CP $FF         ; {Jump to #R$C960 if #REGa is not equal to #N$FF.
 $C94B JR NZ,$C960    ; }
*$C94D LD A,($A00F)   ; {Jump to #R$C972 if *#R$A00F is less than #N$07.
 $C950 CP $07         ;
 $C952 JR C,$C972     ; }
 $C954 LD IX,($A013)  ; #REGix=*#R$A013.
 $C958 LD A,($A033)   ; #REGa=*#R$A033.
 $C95B CALL $D1DC     ; Call #R$D1DC.
 $C95E JR NC,$C972    ; Jump to #R$C972 if #REGa is greater than or equal to
                      ; #N$07.
*$C960 LD A,(IX+$01)  ; #REGa=*#REGix+#N$01.
 $C963 LD E,A         ; #REGe=#REGa.
 $C964 LD D,$00       ; #REGd=#N$00.
 $C966 LD HL,$AA71    ; #REGhl=#R$AA71.
 $C969 DEC DE         ; Decrease #REGde by one.
 $C96A ADD HL,DE      ; #REGhl+=#REGde.
 $C96B ADD HL,DE      ; #REGhl+=#REGde.
 $C96C LD E,(HL)      ; #REGe=*#REGhl.
 $C96D INC HL         ; Increment #REGhl by one.
 $C96E LD D,(HL)      ; #REGd=*#REGhl.
 $C96F EX DE,HL       ; Exchange the #REGde and #REGhl registers.
 $C970 JR $C996       ; Jump to #R$C996.
*$C972 LD A,($A033)   ; #REGa=*#R$A033.
 $C975 LD IX,$9F38    ; #REGix=#R$9F38.
 $C979 CALL $D34E     ; Call #R$D34E.
 $C97C CP $FF         ; {Jump to #R$DC15 if #REGa is equal to #N$FF.
 $C97E JP Z,$DC15     ; }
 $C981 LD L,(IX+$01)  ; #REGl=*#REGix+#N$01.
 $C984 LD H,(IX+$02)  ; #REGh=*#REGix+#N$02.
 $C987 JR $C996       ; Jump to #R$C996.

; Routine at C989
;
; Used by the routine at #R$C4D1.
c$C989 PUSH IX       ; {#REGhl=#REGix (using the stack).
 $C98B POP HL        ; }
 $C98C PUSH HL       ; Stash #REGhl on the stack.
 $C98D CALL $C8EF    ; Call #R$C8EF.
 $C990 CALL $C996    ; Call #R$C996.
 $C993 POP IX        ; Restore #REGix from the stack.
 $C995 RET           ; Return.

; Routine at C996
;
; Used by the routines at #R$C929 and #R$C989.
c$C996 PUSH IY        ;
 $C998 PUSH BC        ;
 $C999 CALL $C9BF     ;
 $C99C POP BC         ;
 $C99D POP IY         ;
 $C99F JR C,$C9A7     ;
 $C9A1 JP Z,$CB43     ;
 $C9A4 OR $01         ;
 $C9A6 RET            ;
*$C9A7 PUSH HL        ;
 $C9A8 PUSH BC        ;
 $C9A9 LD HL,($9FD9)  ;
 $C9AC LD B,$01       ;
 $C9AE CALL $CF80     ;
 $C9B1 POP BC         ;
 $C9B2 POP HL         ;
 $C9B3 LD IX,($9FDB)  ;
 $C9B7 LD (IX+$01),L  ;
 $C9BA LD (IX+$02),H  ;
 $C9BD SCF            ;
 $C9BE RET            ;
*$C9BF PUSH HL        ;
 $C9C0 POP IY         ;
 $C9C2 CALL $D078     ;
 $C9C5 JR NC,$C9D3    ;
 $C9C7 LD A,(IY+$00)  ;
 $C9CA AND $20        ;
 $C9CC JR Z,$C9D3     ;
 $C9CE LD HL,$CBBB    ;
*$C9D1 XOR A          ;
 $C9D2 RET            ;
*$C9D3 CALL $C628     ;
 $C9D6 JR Z,$C9D1     ;
 $C9D8 CALL $C6BE     ;
 $C9DB JR Z,$C9D1     ;
 $C9DD BIT 6,(IY+$00) ;
 $C9E1 JR Z,$C9F2     ;
 $C9E3 LD L,(IY+$02)  ;
 $C9E6 LD H,(IY+$03)  ;
 $C9E9 PUSH IY        ;
 $C9EB CALL $CB34     ;
; This entry point is used by the routine at #R$F56E.
*$C9EE POP IY         ;
 $C9F0 JR Z,$C9D1     ;
*$C9F2 LD A,($A00B)   ;
 $C9F5 AND A          ;
 $C9F6 JR NZ,$C9FB    ;
 $C9F8 OR $01         ;
 $C9FA RET            ;
*$C9FB PUSH IY        ;
 $C9FD LD A,(IY+$01)  ;
 $CA00 RRCA           ;
 $CA01 RRCA           ;
 $CA02 RRCA           ;
 $CA03 RRCA           ;
 $CA04 AND $0F        ;
 $CA06 LD L,A         ;
 $CA07 LD H,$00       ;
 $CA09 LD ($A01F),HL  ;
 $CA0C POP HL         ;
 $CA0D LD DE,$0002    ;
 $CA10 ADD HL,DE      ;
 $CA11 BIT 6,(IY+$00) ;
 $CA15 JR Z,$CA18     ;
 $CA17 ADD HL,DE      ;
*$CA18 LD DE,$0005    ;
 $CA1B BIT 4,(IY+$00) ;
 $CA1F JR Z,$CA22     ;
 $CA21 ADD HL,DE      ;
*$CA22 LD A,($A00A)   ;
 $CA25 LD ($C491),A   ;
 $CA28 LD IX,($A013)  ;
 $CA2C LD A,(IX+$0F)  ;
 $CA2F LD ($C492),A   ;
 $CA32 PUSH HL        ;
 $CA33 PUSH IY        ;
 $CA35 LD A,$01       ;
 $CA37 LD ($A00C),A   ;
 $CA3A CALL $CA76     ;
 $CA3D POP IY         ;
 $CA3F POP HL         ;
 $CA40 BIT 7,(IY+$00) ;
 $CA44 JR Z,$CA48     ;
 $CA46 SCF            ;
 $CA47 RET            ;
*$CA48 LD A,($9FD7)   ;
 $CA4B INC A          ;
 $CA4C JR NZ,$CA54    ;
 $CA4E LD A,($A034)   ;
 $CA51 LD ($9FD7),A   ;
*$CA54 LD A,($9FD8)   ;
 $CA57 INC A          ;
 $CA58 JR NZ,$CA60    ;
 $CA5A LD A,($A035)   ;
 $CA5D LD ($9FD8),A   ;
*$CA60 XOR A          ;
 $CA61 LD ($CAAE),A   ;
 $CA64 CALL $CB2C     ;
 $CA67 PUSH AF        ;
 $CA68 PUSH HL        ;
 $CA69 CALL $CA7F     ;
 $CA6C LD A,($CAAE)   ;
 $CA6F AND A          ;
 $CA70 CALL Z,$CAAF   ;
 $CA73 POP HL         ;
 $CA74 POP AF         ;
 $CA75 RET            ;
; This entry point is used by the routine at #R$CB43.
*$CA76 LD A,($A033)   ;
 $CA79 AND $80        ;
 $CA7B CALL Z,$A2E4   ;
 $CA7E RET            ;
*$CA7F LD A,($9860)   ;
 $CA82 CALL $D237     ;
 $CA85 LD A,($A009)   ;
 $CA88 CP (IX+$0F)    ;
; This entry point is used by the routine at #R$F56E.
*$CA8B RET Z          ;
 $CA8C LD A,($A036)   ;
 $CA8F PUSH AF        ;
 $CA90 LD A,($9860)   ;
 $CA93 LD ($A036),A   ;
 $CA96 CALL $CA9E     ;
 $CA99 POP AF         ;
 $CA9A LD ($A036),A   ;
 $CA9D RET            ;
*$CA9E LD A,($DD01)   ;
 $CAA1 LD HL,($DCFF)  ;
 $CAA4 BIT 6,(HL)     ;
 $CAA6 JP NZ,$D1B2    ;
 $CAA9 SET 6,(HL)     ;
 $CAAB JP $D102       ;
 $CAAE NOP            ;
*$CAAF CALL $DC6C     ;
 $CAB2 RET Z          ;
 $CAB3 LD A,($C491)   ;
 $CAB6 LD HL,$A009    ;
 $CAB9 CP (HL)        ;
 $CABA RET Z          ;
 $CABB LD A,($A036)   ;
 $CABE CALL $D495     ;
 $CAC1 LD HL,$A009    ;
 $CAC4 CP (HL)        ;
 $CAC5 JR NZ,$CAD0    ;
 $CAC7 LD A,($A036)   ;
 $CACA LD DE,$68ED    ;
 $CACD CALL $CBC2     ;
*$CAD0 LD A,($A00F)   ;
 $CAD3 CP $07         ;
 $CAD5 RET C          ;
 $CAD6 LD A,($A034)   ;
 $CAD9 CALL $D495     ;
 $CADC CP $FF         ;
 $CADE JR NZ,$CB12    ;
 $CAE0 LD B,(IX+$00)  ;
 $CAE3 LD A,($A009)   ;
*$CAE6 CP (IX+$0F)    ;
 $CAE9 JR Z,$CAF0     ;
 $CAEB INC IX         ;
 $CAED DJNZ $CAE6     ;
 $CAEF RET            ;
*$CAF0 LD A,($A036)   ;
 $CAF3 LD B,A         ;
 $CAF4 LD A,$FF       ;
 $CAF6 LD ($A036),A   ;
 $CAF9 LD A,$01       ;
 $CAFB LD ($5C3C),A   ;
 $CAFE LD A,($A009)   ;
 $CB01 CALL $D471     ;
 $CB04 CP $FF         ;
 $CB06 CALL NZ,$CA76  ;
 $CB09 SUB A          ;
 $CB0A LD ($5C3C),A   ;
 $CB0D LD A,B         ;
 $CB0E LD ($A036),A   ;
 $CB11 RET            ;
*$CB12 LD A,($C492)   ;
 $CB15 LD HL,$A009    ;
 $CB18 CP (HL)        ;
 $CB19 RET Z          ;
 $CB1A LD A,($A034)   ;
 $CB1D LD HL,$A036    ;
 $CB20 CP (HL)        ;
 $CB21 RET Z          ;
 $CB22 LD DE,$68ED    ;
 $CB25 JP $CBC2       ;

; Game status buffer entry at CB28
g$CB28 DEFW $0000
 $CB2A DEFW $0000

; Routine at CB2C
;
; Used by the routine at #R$C996.
c$CB2C LD IX,($CB28) ;
 $CB30 LD IY,($CB2A) ;
; This entry point is used by the routine at #R$C996.
*$CB34 CALL $CB40    ;
 $CB37 LD ($CB28),IX ;
 $CB3B LD ($CB2A),IY ;
 $CB3F RET           ;
; This entry point is used by the routine at #R$CB43.
*$CB40 JP (HL)       ;
; This entry point is used by the routine at #R$C4D1.
*$CB41 XOR A         ;
 $CB42 RET           ;

; Routine at CB43
;
; Used by the routine at #R$C996.
c$CB43 PUSH HL       ;
 $CB44 CALL $DC6C    ;
 $CB47 POP HL        ;
 $CB48 JR NZ,$CB65   ;
 $CB4A XOR A         ;
 $CB4B LD ($A036),A  ;
 $CB4E LD A,($A00B)  ;
 $CB51 AND A         ;
 $CB52 JR Z,$CB5F    ;
 $CB54 LD A,L        ;
 $CB55 OR H          ;
 $CB56 JR NZ,$CB67   ;
; This entry point is used by the routine at #R$CB7B.
*$CB58 XOR A         ;
 $CB59 LD ($A00C),A  ;
 $CB5C CALL $CA76    ;
*$CB5F LD A,($9860)  ;
 $CB62 LD ($A036),A  ;
*$CB65 XOR A         ;
 $CB66 RET           ;
*$CB67 LD A,$01      ;
 $CB69 LD ($A027),A  ;
 $CB6C PUSH IY       ;
 $CB6E CALL $CB40    ;
 $CB71 POP IY        ;
 $CB73 XOR A         ;
 $CB74 LD ($A027),A  ;
 $CB77 JR $CB5F      ;

; Game status buffer entry at CB79
g$CB79 DEFB $00
 $CB7A DEFB $00

; Routine at CB7B
c$CB7B LD A,($CB79)  ;
 $CB7E BIT 7,A       ;
 $CB80 LD HL,$C471   ;
 $CB83 JR Z,$CB88    ;
 $CB85 LD HL,$C481   ;
*$CB88 OR $80        ;
*$CB8A LD E,(HL)     ;
 $CB8B INC HL        ;
 $CB8C LD D,(HL)     ;
 $CB8D INC HL        ;
 $CB8E RRCA          ;
 $CB8F JR NC,$CB8A   ;
 $CB91 LD A,D        ;
 $CB92 OR E          ;
 $CB93 JR Z,$CB58    ;
 $CB95 LD A,($CB7A)  ;
 $CB98 LD ($A034),A  ;
 $CB9B LD HL,$6817   ;
 $CB9E CALL $A59F    ;
 $CBA1 CALL $A887    ;
 $CBA4 JP $A2A2      ;

; Routine at CBA7
;
; Used by the routine at #R$DC6C.
c$CBA7 LD A,($B934)  ;
 $CBAA BIT 6,A       ;
 $CBAC RET Z         ;
 $CBAD POP HL        ;
 $CBAE XOR A         ;
 $CBAF LD ($A027),A  ;
 $CBB2 LD HL,$681A   ;
 $CBB5 CALL $A59F    ;
 $CBB8 JP $DC15      ;
 $CBBB LD HL,$68D1   ;
 $CBBE CALL $A59F    ;
 $CBC1 RET           ;

; Routine at CBC2
;
; Used by the routine at #R$C996.
c$CBC2 CP $FF        ;
 $CBC4 RET Z         ;
 $CBC5 AND A         ;
 $CBC6 RET Z         ;
 $CBC7 LD B,A        ;
 $CBC8 CALL $D495    ;
 $CBCB LD C,A        ;
 $CBCC LD A,($A009)  ;
 $CBCF CP C          ;
 $CBD0 RET NZ        ;
 $CBD1 LD A,$01      ;
 $CBD3 LD ($5C3C),A  ;
 $CBD6 PUSH DE       ;
*$CBD7 LD A,B        ;
 $CBD8 CALL $D237    ;
 $CBDB LD A,(IX+$01) ;
 $CBDE CP $FF        ;
 $CBE0 JR Z,$CBE5    ;
 $CBE2 LD B,A        ;
 $CBE3 JR $CBD7      ;
*$CBE5 LD A,B        ;
 $CBE6 CALL $A4BC    ;
 $CBE9 EX (SP),HL    ;
 $CBEA LD A,($A036)  ;
 $CBED PUSH AF       ;
 $CBEE LD A,($9860)  ;
 $CBF1 LD ($A036),A  ;
 $CBF4 CALL $CC29    ;
 $CBF7 LD A,B        ;
 $CBF8 CALL $C821    ;
 $CBFB JR NZ,$CC00   ;
 $CBFD POP AF        ;
 $CBFE POP HL        ;
 $CBFF RET           ;
*$CC00 POP AF        ;
 $CC01 LD ($A036),A  ;
 $CC04 CALL $CC29    ;
 $CC07 CALL $A59F    ;
 $CC0A RET           ;

; Game status buffer entry at CC0B
g$CC0B DEFB $00
 $CC0C DEFB $00
 $CC0D DEFB $00

; Find Character
;
; Used by the routines at #R$CC37 and #R$DC6C.
;
;   A Character ID
; O:A The character ID or #N$FF if it wasn't found
; O:IY Pointer to character data
; O:F The zero flag will be set if the character wasn't found
;
; Stash some registers so they don't get corrrupted.
@label=FindCharacter
c$CC0E PUSH DE       ; {Stash #REGde and #REGbc on the stack.
 $CC0F PUSH BC       ; }
 $CC10 LD C,A        ; Store the character ID in #REGc.
 $CC11 LD DE,$0008   ; Load the length of the character data #N($0008,$04,$04) bytes into
                     ; #REGde.
 $CC14 LD IY,$9860   ; #REGiy=#R$9860.
@label=FindCharacter_Loop
*$CC18 LD A,(IY+$00) ; Fetch the current characters ID from the timetable
                     ; pointer.
 $CC1B CP C          ; {Jump to #R$CC26 if this character ID and the requested character ID
 $CC1C JR Z,$CC26    ; match.}
 $CC1E CP $FF        ; {Jump to #R$CC26 if the termination character has been reached
 $CC20 JR Z,$CC26    ; (#N$FF).}
 $CC22 ADD IY,DE     ; Add #N($0008,$04,$04) bytes to the timetable pointer to move to the
                     ; next set of character data.
 $CC24 JR $CC18      ; Jump to #R$CC18.
; Return with some housekeeping.
@label=FindCharacter_Return
*$CC26 POP BC        ; {Restore #REGbc and #REGde from the stack.
 $CC27 POP DE        ; }
 $CC28 RET           ; Return.

; Routine at CC29
;
; Used by the routines at #R$CBC2 and #R$CC37.
c$CC29 LD A,($A036)  ; #REGa=*#R$A036.
 $CC2C CALL $D495    ; Call #R$D495.
 $CC2F LD ($A017),IX ; Write #REGix to *#R$A017.
 $CC33 LD ($A00A),A  ; Write #REGa to *#R$A00A.
 $CC36 RET           ; Return.

; Routine at CC37
;
; Used by the routine at #R$A040.
c$CC37 PUSH AF       ; Stash the character ID on the stack briefly.
 $CC38 XOR A         ; {Write #N$00 to *#R$CC0B.
 $CC39 LD ($CC0B),A  ; }
 $CC3C POP AF        ; Restore the character ID from the stack.
 $CC3D CALL $CC0E    ; Call #R$CC0E.
 $CC40 CP $FF        ; Was the character ID found?
 $CC42 LD HL,$0001   ; #REGhl=#N($0001,$04,$04).
 $CC45 JP Z,$CC74    ; Jump to #R$CC74 if the character ID wasn't found, and the
                     ; termination character was returned instead.
; The character is active in the timetable.
 $CC48 LD ($9FDB),IY ; Write the characters timetable pointer to *#R$9FDB.
 $CC4C LD ($A036),A  ; Write the character ID to *#R$A036.
 $CC4F CALL $B91F    ; Call #R$B91F.
 $CC52 LD A,$00      ; #REGa=#N$00.
 $CC54 JR NZ,$CC57   ; Jump to #R$CC57 if #REGa is not equal to #N$00.
 $CC56 INC A         ; Increment #REGa by one.
*$CC57 LD ($CC0D),A  ; Write #REGa to *#R$CC0D.
; This entry point is used by the routine at #R$CC78.
*$CC5A CALL $CC29    ; Call #R$CC29.
 $CC5D CALL $D045    ; Call #R$D045.
 $CC60 SUB A         ; #REGa-=#REGa.
 $CC61 LD ($5C3C),A  ; #HTML(Write #REGa to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3C.html">TV-FLAG</a>.)
 $CC64 LD A,($9860)  ; #REGa=*#R$9860.
 $CC67 CALL $C821    ; Call #R$C821.
 $CC6A JR Z,$CC71    ; Jump to #R$CC71 if #REGa is equal to #N$00.
 $CC6C LD A,$01      ; {#HTML(Write #N$01 to *<a rel="noopener nofollow"
 $CC6E LD ($5C3C),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3C.html">TV-FLAG</a>.)
                     ; }
*$CC71 LD HL,$0000   ; #REGhl=#N($0000,$04,$04).
*$CC74 LD ($A01F),HL ; Write #REGhl to *#R$A01F.
 $CC77 RET           ; Return.

; Script Interpreter
;
; Used by the routine at #R$A040.
;
; A Character ID
@label=ScriptInterpreter
c$CC78 CALL $CC5A      ; Call #R$CC5A.
 $CC7B LD IY,($9FDB)   ; #REGiy=#R$9FDB.
 $CC7F CALL $D008      ; Call #R$D008.
; This entry point is used by the routines at #R$CCF3 and #R$CEB8.
*$CC82 LD L,(IY+$01)   ; {Get the characters script position.
 $CC85 LD H,(IY+$02)   ; }
 $CC88 XOR A           ; {Write #N$00 to *#R$B934.
 $CC89 LD ($B934),A    ; }
 $CC8C LD A,($CC0B)    ; {Jump to #R$CD8B if *#R$CC0B is equal to #N$0A.
 $CC8F CP $0A          ;
 $CC91 JP Z,$CD8B      ; }
@label=FindNextCommand
*$CC94 LD A,(HL)       ; {Jump to #R$CC9B if *#REGhl is not equal to #REGa.
 $CC95 AND A           ;
 $CC96 JR NZ,$CC9B     ; }
 $CC98 INC HL          ; Increment #REGhl by one.
 $CC99 JR $CC94        ; Jump to #R$CC94.
; Process the current script command.
@label=ProcessScriptCommand
*$CC9B PUSH HL         ; {#REGix=#REGhl (using the stack).
 $CC9C POP IX          ; }
 $CC9E LD ($9FD9),HL   ; Write #REGhl to *#R$9FD9.
 $CCA1 AND %00001111   ; Keep only bits 0-3.
 $CCA3 CP $0A          ; {Jump to #R$CCF3 if #REGa is greater than or equal to
 $CCA5 JR NC,$CCF3     ; #N$0A.}
 $CCA7 LD A,($CC0D)    ; {Jump to #R$CCC7 if *#R$CC0D is not equal to #N$01.
 $CCAA CP $01          ;
 $CCAC JR NZ,$CCC7     ; }
 $CCAE SUB A           ; #REGa-=#REGa.
 $CCAF LD ($CC0D),A    ; Write #REGa to *#R$CC0D.
 $CCB2 LD A,(HL)       ; #REGa=*#REGhl.
 $CCB3 CALL $B936      ; Call #R$B936.
 $CCB6 JP C,$CD91      ; Jump to #R$CD91 if #REGa is less than #N$01.
 $CCB9 JR Z,$CCC7      ; Jump to #R$CCC7 if #REGa is equal to #N$01.
 $CCBB CALL $C4D1      ; Call #R$C4D1.
 $CCBE RET NC          ; Return if #REGa is greater than #N$01.
 $CCBF CALL $CFB6      ; Call #R$CFB6.
 $CCC2 LD (IX+$05),$02 ; Write #N$02 to *#REGix+#N$05.
 $CCC6 RET             ; Return.

; Execute Character Command
;
; Used by the routine at #R$CC78.
@label=ExecuteCharacterCommand
c$CCC7 LD A,(HL)     ; Get the command byte.
 $CCC8 AND %00001111 ; Extract the command type.
 $CCCA CP $07        ; {Jump to #R$CE3B for command type #N$07.
 $CCCC JP Z,$CE3B    ; }
 $CCCF CP $06        ; {Jump to #R$CD95 for command type #N$06.
 $CCD1 JP Z,$CD95    ; }
 $CCD4 CP $05        ; {Jump to #R$CDA1 for command type #N$05.
 $CCD6 JP Z,$CDA1    ; }
 $CCD9 CP $04        ; {Jump to #R$CDBF for command type #N$04.
 $CCDB JP Z,$CDBF    ; }
 $CCDE CP $01        ; {Jump to #R$CE6A for command type #N$01.
 $CCE0 JP Z,$CE6A    ; }
 $CCE3 CP $03        ; {Jump to #R$CE4F for command type #N$03.
 $CCE5 JP Z,$CE4F    ; }
 $CCE8 CP $08        ; {Jump to #R$CD24 for command type #N$08.
 $CCEA JR Z,$CD24    ; }
 $CCEC CP $09        ; {Jump to #R$CD47 for command type #N$09.
 $CCEE JR Z,$CD47    ; }
 $CCF0 JP $CE18      ; Jump to #R$CE18.

; Routine at CCF3
;
; Used by the routine at #R$CC78.
c$CCF3 CP $0E        ; {Jump to #R$CD06 if #REGa is not equal to #N$0E.
 $CCF5 JR NZ,$CD06   ; }
 $CCF7 LD A,(IX+$01) ; {Write *#REGix+#N$01 to *#REGiy+#N$01.
 $CCFA LD (IY+$01),A ; }
 $CCFD LD A,(IX+$02) ; {Write *#REGix+#N$02 to *#REGiy+#N$02.
 $CD00 LD (IY+$02),A ; }
 $CD03 JP $CC82      ; Jump to #R$CC82.
*$CD06 CP $0C        ; {Jump to #R$CD08 if #REGa is equal to #N$0C.
*$CD08 JR Z,$CD08    ; }
 $CD0A CP $0B        ; {Jump to #R$CD17 if #REGa is not equal to #N$0B.
 $CD0C JR NZ,$CD17   ; }
 $CD0E CALL $CFCF    ; Call #R$CFCF.
 $CD11 CP $02        ; {Return if #REGa is equal to #N$02.
 $CD13 RET Z         ; }
 $CD14 JP $CE8F      ; Jump to #R$CE8F.
*$CD17 CP $0A        ; {Jump to #R$CD82 if #REGa is not equal to #N$0A.
 $CD19 JR NZ,$CD82   ; }
 $CD1B CALL $CFCF    ; Call #R$CFCF.
 $CD1E CP $02        ; {Return if #REGa is equal to #N$02.
 $CD20 RET Z         ; }
 $CD21 JP $CEB8      ; Jump to #R$CEB8.

; Handle Push Stack
;
; Used by the routine at #R$CCC7.
@label=HandlePushStack
c$CD24 LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $CD27 PUSH AF       ; Stash #REGaf on the stack.
 $CD28 LD A,$02      ; #REGa=#N$02.
 $CD2A CALL $A11C    ; Call #R$A11C.
 $CD2D LD HL,($9FE7) ; #REGhl=*#R$9FE7.
 $CD30 LD ($9FE7),IX ; Write #REGix to *#R$9FE7.
 $CD34 LD (IX-$02),L ; Write #REGl to *#REGix-#N$02.
 $CD37 LD (IX-$01),H ; Write #REGh to *#REGix-#N$01.
 $CD3A LD A,($A036)  ; {Write *#R$A036 to *#REGix+#N$00.
 $CD3D LD (IX+$00),A ; }
 $CD40 POP AF        ; Restore #REGaf from the stack.
 $CD41 LD (IX+$01),A ; Write #REGa to *#REGix+#N$01.
 $CD44 JP $CE8F      ; Jump to #R$CE8F.

; Handle Pop Stack
;
; Used by the routine at #R$CCC7.
@label=HandlePopStack
c$CD47 LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $CD4A LD IX,$9FE9   ; #REGix=#R$9FE9.
*$CD4E CALL $A0F7    ; Call #R$A0F7.
 $CD51 JP Z,$CEB8    ; Jump to #R$CEB8 if #REGa is equal to #N$02.
 $CD54 LD A,($A036)  ; {Jump to #R$CD4E if *#R$A036 is not equal to
 $CD57 CP (IX+$01)   ; *#REGix+#N$01.
 $CD5A JR NZ,$CD4E   ; }
 $CD5C LD A,B        ; {Jump to #R$CD4E if #REGb is not equal to *#REGix+#N$00.
 $CD5D CP (IX+$00)   ;
 $CD60 JR NZ,$CD4E   ; }
 $CD62 PUSH IY       ; Stash #REGiy on the stack.
 $CD64 PUSH IX       ; {#REGde=#REGix (using the stack).
 $CD66 POP DE        ; }
 $CD67 LD IY,$9FE7   ; #REGiy=#R$9FE7.
 $CD6B CALL $A104    ; Call #R$A104.
 $CD6E LD L,(IX-$02) ; #REGl=*#REGix-#N$02.
 $CD71 LD H,(IX-$01) ; #REGh=*#REGix-#N$01.
 $CD74 LD (IY-$02),L ; Write #REGl to *#REGiy-#N$02.
 $CD77 LD (IY-$01),H ; Write #REGh to *#REGiy-#N$01.
 $CD7A CALL $A1C7    ; Call #R$A1C7.
 $CD7D POP IY        ; Restore #REGiy from the stack.
 $CD7F JP $CE8F      ; Jump to #R$CE8F.

; Set Character Script Error
;
; Used by the routine at #R$CCF3.
;
; .
;
; Set script completion flag.
@label=SetCharacterScriptError
c$CD82 LD HL,$0001   ; {Write #N($0001,$04,$04) to *#R$A01F.
 $CD85 LD ($A01F),HL ; }
 $CD88 JP $CE8F      ; Jump to #R$CE8F.

; Terminate Character Script
;
; Used by the routines at #R$CC78 and #R$CEB8.
;
; .
;
; Set script completion flag.
@label=TerminateCharacterScript
c$CD8B LD HL,$0001   ; {Write #N($0001,$04,$04) to *#R$A01F.
 $CD8E LD ($A01F),HL ; }
; This entry point is used by the routines at #R$CC78 and #R$CE8F.
*$CD91 CALL $D026    ; Call #R$D026.
 $CD94 RET           ; Return.

; Handle Display Text
;
; Used by the routine at #R$CCC7.
@label=HandleDisplayText
c$CD95 LD L,(IX+$01) ; #REGl=*#REGix+#N$01.
 $CD98 LD H,(IX+$02) ; #REGh=*#REGix+#N$02.
 $CD9B CALL $A59F    ; Call #R$A59F.
 $CD9E JP $CE8F      ; Jump to #R$CE8F.

; Routine at CDA1
;
; Used by the routine at #R$CCC7.
c$CDA1 LD L,(IX+$02)   ; #REGl=*#REGix+#N$02.
 $CDA4 LD H,(IX+$03)   ; #REGh=*#REGix+#N$03.
 $CDA7 PUSH HL         ; Stash #REGhl on the stack.
 $CDA8 LD A,(IX+$01)   ; #REGa=*#REGix+#N$01.
 $CDAB CALL $CEDE      ; Call #R$CEDE.
 $CDAE LD ($A034),A    ; Write #REGa to *#R$A034.
 $CDB1 LD A,$07        ; {Write #N$07 to *#R$A00F.
 $CDB3 LD ($A00F),A    ; }
 $CDB6 LD HL,$6830     ; #REGhl=#R$6830.
 $CDB9 CALL $A59F      ; Call #R$A59F.
 $CDBC JP $CE8F        ; Jump to #R$CE8F.
; This entry point is used by the routine at #R$CCC7.
*$CDBF LD A,$2E        ; {Write #N$2E to *#R$A033.
 $CDC1 LD ($A033),A    ; }
 $CDC4 LD A,(IX+$01)   ; #REGa=*#REGix+#N$01.
 $CDC7 CALL $CEDE      ; Call #R$CEDE.
 $CDCA LD ($A034),A    ; Write #REGa to *#R$A034.
 $CDCD LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $CDD0 LD ($A35D),A    ; Write #REGa to *#R$A35D.
 $CDD3 LD A,(IX+$03)   ; #REGa=*#REGix+#N$03.
 $CDD6 CALL $CEDE      ; Call #R$CEDE.
 $CDD9 LD ($A35E),A    ; Write #REGa to *#R$A35E.
 $CDDC LD A,(IX+$04)   ; #REGa=*#REGix+#N$04.
 $CDDF CALL $CEDE      ; Call #R$CEDE.
 $CDE2 LD ($A35F),A    ; Write #REGa to *#R$A35F.
 $CDE5 LD A,$08        ; #REGa=#N$08.
 $CDE7 CALL $A11C      ; Call #R$A11C.
 $CDEA LD A,($A034)    ; #REGa=*#R$A034.
 $CDED LD (IX+$00),A   ; Write #REGa to *#REGix+#N$00.
 $CDF0 LD (IX+$01),$FF ; Write #N$FF to *#REGix+#N$01.
 $CDF4 LD A,($A35D)    ; #REGa=*#R$A35D.
 $CDF7 LD (IX+$02),A   ; Write #REGa to *#REGix+#N$02.
 $CDFA LD HL,($A35E)   ; #REGhl=*#R$A35E.
 $CDFD LD (IX+$03),L   ; Write #REGl to *#REGix+#N$03.
 $CE00 LD (IX+$04),H   ; Write #REGh to *#REGix+#N$04.
 $CE03 LD HL,($9FEE)   ; #REGhl=*#R$9FEE.
 $CE06 LD ($9FEE),IX   ; Write #REGix to *#R$9FEE.
 $CE0A LD (IX-$02),L   ; Write #REGl to *#REGix+#N$FE.
 $CE0D LD (IX-$01),H   ; Write #REGh to *#REGix+#N$FF.
 $CE10 LD HL,$682A     ; #REGhl=#R$682A.
 $CE13 CALL $A59F      ; Call #R$A59F.
 $CE16 JR $CE8F        ; Jump to #R$CE8F.
; This entry point is used by the routine at #R$CCC7.
*$CE18 LD A,(IX+$01)   ; #REGa=*#REGix+#N$01.
 $CE1B CALL $CEDE      ; Call #R$CEDE.
 $CE1E LD ($A033),A    ; Write #REGa to *#R$A033.
 $CE21 LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $CE24 CALL $CEDE      ; Call #R$CEDE.
 $CE27 LD ($A034),A    ; Write #REGa to *#R$A034.
 $CE2A LD A,(IX+$03)   ; #REGa=*#REGix+#N$03.
 $CE2D CALL $CEDE      ; Call #R$CEDE.
 $CE30 LD ($A035),A    ; Write #REGa to *#R$A035.
 $CE33 CALL $C4D1      ; Call #R$C4D1.
 $CE36 RET C           ; Return if #REGa is less than #N$08.
 $CE37 JR Z,$CEB8      ; Jump to #R$CEB8 if #REGa is equal to #N$08.
 $CE39 JR $CE8F        ; Jump to #R$CE8F.

; HandleRoomDisplay
;
; Used by the routine at #R$CCC7.
@label=HandleRoomDisplay
c$CE3B LD A,(IX+$03) ; Get the room display parameter.
 $CE3E CALL $CEDE    ; Call #R$CEDE.
 $CE41 LD ($A034),A  ; Write the room display parameter to *#R$A034.
 $CE44 LD A,(IX+$04) ; Get the room graphics parameter.
 $CE47 CALL $CEDE    ; Call #R$CEDE.
 $CE4A LD ($A035),A  ; Write the room graphics parameter to *#R$A035.
 $CE4D JR $CE57      ; Jump to #R$CE57.

; Routine at CE4F
;
; Used by the routine at #R$CCC7.
c$CE4F LD A,$FF      ; {Write #N$FF to; #LIST { *#R$A034 } { *#R$A035 } LIST#
 $CE51 LD ($A034),A  ;
 $CE54 LD ($A035),A  ; }
; This entry point is used by the routine at #R$CE3B.
; .
; Set the room description marker.
@label=ShowRoomDescription
*$CE57 LD A,$FF      ; {Write #N$FF to *#R$A033.
 $CE59 LD ($A033),A  ; }
 $CE5C LD L,(IX+$01) ; {Fetch the room address from *#REGix+#N$01/ *#REGix+#N$02 and store
 $CE5F LD H,(IX+$02) ; it in #REGhl.}
 $CE62 CALL $C591    ; Call #R$C591.
 $CE65 RET C         ; Return if the room description can't be displayed.
 $CE66 JR Z,$CEB8    ; Jump to #R$CEB8 if #REGa is equal to #N$FF.
 $CE68 JR $CE8F      ; Jump to #R$CE8F.

; Handle Simple Action
;
; Used by the routine at #R$CCC7.
@label=HandleSimpleAction
c$CE6A LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $CE6D CALL $CEDE    ; Call #R$CEDE.
 $CE70 LD ($A033),A  ; Write #REGa to *#R$A033.
 $CE73 LD A,$FF      ; {Write #N$FF to; #LIST { *#R$A034 } { *#R$A035 } LIST#
 $CE75 LD ($A034),A  ;
 $CE78 LD ($A035),A  ; }
 $CE7B CALL $C4D1    ; Call #R$C4D1.
 $CE7E RET C         ; Return if #REGa is less than #N$FF.
 $CE7F JR Z,$CEB8    ; Jump to #R$CEB8 if #REGa is equal to #N$FF.
 $CE81 JR $CE8F      ; Jump to #R$CE8F.

; Get Current Script State
;
; Used by the routines at #R$CE8F and #R$CEB8.
@label=GetCurrentScriptState
c$CE83 LD IY,($9FDB) ; #REGiy=*#R$9FDB.
 $CE87 LD HL,($9FD9) ; {#REGix=*#R$9FD9 (using the stack).
 $CE8A PUSH HL       ;
 $CE8B POP IX        ; }
 $CE8D LD A,(HL)     ; Get the current command byte.
 $CE8E RET           ; Return.

; Continue Script Execution
;
; Used by the routines at #R$CCF3, #R$CD24, #R$CD47, #R$CD82, #R$CD95, #R$CDA1,
; #R$CE4F and #R$CE6A.
@label=ContinueScriptExecution
c$CE8F CALL $CE83     ; Call #R$CE83.
 $CE92 CALL $CF03     ; Call #R$CF03.
 $CE95 BIT 7,(IX+$00) ; {Jump to #R$CEA1 if bit 7 of *#REGix+#N$00 is not set.
 $CE99 JR Z,$CEA1     ; }
 $CE9B LD E,(HL)      ; #REGe=*#REGhl.
 $CE9C INC HL         ; Increment #REGhl by one.
 $CE9D LD D,(HL)      ; #REGd=*#REGhl.
 $CE9E EX DE,HL       ; Exchange the #REGde and #REGhl registers.
 $CE9F JR $CEA8       ; Jump to #R$CEA8.
*$CEA1 BIT 4,(IX+$00) ; {Call #R$CF40 if bit 4 of *#REGix+#N$00 is set.
 $CEA5 CALL NZ,$CF40  ; }
*$CEA8 BIT 5,(IX+$00) ; {Call #R$CF43 if bit 5 of *#REGix+#N$00 is set.
 $CEAC CALL NZ,$CF43  ; }
 $CEAF LD (IY+$01),L  ; Write #REGl to *#REGiy+#N$01.
 $CEB2 LD (IY+$02),H  ; Write #REGh to *#REGiy+#N$02.
 $CEB5 JP $CD91       ; Jump to #R$CD91.

; Routine at CEB8
;
; Used by the routines at #R$CCF3, #R$CD47, #R$CDA1, #R$CE4F and #R$CE6A.
c$CEB8 LD HL,$CC0B    ; {Increment *#R$CC0B by one.
 $CEBB INC (HL)       ; }
 $CEBC CALL $CE83     ; Call #R$CE83.
 $CEBF CALL $CEFE     ; Call #R$CEFE.
 $CEC2 BIT 4,(IX+$00) ; {Jump to #R$CECC if bit 4 of *#REGix+#N$00 is not set.
 $CEC6 JR Z,$CECC     ; }
 $CEC8 LD E,(HL)      ; #REGe=*#REGhl.
 $CEC9 INC HL         ; Increment #REGhl by one.
 $CECA LD D,(HL)      ; #REGd=*#REGhl.
 $CECB EX DE,HL       ; Exchange the #REGde and #REGhl registers.
*$CECC LD (IY+$01),L  ; Write #REGl to *#REGiy+#N$01.
 $CECF LD (IY+$02),H  ; Write #REGh to *#REGiy+#N$02.
 $CED2 PUSH IX        ; {#REGde=#REGix (using the stack).
 $CED4 POP DE         ; }
 $CED5 AND A          ; {#REGhl-=#REGde (with carry).
 $CED6 SBC HL,DE      ; }
 $CED8 JP Z,$CD8B     ; Jump to #R$CD8B if #REGhl is equal to #REGa.
 $CEDB JP $CC82       ; Jump to #R$CC82.

; Routine at CEDE
;
; Used by the routines at #R$B936, #R$CDA1, #R$CE3B and #R$CE6A.
c$CEDE CP $F5        ;
 $CEE0 RET C         ;
 $CEE1 CP $FE        ;
 $CEE3 RET NC        ;
 $CEE4 CP $FA        ;
 $CEE6 JR NZ,$CEEC   ;
 $CEE8 LD A,($9FD6)  ;
 $CEEB RET           ;
*$CEEC CP $FB        ;
 $CEEE JR NZ,$CEF4   ;
 $CEF0 LD A,($A036)  ;
 $CEF3 RET           ;
*$CEF4 CP $FC        ;
 $CEF6 LD A,($9FD8)  ;
 $CEF9 RET Z         ;
 $CEFA LD A,($9FD7)  ;
 $CEFD RET           ;

; Routine at CEFE
;
; Used by the routine at #R$CEB8.
c$CEFE BIT 7,A       ;
 $CF00 CALL NZ,$CF40 ;
; This entry point is used by the routine at #R$CE8F.
*$CF03 AND $0F       ;
 $CF05 CP $0F        ;
 $CF07 JR Z,$CF41    ;
 $CF09 CP $08        ;
 $CF0B JR Z,$CF40    ;
 $CF0D CP $09        ;
 $CF0F JR Z,$CF40    ;
 $CF11 CP $01        ;
 $CF13 JR Z,$CF40    ;
 $CF15 CP $02        ;
 $CF17 JR Z,$CF3E    ;
 $CF19 CP $03        ;
 $CF1B JR Z,$CF3F    ;
 $CF1D CP $0D        ;
 $CF1F JR Z,$CF40    ;
 $CF21 CP $0E        ;
 $CF23 JR Z,$CF3F    ;
 $CF25 CP $07        ;
 $CF27 JR Z,$CF3D    ;
 $CF29 CP $0C        ;
 $CF2B JR Z,$CF3D    ;
 $CF2D CP $0B        ;
 $CF2F JR Z,$CF41    ;
 $CF31 CP $0A        ;
 $CF33 JR Z,$CF41    ;
 $CF35 CP $05        ;
 $CF37 JR Z,$CF3E    ;
 $CF39 CP $04        ;
 $CF3B JR NZ,$CF3F   ;
*$CF3D INC HL        ;
*$CF3E INC HL        ;
*$CF3F INC HL        ;
; This entry point is used by the routine at #R$CE8F.
*$CF40 INC HL        ;
*$CF41 INC HL        ;
 $CF42 RET           ;

; Routine at CF43
;
; Used by the routine at #R$CE8F.
c$CF43 LD A,(IX+$00)   ;
 $CF46 BIT 7,A         ;
 $CF48 CALL NZ,$CF73   ;
 $CF4B BIT 4,A         ;
 $CF4D CALL NZ,$CF73   ;
 $CF50 AND $0F         ;
 $CF52 CP $01          ;
 $CF54 JR Z,$CF73      ;
 $CF56 CP $02          ;
 $CF58 JR Z,$CF6B      ;
 $CF5A CP $05          ;
 $CF5C JR Z,$CF6B      ;
 $CF5E CP $07          ;
 $CF60 JR Z,$CF68      ;
 $CF62 CP $06          ;
 $CF64 JR Z,$CF70      ;
 $CF66 CP $04          ;
*$CF68 CALL Z,$CF79    ;
*$CF6B CALL Z,$CF73    ;
 $CF6E CP $03          ;
*$CF70 CALL Z,$CF79    ;
*$CF73 LD (IX+$00),$00 ;
 $CF77 INC IX          ;
*$CF79 LD (IX+$00),$00 ;
 $CF7D INC IX          ;
 $CF7F RET             ;

; Routine at CF80
;
; Used by the routines at #R$C996 and #R$DC6C.
c$CF80 PUSH IX       ;
 $CF82 LD A,$07      ;
 $CF84 CALL $A11C    ;
 $CF87 LD A,($A036)  ;
 $CF8A LD (IX+$00),A ;
 $CF8D LD (IX+$01),L ;
 $CF90 LD (IX+$02),H ;
 $CF93 LD DE,($A034) ;
 $CF97 LD (IX+$03),E ;
 $CF9A LD (IX+$04),D ;
; This entry point is used by the routine at #R$F56E.
*$CF9D LD (IX+$05),B ;
 $CFA0 LD A,($9FD6)  ;
 $CFA3 LD (IX+$06),A ;
 $CFA6 LD HL,($9FE9) ;
 $CFA9 LD ($9FE9),IX ;
 $CFAD LD (IX-$02),L ;
 $CFB0 LD (IX-$01),H ;
 $CFB3 POP IX        ;
 $CFB5 RET           ;

; Routine at CFB6
;
; Used by the routines at #R$CC78, #R$CFCF, #R$D008, #R$D026, #R$DC6C and
; #R$E691.
c$CFB6 LD A,($A036)  ;
; This entry point is used by the routine at #R$DC6C.
*$CFB9 LD IX,$9FEB   ;
*$CFBD PUSH AF       ;
 $CFBE CALL $A0F7    ;
 $CFC1 JR Z,$CFCC    ;
 $CFC3 POP AF        ;
 $CFC4 CP (IX+$00)   ;
 $CFC7 JR NZ,$CFBD   ;
 $CFC9 OR $01        ;
 $CFCB RET           ;
*$CFCC POP AF        ;
 $CFCD XOR A         ;
 $CFCE RET           ;

; Routine at CFCF
;
; Used by the routine at #R$CCF3.
c$CFCF CALL $CFB6    ;
 $CFD2 LD E,(IX+$01) ;
 $CFD5 LD D,(IX+$02) ;
 $CFD8 LD ($9FD9),DE ;
 $CFDC LD (IY+$01),E ;
 $CFDF LD (IY+$02),D ;
 $CFE2 PUSH IX       ;
 $CFE4 POP DE        ;
 $CFE5 PUSH IY       ;
 $CFE7 LD IY,$9FE9   ;
 $CFEB CALL $A104    ;
 $CFEE LD L,(IX-$02) ;
 $CFF1 LD H,(IX-$01) ;
 $CFF4 LD (IY-$02),L ;
 $CFF7 LD (IY-$01),H ;
 $CFFA LD A,(IX+$05) ;
 $CFFD PUSH AF       ;
 $CFFE CALL $A1C7    ;
 $D001 CALL $D008    ;
 $D004 POP AF        ;
 $D005 POP IY        ;
 $D007 RET           ;

; Routine at D008
;
; Used by the routines at #R$CC78 and #R$CFCF.
c$D008 LD L,(IY+$04) ;
 $D00B LD H,(IY+$05) ;
 $D00E CALL $CFB6    ;
 $D011 LD A,(IY+$03) ;
 $D014 JR Z,$D01F    ;
 $D016 LD L,(IX+$03) ;
 $D019 LD H,(IX+$04) ;
 $D01C LD A,(IX+$06) ;
*$D01F LD ($9FD6),A  ;
 $D022 LD ($9FD7),HL ;
 $D025 RET           ;

; Routine at D026
;
; Used by the routine at #R$CD8B.
c$D026 LD HL,($9FD7) ;
 $D029 CALL $CFB6    ;
 $D02C LD A,($9FD6)  ;
 $D02F JR Z,$D03B    ;
 $D031 LD (IX+$03),L ;
 $D034 LD (IX+$04),H ;
 $D037 LD (IX+$06),A ;
 $D03A RET           ;
*$D03B LD (IY+$03),A ;
 $D03E LD (IY+$04),L ;
 $D041 LD (IY+$05),H ;
 $D044 RET           ;

; Routine at D045
;
; Used by the routine at #R$CC37.
c$D045 LD A,($9860)  ; #REGa=*#R$9860.
 $D048 CALL $D495    ; Call #R$D495.
 $D04B LD ($A009),A  ; Write #REGa to *#R$A009.
 $D04E RET           ; Return.

; Adjust Object Table For Sum
;
; Used by the routines at #R$B191, #R$B4A3, #R$BD7E, #R$D249, #R$D4CC and
; #R$D526.
@label=AdjustObjectTableForSum
c$D04F LD IX,$8B6F   ; #REGix=#R$8B6F.
 $D053 DEC IX        ; {Decrease #REGix by three.
 $D055 DEC IX        ;
 $D057 DEC IX        ; }
 $D059 RET           ; Return.

; Table: Tokens
@label=Table_Tokens
g$D05A DEFW $0624    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D05C DEFW $0466    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D05E DEFW $0450    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D060 DEFW $05FF    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D062 DEFW $009A    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".

; Table: Direction Tokens
@label=Table_DirectionTokens
g$D064 DEFW $05C3    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D066 DEFW $081A    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D068 DEFW $0284    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D06A DEFW $0992    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D06C DEFW $05C7    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D06E DEFW $05D0    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D070 DEFW $081E    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D072 DEFW $0827    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D074 DEFW $093C    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".
 $D076 DEFW $0272    ; "#R($5DBF+(#PEEK(#PC+$01)*$100+#PEEK(#PC)))(#TOKEN(#PEEK(#PC+$01)*$100+#PEEK(#PC)))".

; Routine at D078
;
; Used by the routines at #R$A2E4, #R$C996 and #R$D1B2.
c$D078 PUSH IX        ; {Stash #REGix, #REGiy and #REGbc on the stack.
 $D07A PUSH IY        ;
 $D07C PUSH BC        ; }
 $D07D LD IX,($A017)  ; #REGix=*#R$A017.
 $D081 LD A,(IX+$04)  ; #REGa=*#REGix+#N$04.
 $D084 AND %10000000  ; Keep only bit 7.
 $D086 JR Z,$D0C6     ; Jump to #R$D0C6 if ?? is equal to #N$00.
 $D088 CALL $C86E     ; Call #R$C86E.
 $D08B INC A          ; Increment #REGa by one.
 $D08C JR NZ,$D09E    ; Jump to #R$D09E if #REGa is not equal to #N$00.
 $D08E CALL $D33C     ; Call #R$D33C.
 $D091 BIT 7,(IX+$00) ; {Jump to #R$D0C6 if bit 7 of *#REGix+#N$00 is set.
 $D095 JR NZ,$D0C6    ; }
 $D097 CALL $C00C     ; Call #R$C00C.
 $D09A CP $01         ; {Jump to #R$D0C6 if the time-period code is anything other than late
 $D09C JR NZ,$D0C6    ; night/ evening (8 PM - 5 AM).}
; It's late night/ evening (8 PM - 5 AM).
*$D09E LD IX,$8B6F    ; #REGix=#R$8B6F.
*$D0A2 CALL $D206     ; Call #R$D206.
 $D0A5 JR Z,$D0C9     ; Jump to #R$D0C9 if #REGa is equal to #N$01.
 $D0A7 LD A,(IY+$00)  ; {Jump to #R$D0A2 if *#REGiy+#N$00 is not equal to
 $D0AA CP $01         ; #N$01.
 $D0AC JR NZ,$D0A2    ; }
 $D0AE LD A,(IY+$05)  ; #REGa=*#REGiy+#N$05.
 $D0B1 XOR %10110111  ; Flip bits 0-2, 4-5, 7.
 $D0B3 AND %01011100  ; Keep only bits 2-4, 6.
 $D0B5 JR NZ,$D0A2    ; Jump to #R$D0A2 if #REGa is not equal to #N$01.
 $D0B7 LD A,(IY+$04)  ; #REGa=*#REGiy+#N$04.
 $D0BA AND %10000000  ; Keep only bit 7.
 $D0BC JR Z,$D0A2     ; Jump to #R$D0A2 if #REGa is equal to #N$01.
 $D0BE LD A,(IX+$00)  ; #REGa=*#REGix+#N$00.
 $D0C1 CALL $C821     ; Call #R$C821.
 $D0C4 JR Z,$D0A2     ; Jump to #R$D0A2 if #REGa is equal to #N$01.
*$D0C6 AND A          ; Set flags.
 $D0C7 JR $D0CA       ; Jump to #R$D0CA.
*$D0C9 SCF            ; Set the carry flag.
*$D0CA POP BC         ; {Restore #REGbc, #REGiy and #REGix from the stack.
 $D0CB POP IY         ;
 $D0CD POP IX         ; }
 $D0CF RET            ; Return.

; Routine at D0D0
;
; Used by the routines at #R$D0DD and #R$D102.
c$D0D0 PUSH DE       ; Stash #REGde on the stack.
 $D0D1 LD DE,$68DE   ; #REGde=#R$68DE.
 $D0D4 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D0D5 SET 7,D       ; Set bit 7 of #REGd.
 $D0D7 LD (HL),D     ; Write #REGd to *#REGhl.
 $D0D8 INC HL        ; Increment #REGhl by one.
 $D0D9 LD (HL),E     ; Write #REGe to *#REGhl.
 $D0DA POP DE        ; Restore #REGde from the stack.
 $D0DB RET           ; Return.

; Game status buffer entry at D0DC
g$D0DC DEFB $00

; Routine at D0DD
;
; Used by the routines at #R$D102 and #R$D1B2.
c$D0DD PUSH AF       ; Stash #REGaf on the stack.
 $D0DE CALL $D224    ; Call #R$D224.
 $D0E1 LD A,($D0DC)  ; #REGa=*#R$D0DC.
 $D0E4 AND A         ; Set flags.
 $D0E5 LD HL,$68E4   ; #REGhl=#R$68E4.
 $D0E8 JR NZ,$D100   ; Jump to #R$D100 if ?? is not equal to #REGa.
 $D0EA LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $D0ED AND %00001110 ; Keep only bits 1-3.
 $D0EF LD E,A        ; #REGe=#REGa.
 $D0F0 LD D,$00      ; #REGd=#N$00.
 $D0F2 LD HL,$D05A   ; #REGhl=#R$D05A.
 $D0F5 ADD HL,DE     ; #REGhl+=#REGde.
 $D0F6 LD E,(HL)     ; #REGe=*#REGhl.
 $D0F7 INC HL        ; Increment #REGhl by one.
 $D0F8 LD D,(HL)     ; #REGd=*#REGhl.
 $D0F9 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D0FA CALL $D0D0    ; Call #R$D0D0.
 $D0FD LD HL,$68DD   ; #REGhl=#R$68DD.
*$D100 POP AF        ; Restore #REGaf from the stack.
 $D101 RET           ; Return.

; Routine at D102
;
; Used by the routines at #R$C996 and #R$DC6C.
c$D102 CALL $D0DD    ;
 $D105 PUSH IX       ;
 $D107 PUSH IY       ;
 $D109 PUSH BC       ;
 $D10A CALL $D113    ;
 $D10D POP BC        ;
 $D10E POP IY        ;
 $D110 POP IX        ;
 $D112 RET           ;
*$D113 LD B,A        ;
 $D114 CALL $D224    ;
 $D117 LD A,B        ;
 $D118 CALL $A277    ;
 $D11B PUSH IX       ;
 $D11D PUSH BC       ;
 $D11E PUSH HL       ;
 $D11F LD A,($A036)  ;
 $D122 CALL $C863    ;
 $D125 EX AF,AF'     ;
 $D126 CP $FF        ;
 $D128 JR Z,$D167    ;
 $D12A PUSH AF       ;
 $D12B LD HL,($68DE) ;
 $D12E PUSH HL       ;
 $D12F LD HL,$8000   ;
 $D132 CALL $D0D0    ;
 $D135 LD HL,$68DD   ; #REGhl=#R$68DD.
 $D138 CALL $A59F    ; Call #R$A59F.
 $D13B POP HL        ;
 $D13C LD ($68DE),HL ;
 $D13F POP AF        ;
 $D140 PUSH AF       ;
 $D141 CALL $D237    ;
 $D144 CALL $D5D3    ;
 $D147 CALL $D3D5    ;
 $D14A POP AF        ;
 $D14B PUSH AF       ;
 $D14C CALL $D4CC    ;
 $D14F AND A         ;
 $D150 JR Z,$D163    ;
 $D152 LD C,A        ;
 $D153 LD DE,$09BF   ;
 $D156 CALL $A887    ;
 $D159 LD A,($A00A)  ;
 $D15C LD B,A        ;
 $D15D POP AF        ;
 $D15E CALL $D51A    ;
 $D161 JR $D167      ;
*$D163 CALL $A414    ;
 $D166 POP AF        ;
*$D167 POP DE        ;
 $D168 POP BC        ;
 $D169 POP IX        ;
 $D16B LD L,(IX+$07) ;
 $D16E LD H,(IX+$08) ;
 $D171 CALL $D182    ;
 $D174 LD A,B        ;
 $D175 CALL $D60B    ;
; This entry point is used by the routine at #R$D1B2.
*$D178 LD A,B        ;
 $D179 CALL $D68C    ;
 $D17C CALL $D4A7    ;
 $D17F JP $A2A2      ;
*$D182 LD A,H        ;
 $D183 OR L          ;
 $D184 JP NZ,$A59F   ;
; This entry point is used by the routine at #R$D1B2.
*$D187 EX DE,HL      ;
 $D188 LD A,($A036)  ;
 $D18B PUSH AF       ;
 $D18C LD A,($A036)  ;
 $D18F CALL $C863    ;
 $D192 EX AF,AF'     ;
 $D193 INC A         ;
 $D194 JR Z,$D19F    ;
 $D196 DEC A         ;
 $D197 LD ($A036),A  ;
 $D19A LD A,$01      ;
 $D19C LD ($A2AA),A  ;
*$D19F CALL $A59F    ;
 $D1A2 POP AF        ;
 $D1A3 LD ($A036),A  ;
 $D1A6 XOR A         ;
 $D1A7 LD ($A2AA),A  ;
 $D1AA CALL $D1C6    ;
 $D1AD LD A,$2E      ;
 $D1AF JP $A9B7      ;

; Routine at D1B2
;
; Used by the routines at #R$C996 and #R$DC15.
c$D1B2 LD B,A        ;
 $D1B3 CALL $D0DD    ;
 $D1B6 EX DE,HL      ;
 $D1B7 CALL $D187    ;
 $D1BA CALL $D078    ;
 $D1BD JR NC,$D178   ;
 $D1BF LD HL,$68C1   ;
 $D1C2 CALL $A59F    ;
 $D1C5 RET           ;
; This entry point is used by the routine at #R$D102.
*$D1C6 LD DE,$0001   ;
 $D1C9 PUSH IY       ;
 $D1CB PUSH IX       ;
 $D1CD POP IY        ;
 $D1CF ADD IY,DE     ;
 $D1D1 XOR A         ;
 $D1D2 LD ($A028),A  ;
 $D1D5 CALL $D405    ;
 $D1D8 POP IY        ;
 $D1DA RET           ;

; Routine at D1DB
;
; Used by the routines at #R$BA20 and #R$BCC9.
c$D1DB JP (HL)       ;

; Routine at D1DC
;
; Used by the routine at #R$C929.
c$D1DC PUSH DE       ;
 $D1DD LD D,A        ;
 $D1DE LD A,(IX+$00) ;
 $D1E1 ADD A,$0F     ;
 $D1E3 LD E,A        ;
 $D1E4 LD A,D        ;
 $D1E5 LD D,$00      ;
 $D1E7 ADD IX,DE     ;
 $D1E9 POP DE        ;
*$D1EA CP (IX+$00)   ;
 $D1ED JR Z,$D1FF    ;
 $D1EF INC (IX+$00)  ;
 $D1F2 JR Z,$D201    ;
 $D1F4 DEC (IX+$00)  ;
 $D1F7 JR Z,$D204    ;
 $D1F9 INC IX        ;
 $D1FB INC IX        ;
 $D1FD JR $D1EA      ;
*$D1FF SCF           ;
 $D200 RET           ;
*$D201 DEC (IX+$00)  ;
*$D204 XOR A         ;
 $D205 RET           ;

; Fetch Next Object
;
; Used by the routines at #R$D078, #R$D21C, #R$D36A, #R$D405, #R$D471 and
; #R$D4CC.
;
;   IX Pointer to objects table
; O:IX Pointer to object table
; O:IY Pointer to object data
; O:F The zero flag is set if the end of the table is reached
@label=FetchNextObject
c$D206 EXX           ; Switch to the shadow registers.
 $D207 LD DE,$0003   ; {Add #N($0003,$04,$04) to the object table pointer in
 $D20A ADD IX,DE     ; #REGix.}
 $D20C LD D,(IX+$02) ; {Fetch the pointer to the object data and store it in
 $D20F LD E,(IX+$01) ; #REGiy.
 $D212 PUSH DE       ;
 $D213 POP IY        ; }
 $D215 LD A,(IX+$00) ; {Check the object ID at *#REGix+#N$00 to see if the terminator
 $D218 CP $FF        ; character (#N$FF) has been reached.}
 $D21A EXX           ; Switch back to the normal registers.
 $D21B RET           ; Return.

; Routine at D21C
;
; Used by the routines at #R$D249, #R$D2F2 and #R$D526.
c$D21C PUSH BC       ; Stash #REGbc on the stack.
 $D21D LD B,A        ; #REGb=#REGa.
 $D21E CALL $D206    ; Call #R$D206.
 $D221 LD A,B        ; #REGa=#REGb.
 $D222 POP BC        ; Restore #REGbc from the stack.
 $D223 RET           ; Return.

; Fetch Location Data Pointer
;
; Used by the routines at #R$9DFF, #R$A4AB, #R$C4D1, #R$C8EF, #R$D0DD, #R$D102,
; #R$D33C, #R$D36A, #R$D5EF and #R$DC6C.
;
;   A Room ID
; O:IX Pointer to location data
@label=FetchLocationDataPointer
c$D224 PUSH DE       ; Stash #REGde on the stack.
 $D225 LD DE,$840B   ; Load #R$840B into #REGde.
 $D228 PUSH HL       ; Stash #REGhl on the stack.
 $D229 LD L,A        ; {Load the room ID into #REGhl.
 $D22A LD H,$00      ; }
 $D22C ADD HL,HL     ; Double the offset value held in #REGhl.
 $D22D ADD HL,DE     ; Add the base table address to the offset to point to the requested
                     ; room address.
 $D22E LD E,(HL)     ; {Fetch the location data address and store the pointer
 $D22F INC HL        ; in #REGix.
 $D230 LD D,(HL)     ;
 $D231 PUSH DE       ;
 $D232 POP IX        ; }
 $D234 POP HL        ; {Restore #REGhl and #REGde from the stack.
 $D235 POP DE        ; }
 $D236 RET           ; Return.

; Fetch Object Data Pointer
;
; Used by the routines at #R$9CA2, #R$9CCE, #R$9E4A, #R$A4BC, #R$BD7E, #R$BE72,
; #R$C4D1, #R$C821, #R$C863, #R$C86E, #R$C8A7, #R$C8AF, #R$C8BE, #R$C8C6,
; #R$C8EF, #R$C996, #R$CBC2, #R$D102, #R$D275, #R$D495, #R$D590, #R$D60B,
; #R$DC6C and #R$F1C1.
; .
; Looks up an object in the objects table and returns a pointer to it's
; data structure.
;
;   A Object ID
; O:IX Pointer to object data
@label=FetchObjectDataPointer
c$D237 LD IX,$8B6F   ; #REGix=#R$8B6F.
 $D23B CALL $D34E    ; Call #R$D34E.
; This will be restored back into #REGhl by the end of the routine.
 $D23E PUSH HL       ; Stash #REGhl on the stack temporarily.
; Pretty clever way of using the stack here.
 $D23F LD L,(IX+$01) ; {Load the object pointer into #REGhl.
 $D242 LD H,(IX+$02) ; }
 $D245 EX (SP),HL    ; Swap the *#REGsp with the object pointer, restoring #REGhl to the
                     ; original value.
 $D246 POP IX        ; Restore the object pointer into #REGix (from the stack).
 $D248 RET           ; Return.

; Routine at D249
;
; Used by the routine at #R$DC6C.
c$D249 PUSH IY       ; {Stash #REGiy and #REGix on the stack.
 $D24B PUSH IX       ; }
 $D24D CALL $D04F    ; Call #R$D04F.
*$D250 CALL $D21C    ; Call #R$D21C.
 $D253 JR Z,$D267    ; Jump to #R$D267 if ?? is equal to #N$00.
 $D255 CP (IY+$01)   ; {Jump to #R$D250 if #REGa is not equal to *#REGiy+#N$01.
 $D258 JR NZ,$D250   ; }
 $D25A LD (IY+$0F),B ; Write #REGb to *#REGiy+#N$0F.
 $D25D PUSH AF       ; Stash #REGaf on the stack.
 $D25E LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $D261 CALL $D249    ; Call #R$D249.
 $D264 POP AF        ; Restore #REGaf from the stack.
 $D265 JR $D250      ; Jump to #R$D250.
*$D267 POP IX        ; {Restore #REGix and #REGiy from the stack.
 $D269 POP IY        ; }
 $D26B RET           ; Return.

; Routine at D26C
;
; Used by the routine at #R$DC6C.
c$D26C PUSH HL       ; Stash #REGhl on the stack.
 $D26D LD A,($A034)  ; #REGa=*#R$A034.
 $D270 CALL $D275    ; Call #R$D275.
 $D273 POP HL        ; Restore #REGhl from the stack.
 $D274 RET           ; Return.

; Routine at D275
;
; Used by the routines at #R$C4D1 and #R$D26C.
c$D275 LD HL,$A036   ;
; This entry point is used by the routines at #R$D4EF and #R$DC6C.
*$D278 CP $FF        ;
 $D27A SCF           ;
 $D27B RET Z         ;
 $D27C CP $FE        ;
 $D27E SCF           ;
 $D27F RET Z         ;
 $D280 PUSH IX       ;
 $D282 CALL $D288    ;
 $D285 POP IX        ;
 $D287 RET           ;
*$D288 CALL $D237    ;
 $D28B PUSH AF       ;
 $D28C LD A,(IX+$01) ;
 $D28F CP $FF        ;
 $D291 JR Z,$D29A    ;
 $D293 POP IX        ;
 $D295 CP (HL)       ;
 $D296 JR NZ,$D288   ;
 $D298 SCF           ;
 $D299 RET           ;
*$D29A POP AF        ;
 $D29B AND A         ;
 $D29C RET           ;

; Routine at D29D
;
; Used by the routines at #R$BA20, #R$DC6C and #R$E691.
c$D29D LD A,$63      ;
 $D29F CALL $D2A4    ;
 $D2A2 INC A         ;
 $D2A3 RET           ;

; Routine at D2A4
;
; Used by the routines at #R$9CF2, #R$9ED1, #R$A6D3, #R$D29D and #R$DC6C.
c$D2A4 CALL $D2AD     ;
 $D2A7 BIT 7,A        ;
 $D2A9 RET Z          ;
 $D2AA NEG            ;
 $D2AC RET            ;
*$D2AD PUSH IX        ;
 $D2AF PUSH BC        ;
 $D2B0 LD C,A         ;
 $D2B1 SLA A          ;
 $D2B3 JR NC,$D2B7    ;
 $D2B5 LD A,$FF       ;
*$D2B7 LD B,A         ;
*$D2B8 LD IX,$A039    ;
 $D2BC INC (IX+$01)   ;
 $D2BF JR NZ,$D2C4    ;
 $D2C1 INC (IX+$00)   ;
*$D2C4 LD IX,($A039)  ;
 $D2C8 LD A,($A037)   ;
 $D2CB ADC A,(IX+$00) ;
 $D2CE ADD IX,DE      ;
 $D2D0 XOR (IX+$01)   ;
 $D2D3 PUSH HL        ;
 $D2D4 LD HL,$A037    ;
 $D2D7 CP (HL)        ;
 $D2D8 POP HL         ;
 $D2D9 JR Z,$D2B8     ;
 $D2DB LD ($A037),A   ;
*$D2DE CP B           ;
 $D2DF JR C,$D2E8     ;
 $D2E1 JR Z,$D2E8     ;
 $D2E3 SRL A          ;
 $D2E5 JP $D2DE       ;
*$D2E8 SUB C          ;
 $D2E9 POP BC         ;
 $D2EA POP IX         ;
 $D2EC RET            ;
; This entry point is used by the routine at #R$DC6C.
*$D2ED PUSH BC        ;
 $D2EE LD B,$01       ;
 $D2F0 JR $D2F5       ;

; Routine at D2F2
;
; Used by the routine at #R$C8C6.
c$D2F2 PUSH BC        ;
 $D2F3 LD B,$00       ;
; This entry point is used by the routine at #R$D2A4.
*$D2F5 PUSH IX        ;
 $D2F7 PUSH IY        ;
 $D2F9 LD C,$00       ;
 $D2FB CALL $D305     ;
 $D2FE LD A,C         ;
 $D2FF POP IY         ;
 $D301 POP IX         ;
 $D303 POP BC         ;
 $D304 RET            ;
*$D305 PUSH IX        ;
 $D307 LD IX,$8B6F    ;
*$D30B CALL $D21C     ;
 $D30E JR Z,$D334     ;
 $D310 CP (IY+$01)    ;
 $D313 JR NZ,$D30B    ;
 $D315 PUSH AF        ;
 $D316 SUB A          ;
 $D317 CP B           ;
 $D318 LD A,C         ;
 $D319 JR Z,$D324     ;
 $D31B ADD A,(IY+$02) ;
 $D31E JP PE,$D337    ;
 $D321 LD C,A         ;
 $D322 JR $D331       ;
*$D324 ADD A,(IY+$03) ;
 $D327 JP PE,$D337    ;
 $D32A LD C,A         ;
 $D32B LD A,(IX+$00)  ;
 $D32E CALL $D305     ;
*$D331 POP AF         ;
 $D332 JR $D30B       ;
*$D334 POP IX         ;
 $D336 RET            ;
*$D337 POP AF         ;
 $D338 LD C,$FF       ;
 $D33A JR $D334       ;

; Routine at D33C
;
; Used by the routines at #R$B6FD, #R$D078, #R$D405 and #R$D471.
c$D33C PUSH AF       ; Stash #REGaf on the stack.
 $D33D LD IX,($A017) ; #REGix=*#R$A017.
 $D341 LD A,(IX+$0F) ; #REGa=*#REGix+#N$0F.
 $D344 CALL $D224    ; Call #R$D224.
 $D347 POP AF        ; Restore #REGaf from the stack.
 $D348 RET           ; Return.

; Search Two-Byte Length Table
;
; Used by the routine at #R$C929.
;
; A Table ID to match
; IX Table to search
@label=SearchTwoByteTable
c$D349 EXX           ; Switch to the shadow registers.
 $D34A LD E,$02      ; Set the length of the data in #REGe (#N$02 bytes).
 $D34C JR $D351      ; Jump to #R$D351.

; Search Three-Byte Length Table
;
; Used by the routines at #R$9C6A, #R$A25D, #R$C929, #R$D237 and #R$DC6C.
;
;   A Table ID to match
;   IX Table to search
; O:A Entry ID or #N$FF for no entry found
; O:IX Pointer to found entry
; O:F The zero flag is set when no entry was found
@label=SearchThreeByteTable
c$D34E EXX           ; Switch to the shadow registers.
 $D34F LD E,$03      ; Set the length of the data in #REGe (#N$03 bytes).
; This entry point is used by the routine at #R$D349.
@label=SearchTable_Start
*$D351 PUSH IX       ; {Copy the table for searching into #REGhl (using the
 $D353 POP HL        ; stack).}
 $D354 LD B,A        ; Copy the table ID into #REGb.
 $D355 LD D,$00      ; Reset #REGd to #N$00 for the length offset calculation.
@label=SearchTable_Loop
*$D357 LD A,(HL)     ; Fetch a byte from the table.
 $D358 CP B          ; {Jump to #R$D363 if the byte is the table ID we're searching
 $D359 JR Z,$D363    ; for or if the termination character has been reached (#N$FF).
 $D35B CP $FF        ;
 $D35D JR Z,$D363    ; }
 $D35F ADD HL,DE     ; Move to the next table entry.
 $D360 JP $D357      ; Jump back to #R$D357.
; Either the table ID was matched, or the terminator was reached.
@label=SearchTable_Return
*$D363 PUSH HL       ; {Copy the table pointer into #REGix (using the stack).
 $D364 POP IX        ; }
 $D366 CP $FF        ; Set the zero flag if the termination character was
                     ; reached (#N$FF).
 $D368 EXX           ; Switch back to the normal registers.
 $D369 RET           ; Return.

; Routine at D36A
;
; Used by the routines at #R$B4A3 and #R$BD7E.
c$D36A PUSH BC       ;
 $D36B PUSH DE       ;
 $D36C PUSH IY       ;
*$D36E CALL $D206    ;
 $D371 JR Z,$D393    ;
 $D373 LD BC,$0007   ;
 $D376 PUSH IY       ;
 $D378 ADD IY,BC     ;
 $D37A CALL $A4E0    ;
 $D37D POP IY        ;
 $D37F JR NZ,$D36E   ;
 $D381 LD A,($A038)  ;
 $D384 AND A         ;
 $D385 JR NZ,$D393   ;
 $D387 LD A,(IX+$00) ;
 $D38A PUSH IX       ;
 $D38C CALL $C821    ;
 $D38F POP IX        ;
 $D391 JR Z,$D36E    ;
*$D393 LD A,(IX+$00) ;
 $D396 POP IY        ;
 $D398 POP DE        ;
 $D399 POP BC        ;
 $D39A RET           ;
 $D39B PUSH IY       ;
 $D39D PUSH DE       ;
 $D39E PUSH BC       ;
 $D39F PUSH IX       ;
 $D3A1 POP BC        ;
 $D3A2 LD DE,$0001   ;
*$D3A5 INC B         ;
 $D3A6 LD A,B        ;
 $D3A7 CP $6A        ;
 $D3A9 LD A,$FF      ;
 $D3AB JR Z,$D3CD    ;
 $D3AD LD A,B        ;
 $D3AE CALL $D224    ;
 $D3B1 PUSH IX       ;
 $D3B3 POP IY        ;
 $D3B5 ADD IY,DE     ;
 $D3B7 CALL $A4E0    ;
 $D3BA JR NZ,$D3A5   ;
 $D3BC LD A,($A038)  ;
 $D3BF AND A         ;
 $D3C0 JR NZ,$D3CC   ;
 $D3C2 PUSH BC       ;
 $D3C3 LD A,B        ;
 $D3C4 CALL $D471    ;
 $D3C7 POP BC        ;
 $D3C8 CP $FF        ;
 $D3CA JR Z,$D3A5    ;
*$D3CC LD A,B        ;
*$D3CD PUSH BC       ;
 $D3CE POP IX        ;
 $D3D0 POP BC        ;
 $D3D1 POP DE        ;
 $D3D2 POP IY        ;
 $D3D4 RET           ;
; This entry point is used by the routines at #R$D102, #R$D590, #R$D60B and
; #R$DC6C.
*$D3D5 PUSH IX       ;
 $D3D7 POP IY        ;
; This entry point is used by the routine at #R$D526.
*$D3D9 PUSH IY       ;
 $D3DB PUSH DE       ;
 $D3DC LD DE,$0007   ;
 $D3DF ADD IY,DE     ;
 $D3E1 CALL $D3E8    ;
 $D3E4 POP DE        ;
 $D3E5 POP IY        ;
 $D3E7 RET           ;

; Routine at D3E8
;
; Used by the routines at #R$A7B4, #R$BF1C and #R$D36A.
c$D3E8 PUSH AF        ;
 $D3E9 PUSH DE        ;
 $D3EA LD D,(IY+$01)  ;
 $D3ED LD E,(IY+$00)  ;
 $D3F0 CALL $A7D0     ;
 $D3F3 BIT 6,(IY-$02) ;
 $D3F7 JR NZ,$D3FD    ;
 $D3F9 XOR A          ;
 $D3FA LD ($A7EA),A   ;
*$D3FD BIT 5,(IY-$01) ;
 $D401 JR NZ,$D427    ;
 $D403 JR $D416       ;

; Routine at D405
;
; Used by the routines at #R$A7B4 and #R$D1B2.
c$D405 PUSH AF        ;
 $D406 PUSH DE        ;
 $D407 LD D,(IY+$01)  ;
 $D40A LD E,(IY+$00)  ;
 $D40D CALL $A7D0     ;
 $D410 LD A,($A028)   ;
 $D413 AND A          ;
 $D414 JR NZ,$D438    ;
; This entry point is used by the routine at #R$D3E8.
*$D416 LD E,(IY+$02)  ;
 $D419 LD D,(IY+$03)  ;
 $D41C RES 7,D        ;
 $D41E BIT 7,(IY+$03) ;
 $D422 LD A,$40       ;
 $D424 CALL Z,$A815   ;
; This entry point is used by the routine at #R$D3E8.
*$D427 LD E,(IY+$04)  ;
 $D42A LD D,(IY+$05)  ;
 $D42D RES 7,D        ;
 $D42F BIT 7,(IY+$05) ;
 $D433 LD A,$40       ;
 $D435 CALL Z,$A815   ;
*$D438 LD E,(IY+$00)  ;
 $D43B LD D,(IY+$01)  ;
 $D43E LD A,D         ;
 $D43F OR E           ;
 $D440 LD A,$50       ;
 $D442 CALL NZ,$A815  ;
 $D445 POP DE         ;
 $D446 POP AF         ;
 $D447 RET            ;
; This entry point is used by the routine at #R$DC6C.
*$D448 PUSH DE        ;
 $D449 PUSH BC        ;
 $D44A PUSH IY        ;
 $D44C LD B,A         ;
 $D44D CALL $D33C     ;
 $D450 LD DE,$0006    ;
 $D453 ADD IX,DE      ;
*$D455 CALL $D206     ;
 $D458 JR Z,$D467     ;
 $D45A LD A,(IX+$02)  ;
 $D45D AND A          ;
 $D45E JR Z,$D455     ;
 $D460 LD A,(IX+$00)  ;
 $D463 CP B           ;
 $D464 JP NZ,$D455    ;
*$D467 POP IY         ;
 $D469 POP BC         ;
 $D46A POP DE         ;
 $D46B RET            ;
; This entry point is used by the routine at #R$DC15.
*$D46C PUSH AF        ;
 $D46D LD A,$01       ;
 $D46F JR $D474       ;

; Routine at D471
;
; Used by the routines at #R$C4D1, #R$C996, #R$D36A and #R$DC6C.
c$D471 PUSH AF       ;
 $D472 LD A,$02      ;
; This entry point is used by the routine at #R$D405.
*$D474 LD ($D48D),A  ;
 $D477 POP AF        ;
 $D478 PUSH BC       ;
 $D479 PUSH IY       ;
 $D47B LD B,A        ;
 $D47C PUSH DE       ;
 $D47D CALL $D33C    ;
 $D480 LD DE,$0006   ;
 $D483 ADD IX,DE     ;
 $D485 POP DE        ;
*$D486 CALL $D206    ;
 $D489 JR Z,$D491    ;
 $D48B LD A,(IX+$02) ;
 $D48E CP B          ;
 $D48F JR NZ,$D486   ;
*$D491 POP IY        ;
 $D493 POP BC        ;
 $D494 RET           ;

; Routine at D495
;
; Used by the routines at #R$C996, #R$CBC2, #R$CC29 and #R$D045.
;
; A Character ID
c$D495 CP $FF        ; {Return if the character is inactive (#N$FF).
 $D497 RET Z         ; }
 $D498 CALL $D237    ; Call #R$D237.
 $D49B LD A,$01      ; {Is the character the "#OBJECT$01"?
 $D49D CP (IX+$00)   ; }
 $D4A0 LD A,$FF      ; #REGa=#N$FF.
 $D4A2 RET NZ        ; Return if the character isn't the "#OBJECT$01".
 $D4A3 LD A,(IX+$0F) ; #REGa=*#REGix+#N$0F.
 $D4A6 RET           ; Return.

; Routine at D4A7
;
; Used by the routine at #R$D102.
c$D4A7 PUSH IY       ; {Stash #REGiy, #REGaf and #REGbc on the stack.
 $D4A9 PUSH AF       ;
 $D4AA PUSH BC       ; }
 $D4AB LD A,$FF      ; #REGa=#N$FF.
 $D4AD CALL $D4CC    ; Call #R$D4CC.
 $D4B0 JR Z,$D4C7    ; Jump to #R$D4C7 if #REGa is equal to #N$FF.
 $D4B2 PUSH AF       ; Stash #REGaf on the stack.
; Print "#TEXTTOKEN($68E4)".
 $D4B3 LD HL,$68E4   ; #REGhl=#R$68E4.
 $D4B6 CALL $A59F    ; Call #R$A59F.
 $D4B9 POP BC        ; Restore #REGbc from the stack.
 $D4BA LD C,B        ; #REGc=#REGb.
 $D4BB LD A,$FF      ; #REGa=#N$FF.
 $D4BD LD IY,($A017) ; #REGiy=*#R$A017.
 $D4C1 LD B,(IY+$0F) ; #REGb=*#REGiy+#N$0F.
 $D4C4 CALL $D51A    ; Call #R$D51A.
*$D4C7 POP BC        ; {Restore #REGbc, #REGaf and #REGiy from the stack.
 $D4C8 POP AF        ;
 $D4C9 POP IY        ; }
 $D4CB RET           ; Return.

; Routine at D4CC
;
; Used by the routines at #R$D102, #R$D4A7, #R$D526 and #R$DC6C.
c$D4CC PUSH IX       ; {Stash #REGix, #REGiy, #REGhl and #REGbc on the stack.
 $D4CE PUSH IY       ;
 $D4D0 PUSH HL       ;
 $D4D1 PUSH BC       ; }
 $D4D2 CALL $D04F    ; Call #R$D04F.
 $D4D5 LD B,$00      ; #REGb=#N$00.
 $D4D7 LD C,A        ; #REGc=#REGa.
*$D4D8 CALL $D206    ; Call #R$D206.
 $D4DB JR Z,$D4E6    ; Jump to #R$D4E6 if the terminator character was reached
                     ; (#N$FF).
 $D4DD LD A,C        ; #REGa=#REGc.
 $D4DE CALL $D4EF    ; Call #R$D4EF.
 $D4E1 JR NC,$D4D8   ; Jump to #R$D4D8 if #REGa is greater than or equal to
                     ; #N$00.
 $D4E3 INC B         ; Increment #REGb by one.
 $D4E4 JR $D4D8      ; Jump to #R$D4D8.
*$D4E6 LD A,B        ; #REGa=#REGb.
 $D4E7 AND A         ; Set flags.
 $D4E8 POP BC        ; {Restore #REGbc, #REGhl, #REGiy and #REGix from the
 $D4E9 POP HL        ; stack.
 $D4EA POP IY        ;
 $D4EC POP IX        ; }
 $D4EE RET           ; Return.

; Routine at D4EF
;
; Used by the routines at #R$D4CC and #R$D526.
c$D4EF CP (IY+$01)   ; Compare #REGa with *#REGiy+#N$01.
 $D4F2 JR NZ,$D518   ; Jump to #R$D518 if #REGb is not equal to #REGa.
 $D4F4 LD A,($A036)  ; #REGa=*#R$A036.
 $D4F7 CP (IX+$00)   ; Compare #REGa with *#REGix+#N$00.
 $D4FA JR Z,$D518    ; Jump to #R$D518 if #REGb is equal to #REGa.
 $D4FC LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $D4FF CALL $C821    ; Call #R$C821.
 $D502 JR Z,$D518    ; Jump to #R$D518 if #REGb is equal to #REGa.
 $D504 LD A,(IY+$00) ; #REGa=*#REGiy+#N$00.
 $D507 CP $02        ; Compare #REGa with #N$02.
 $D509 JR NC,$D518   ; Jump to #R$D518 if #REGa is greater than or equal to
                     ; #N$02.
 $D50B LD A,($A036)  ; #REGa=*#R$A036.
 $D50E PUSH IX       ; Stash #REGix on the stack.
 $D510 POP HL        ; Restore #REGhl from the stack.
 $D511 CALL $D278    ; Call #R$D278.
 $D514 JR C,$D518    ; Jump to #R$D518 if #REGa is less than #N$02.
 $D516 SCF           ; Set the carry flag.
 $D517 RET           ; Return.
*$D518 AND A         ; Set flags.
 $D519 RET           ; Return.

; Routine at D51A
;
; Used by the routines at #R$D102, #R$D4A7 and #R$DC6C.
c$D51A PUSH IY       ; {Stash #REGiy, #REGde and #REGbc on the stack.
 $D51C PUSH DE       ;
 $D51D PUSH BC       ; }
 $D51E CALL $D526    ; Call #R$D526.
 $D521 POP BC        ; {Restore #REGbc, #REGde and #REGiy from the stack.
 $D522 POP DE        ;
 $D523 POP IY        ; }
 $D525 RET           ; Return.

; Routine at D526
;
; Used by the routine at #R$D51A.
c$D526 PUSH IX        ; Stash #REGix on the stack.
 $D528 CALL $D04F     ; Call #R$D04F.
*$D52B PUSH AF        ; Stash #REGaf on the stack.
 $D52C CALL $D57D     ; Call #R$D57D.
 $D52F JR C,$D55A     ; Jump to #R$D55A if #REGa is less than #REGa.
 $D531 SET 7,(IY+$06) ; Set bit 7 of *#REGiy+#N$06.
 $D535 SUB A          ; #REGa-=#REGa.
 $D536 LD ($A028),A   ; Write #REGa to *#R$A028.
 $D539 CALL $D3D9     ; Call #R$D3D9.
 $D53C DEC C          ; Decrease #REGc by one.
 $D53D LD A,C         ; #REGa=#REGc.
 $D53E AND A          ; Set flags.
 $D53F JR NZ,$D546    ; Jump to #R$D546 if #REGc is not equal to #REGa.
 $D541 CALL $A414     ; Call #R$A414.
 $D544 JR $D557       ; Jump to #R$D557.
*$D546 CP $01         ; Compare #REGa with #N$01.
 $D548 JR Z,$D551     ; Jump to #R$D551 if #REGa is equal to #N$01.
 $D54A LD A,$2C       ; #REGa=#N$2C.
 $D54C CALL $A9B7     ; Call #R$A9B7.
 $D54F JR $D557       ; Jump to #R$D557.
*$D551 LD DE,$005D    ; #REGde=#N($005D,$04,$04).
 $D554 CALL $A887     ; Call #R$A887.
*$D557 POP AF         ; Restore #REGaf from the stack.
 $D558 JR $D52B       ; Jump to #R$D52B.
*$D55A POP AF         ; Restore #REGaf from the stack.
 $D55B CALL $D04F     ; Call #R$D04F.
*$D55E PUSH AF        ; Stash #REGaf on the stack.
 $D55F CALL $D57D     ; Call #R$D57D.
 $D562 JR C,$D578     ; Jump to #R$D578 if #REGa is less than #N$2C.
 $D564 PUSH AF        ; Stash #REGaf on the stack.
 $D565 CALL $D4CC     ; Call #R$D4CC.
 $D568 JR Z,$D574     ; Jump to #R$D574 if #REGa is equal to #N$2C.
 $D56A LD C,A         ; #REGc=#REGa.
 $D56B POP AF         ; Restore #REGaf from the stack.
 $D56C CALL $D590     ; Call #R$D590.
 $D56F CALL $D526     ; Call #R$D526.
 $D572 JR $D575       ; Jump to #R$D575.
*$D574 POP AF         ; {Restore #REGaf and #REGaf from the stack.
*$D575 POP AF         ; }
 $D576 JR $D55E       ; Jump to #R$D55E.
*$D578 POP AF         ; Restore #REGaf from the stack.
 $D579 POP IX         ; Restore #REGix from the stack.
 $D57B RET            ; Return.
*$D57C POP AF         ; Restore #REGaf from the stack.
*$D57D CALL $D21C     ; Call #R$D21C.
 $D580 JR NZ,$D584    ; Jump to #R$D584 if #REGa is not equal to #N$2C.
 $D582 SCF            ; Set the carry flag.
 $D583 RET            ; Return.
*$D584 PUSH AF        ; Stash #REGaf on the stack.
 $D585 CALL $D4EF     ; Call #R$D4EF.
 $D588 JR NC,$D57C    ; Jump to #R$D57C if #REGa is greater than or equal to
                      ; #N$2C.
 $D58A POP AF         ; Restore #REGaf from the stack.
 $D58B LD A,(IX+$00)  ; #REGa=*#REGix+#N$00.
 $D58E AND A          ; Set flags.
 $D58F RET            ; Return.

; Routine at D590
;
; Used by the routine at #R$D526.
c$D590 PUSH IX        ; {Stash #REGix, #REGbc and #REGaf on the stack.
 $D592 PUSH BC        ;
 $D593 PUSH AF        ; }
 $D594 CALL $D237     ; Call #R$D237.
 $D597 BIT 6,(IX+$05) ; {Jump to #R$D5A5 if bit 6 of *#REGix+#N$05 is not set.
 $D59B JR Z,$D5A5     ; }
 $D59D POP AF         ; Restore #REGaf from the stack.
 $D59E PUSH AF        ; {Stash #REGaf and #REGaf on the stack.
 $D59F PUSH AF        ; }
 $D5A0 LD HL,$68B1    ; #REGhl=#R$68B1.
 $D5A3 JR $D5C1       ; Jump to #R$D5C1.
*$D5A5 LD HL,$0485    ; #REGhl=#N$0485.
 $D5A8 DEC C          ; Decrease #REGc by one.
 $D5A9 JR Z,$D5AE     ; Jump to #R$D5AE if #REGc is equal to #REGa.
 $D5AB LD HL,$007A    ; #REGhl=#N($007A,$04,$04).
*$D5AE PUSH HL        ; Stash #REGhl on the stack.
 $D5AF CALL $D5D3     ; Call #R$D5D3.
 $D5B2 LD A,$01       ; {Write #N$01 to *#R$A2AA.
 $D5B4 LD ($A2AA),A   ; }
 $D5B7 CALL $D3D5     ; Call #R$D3D5.
 $D5BA XOR A          ; {Write #N$00 to *#R$A2AA.
 $D5BB LD ($A2AA),A   ; }
 $D5BE LD HL,$68D9    ; #REGhl=#R$68D9.
*$D5C1 CALL $A59F     ; Call #R$A59F.
 $D5C4 POP AF         ; {Restore #REGaf, #REGbc and #REGix from the stack.
 $D5C5 POP BC         ;
 $D5C6 POP IX         ; }
 $D5C8 RET            ; Return.

; Data block at D5C9
b$D5C9 DEFB $50,$04,$FF,$05,$DC,$00,$19,$09
 $D5D1 DEFB $D3,$08

; Routine at D5D3
;
; Used by the routines at #R$D102 and #R$D590.
c$D5D3 LD HL,$D5C9   ; #REGhl=#R$D5C9.
 $D5D6 LD A,(IX+$04) ; #REGa=*#REGix+#N$04.
 $D5D9 AND %00000111 ; Keep only bits 0-2.
 $D5DB CP $05        ; Compare #REGa with #N$05.
 $D5DD PUSH AF       ; Stash #REGaf on the stack.
 $D5DE DEC A         ; Decrease #REGa by one.
 $D5DF LD E,A        ; #REGe=#REGa.
 $D5E0 LD D,$00      ; #REGd=#N$00.
 $D5E2 ADD HL,DE     ; #REGhl+=#REGde.
 $D5E3 ADD HL,DE     ; #REGhl+=#REGde.
 $D5E4 CALL $A880    ; Call #R$A880.
 $D5E7 POP AF        ; Restore #REGaf from the stack.
 $D5E8 RET NZ        ; Return if #REGa is not equal to #N$00.
 $D5E9 LD DE,$08DB   ; #REGde=#N$08DB.
 $D5EC JP $A887      ; Jump to #R$A887.

; Routine at D5EF
;
; Used by the routines at #R$D60B and #R$D68C.
c$D5EF CALL $D224    ; Call #R$D224.
 $D5F2 LD BC,$0006   ; {#REGix+=#N$0006.
 $D5F5 ADD IX,BC     ; }
 $D5F7 LD BC,$0003   ; #REGbc=#N$0003.
 $D5FA RET           ; Return.

; Get Direction Token
;
; Used by the routines at #R$D60B and #R$D68C.
; .
; This routine converts a direction value into the address of its
; corresponding token string.
;
;   A Direction value
; O:DE Address of token string
@label=GetDirectionToken
c$D5FB LD HL,$D064   ; Load #R$D064 into #REGhl.
 $D5FE DEC HL        ; {Adjust #REGhl for sum.
 $D5FF DEC HL        ; }
 $D600 LD E,A        ; Copy directional value into #REGe.
 $D601 RES 7,E       ; Reset bit 7 of #REGe.
 $D603 LD D,$00      ; Clear the high byte in #REGd.
 $D605 ADD HL,DE     ; {Add #N$02 times the offset to the base table address.
 $D606 ADD HL,DE     ; }
; This entry point is used by the routine at #R$DC6C.
*$D607 LD E,(HL)     ; {Fetch the token address from the table and load it into
 $D608 INC HL        ; #REGde.
 $D609 LD D,(HL)     ; }
 $D60A RET           ; Return.

; Routine at D60B
;
; Used by the routine at #R$D102.
c$D60B PUSH BC        ; {Stash #REGbc, #REGde, #REGiy and #REGix on the stack.
 $D60C PUSH DE        ;
 $D60D PUSH IY        ;
 $D60F PUSH IX        ; }
 $D611 CALL $D5EF     ; Call #R$D5EF.
 $D614 PUSH IX        ; {#REGiy=#REGix (using the stack).
 $D616 POP IY         ; }
 $D618 JR $D660       ; Jump to #R$D660.
*$D61A LD A,(IY+$01)  ; {Jump to #R$D660 if *#REGiy+#N$01 is zero.
 $D61D AND A          ;
 $D61E JR Z,$D660     ; }
 $D620 LD A,(IY+$00)  ; {Jump to #R$D660 if *#REGiy+#N$00 is greater than or
 $D623 CP $0B         ; equal to #N$0B.
 $D625 JR NC,$D660    ; }
 $D627 LD A,(IY+$01)  ; #REGa=*#REGiy+#N$01.
 $D62A CALL $D237     ; Call #R$D237.
 $D62D BIT 7,(IX+$05) ; {Jump to #R$D660 if bit 7 of *#REGix+#N$05 is not set.
 $D631 JR Z,$D660     ; }
 $D633 LD A,(IY+$00)  ; #REGa=*#REGiy+#N$00.
 $D636 CALL $D5FB     ; Call #R$D5FB.
 $D639 CP $09         ; {Jump to #R$D647 if #REGa is less than #N$09.
 $D63B JR C,$D647     ; }
 $D63D LD DE,$000A    ; #REGde=#N($000A,$04,$04).
 $D640 JR Z,$D64D     ; Jump to #R$D64D if #REGa is equal to #N$09.
 $D642 LD DE,$00E7    ; #REGde=#N($00E7,$04,$04).
 $D645 JR $D64D       ; Jump to #R$D64D.
*$D647 LD HL,$68BC    ; #REGhl=#R$68BC.
 $D64A CALL $A59F     ; Call #R$A59F.
*$D64D CALL $A887     ; Call #R$A887.
 $D650 LD HL,$68E9    ; #REGhl=#R$68E9.
 $D653 CALL $A59F     ; Call #R$A59F.
 $D656 PUSH IY        ; Stash #REGiy on the stack.
 $D658 CALL $D3D5     ; Call #R$D3D5.
 $D65B CALL $A414     ; Call #R$A414.
 $D65E POP IY         ; Restore #REGiy from the stack.
*$D660 ADD IY,BC      ; #REGiy+=#REGbc.
 $D662 LD A,$FF       ; {Jump to #R$D61A if *#REGiy+#N$00 is not equal to
 $D664 CP (IY+$00)    ; #N$FF.
 $D667 JP NZ,$D61A    ; }
 $D66A POP IX         ; {Restore #REGix, #REGiy, #REGde and #REGbc from the
 $D66C POP IY         ; stack.
 $D66E POP DE         ;
 $D66F POP BC         ; }
 $D670 RET            ; Return.

; Routine at D671
;
; Used by the routine at #R$D68C.
c$D671 ADD IX,BC     ; #REGix+=#REGbc.
 $D673 LD A,$FF      ; #REGa=#N$FF.
 $D675 CP (IX+$00)   ; Compare #REGa with *#REGix+#N$00.
 $D678 RET Z         ; Return if #REGa is equal to #N$FF.
 $D679 XOR A         ; #REGa=#N$00.
 $D67A CP (IX+$01)   ; Compare #REGa with *#REGix+#N$01.
 $D67D JR NZ,$D671   ; Jump to #R$D671 if #REGa is not equal to #N$FF.
 $D67F LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $D682 AND A         ; Set flags.
 $D683 JR Z,$D671    ; Jump to #R$D671 if #REGa is equal to #REGa.
 $D685 CP $0B        ; Compare #REGa with #N$0B.
 $D687 JR NC,$D671   ; Jump to #R$D671 if #REGa is greater than or equal to
                     ; #N$0B.
 $D689 OR %00000001  ; Set bit 0.
 $D68B RET           ; Return.

; Routine at D68C
;
; Used by the routine at #R$D102.
c$D68C PUSH IX       ; {Stash #REGix, #REGiy, #REGde and #REGbc on the stack.
 $D68E PUSH IY       ;
 $D690 PUSH DE       ;
 $D691 PUSH BC       ; }
 $D692 CALL $D5EF    ; Call #R$D5EF.
 $D695 CALL $D671    ; Call #R$D671.
 $D698 JR Z,$D6B1    ; Jump to #R$D6B1 if the zero flag is not set.
 $D69A LD HL,$68F1   ; #REGhl=#R$68F1.
 $D69D CALL $A59F    ; Call #R$A59F.
*$D6A0 LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $D6A3 CALL $D5FB    ; Call #R$D5FB.
 $D6A6 CALL $A887    ; Call #R$A887.
 $D6A9 CALL $D671    ; Call #R$D671.
 $D6AC JR NZ,$D6A0   ; Jump to #R$D6A0 if the zero flag is not set.
 $D6AE CALL $A414    ; Call #R$A414.
*$D6B1 POP BC        ; {Restore #REGbc, #REGde, #REGiy and #REGix from the
 $D6B2 POP DE        ; stack.
 $D6B3 POP IY        ;
 $D6B5 POP IX        ; }
 $D6B7 RET           ; Return.

; Game status buffer entry at D6B8
g$D6B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D6C0 DEFB $00,$CD,$98,$D8,$CA,$15,$DC,$AF
 $D6C8 DEFB $32,$14,$D7,$F6,$01,$C9,$21,$00
 $D6D0 DEFB $5B,$CD,$C5,$D9,$FE,$D0,$CA,$E0
 $D6D8 DEFB $D6,$FE,$C0,$20,$F4,$F6,$01,$C9
 $D6E0 DEFB $21,$E5,$D6,$AF,$C9,$3E,$01,$32
 $D6E8 DEFB $27,$A0,$21,$59,$68,$CD,$9F,$A5
 $D6F0 DEFB $2A,$BD,$D6,$36,$C0,$2A,$29,$A0
 $D6F8 DEFB $7E,$FE,$2E,$20,$02,$3E,$20,$CD
 $D700 DEFB $B7,$A9,$23,$FE,$20,$20,$F1,$3E
 $D708 DEFB $22,$CD,$B7,$A9,$CD,$A2,$A2,$AF
 $D710 DEFB $32,$27,$A0,$C9,$00,$40,$00,$CE
 $D718 DEFB $D6,$AF,$32,$19,$A0,$CD,$42,$C1
 $D720 DEFB $3A,$14,$D7,$A7,$20,$3A,$21,$81
 $D728 DEFB $5B,$06,$60,$CD,$AB,$A2,$21,$00
 $D730 DEFB $5B,$FD,$21,$81,$5B,$FD,$36,$00
 $D738 DEFB $C0,$CD,$C5,$D9,$FD,$72,$00,$FD
 $D740 DEFB $23,$FE,$E0,$28,$0C,$FE,$F0,$28
 $D748 DEFB $08,$FE,$90,$28,$04,$FE,$80,$30
 $D750 DEFB $0A,$FD,$70,$00,$FD,$71,$01,$FD
 $D758 DEFB $23,$FD,$23,$7A,$FE,$C0,$20,$D5
 $D760 DEFB $21,$81,$5B,$22,$BD,$D6,$F6,$01
 $D768 DEFB $C9,$40,$00,$70,$D7,$F6,$01,$C9
 $D770 DEFB $2A,$BD,$D6,$7E,$E6,$F0,$FE,$C0
 $D778 DEFB $CA,$15,$DC,$F6,$01,$C9,$00,$00
 $D780 DEFB $AF,$32,$EB,$9F,$3C,$32,$24,$A0
 $D788 DEFB $2A,$BD,$D6,$22,$2B,$A0,$CD,$B2
 $D790 DEFB $AA,$F5,$AF,$32,$1B,$A0,$F1,$2A
 $D798 DEFB $2B,$A0,$22,$BD,$D6,$20,$13,$2A
 $D7A0 DEFB $F0,$9F,$22,$F2,$9F,$21,$00,$00
 $D7A8 DEFB $22,$F0,$9F,$AF,$32,$B8,$D6,$F6
 $D7B0 DEFB $01,$C9,$F5,$CD,$7D,$D8,$CD,$8A
 $D7B8 DEFB $D8,$F1,$FE,$02,$28,$12,$3E,$01
 $D7C0 DEFB $32,$27,$A0,$21,$66,$68,$CD,$9F
 $D7C8 DEFB $A5,$AF,$32,$27,$A0,$C3,$15,$DC
 $D7D0 DEFB $2A,$1F,$A0,$7C,$B5,$C0,$C3,$15
 $D7D8 DEFB $DC,$40,$00,$E1,$D7,$F6,$01,$C9
 $D7E0 DEFB $00,$3A,$E0,$D7,$A7,$28,$0A,$AF
 $D7E8 DEFB $32,$E0,$D7,$CD,$8A,$D8,$C3,$15
 $D7F0 DEFB $DC,$2A,$F2,$9F,$7D,$B4,$C0,$C3
 $D7F8 DEFB $15,$DC,$00,$00,$AF,$3A,$B8,$D6
 $D800 DEFB $32,$1C,$A0,$FD,$2A,$F2,$9F,$2A
 $D808 DEFB $BB,$D6,$22,$7E,$B1,$CD,$91,$B1
 $D810 DEFB $3E,$01,$32,$0B,$A0,$CA,$5B,$D8
 $D818 DEFB $3A,$1C,$A0,$32,$B8,$D6,$3E,$01
 $D820 DEFB $32,$26,$A0,$3A,$33,$A0,$32,$D6
 $D828 DEFB $9F,$2A,$34,$A0,$22,$D7,$9F,$2A
 $D830 DEFB $7E,$B1,$22,$BB,$D6,$3A,$B8,$D6
 $D838 DEFB $A7,$20,$1D,$DD,$2A,$F2,$9F,$DD
 $D840 DEFB $6E,$FE,$DD,$66,$FF,$22,$F2,$9F
 $D848 DEFB $CD,$C7,$A1,$7D,$B4,$28,$09,$E5
 $D850 DEFB $DD,$E1,$DD,$CB,$01,$76,$20,$E7
 $D858 DEFB $F6,$01,$C9,$AF,$32,$B8,$D6,$3A
 $D860 DEFB $1C,$A0,$A7,$28,$0B,$3E,$FF,$32
 $D868 DEFB $33,$A0,$CD,$35,$D8,$C3,$15,$DC
 $D870 DEFB $3E,$01,$32,$E0,$D7,$E5,$2A,$BD
 $D878 DEFB $D6,$36,$C0,$E1,$C9,$DD,$2A,$F0
 $D880 DEFB $9F,$21,$00,$00,$22,$F0,$9F,$C3
 $D888 DEFB $AF,$A1,$DD,$2A,$F2,$9F,$21,$00
 $D890 DEFB $00,$22,$F2,$9F,$C3,$AF,$A1,$00
 $D898 DEFB $21,$B8,$0B,$22,$3B,$A0,$3E,$01
 $D8A0 DEFB $32,$27,$A0,$CD,$AD,$D8,$F5,$AF
 $D8A8 DEFB $32,$27,$A0,$F1,$C9,$3E,$3E,$CD
 $D8B0 DEFB $B7,$A9,$3E,$20,$CD,$B7,$A9,$21
 $D8B8 DEFB $00,$5B,$06,$80,$3E,$01,$32,$97
 $D8C0 DEFB $D8,$0E,$00,$CD,$36,$A5,$CA,$AC
 $D8C8 DEFB $D9,$CB,$78,$28,$05,$FE,$40,$CA
 $D8D0 DEFB $9E,$D9,$CB,$41,$CC,$78,$D9,$0E
 $D8D8 DEFB $01,$FE,$18,$20,$05,$CD,$B7,$D9
 $D8E0 DEFB $18,$DA,$FE,$08,$20,$1A,$CB,$78
 $D8E8 DEFB $20,$D9,$3E,$08,$CD,$B7,$A9,$04
 $D8F0 DEFB $2B,$7E,$FE,$22,$20,$CD,$3A,$97
 $D8F8 DEFB $D8,$EE,$01,$32,$97,$D8,$18,$C3
 $D900 DEFB $FE,$40,$30,$38,$FE,$22,$20,$0F
 $D908 DEFB $3A,$97,$D8,$EE,$01,$32,$97,$D8
 $D910 DEFB $C4,$68,$D9,$3E,$22,$18,$25,$FE
 $D918 DEFB $20,$28,$21,$FE,$0D,$28,$2A,$FE
 $D920 DEFB $2E,$28,$19,$FE,$2C,$28,$15,$FE
 $D928 DEFB $2F,$28,$11,$FE,$60,$28,$0D,$FE
 $D930 DEFB $2D,$28,$09,$FE,$3A,$28,$05,$CD
 $D938 DEFB $E8,$DA,$38,$87,$05,$04,$28,$06
 $D940 DEFB $77,$CD,$B7,$A9,$23,$05,$C3,$C3
 $D948 DEFB $D8,$3A,$97,$D8,$A7,$CC,$5C,$D9
 $D950 DEFB $CD,$68,$D9,$3E,$0D,$77,$CD,$B7
 $D958 DEFB $A9,$F6,$01,$C9,$CD,$68,$D9,$3E
 $D960 DEFB $22,$77,$CD,$B7,$A9,$23,$05,$C9
 $D968 DEFB $2B,$7E,$FE,$2E,$28,$08,$23,$05
 $D970 DEFB $3E,$2E,$77,$CD,$B7,$A9,$23,$C9
 $D978 DEFB $FE,$09,$28,$1A,$FE,$08,$28,$1A
 $D980 DEFB $FE,$0A,$28,$0E,$FE,$5B,$C0,$3E
 $D988 DEFB $4E,$77,$23,$CD,$B7,$A9,$05,$3E
 $D990 DEFB $0D,$C9,$3E,$53,$18,$F3,$3E,$45
 $D998 DEFB $18,$EF,$3E,$57,$18,$EB,$3A,$1B
 $D9A0 DEFB $A0,$A7,$C2,$C3,$D8,$3E,$01,$32
 $D9A8 DEFB $14,$D7,$F6,$01,$F5,$3E,$08,$CD
 $D9B0 DEFB $B7,$A9,$CD,$B7,$A9,$F1,$C9,$CB
 $D9B8 DEFB $78,$C0,$3E,$08,$CD,$B7,$A9,$04
 $D9C0 DEFB $2B,$18,$F4,$00,$00,$D5,$7E,$23
 $D9C8 DEFB $FE,$20,$28,$FA,$2B,$22,$29,$A0
 $D9D0 DEFB $FE,$0D,$28,$32,$CD,$C6,$DA,$28
 $D9D8 DEFB $56,$CD,$34,$DA,$28,$2C,$DD,$E5
 $D9E0 DEFB $AF,$32,$14,$DC,$ED,$53,$C3,$D9
 $D9E8 DEFB $ED,$5B,$32,$DA,$A7,$E5,$ED,$52
 $D9F0 DEFB $E1,$28,$1F,$E5,$D1,$CD,$4D,$A9
 $D9F8 DEFB $1A,$E6,$F0,$FE,$D0,$28,$E9,$CD
 $DA00 DEFB $7D,$DA,$28,$0E,$18,$DE,$3E,$C0
 $DA08 DEFB $18,$02,$3E,$D0,$01,$00,$00,$D1
 $DA10 DEFB $57,$C9,$E1,$3A,$14,$DC,$FE,$04
 $DA18 DEFB $30,$07,$47,$3A,$13,$DC,$B8,$20
 $DA20 DEFB $E9,$E5,$2A,$C3,$D9,$7E,$E6,$F0
 $DA28 DEFB $01,$BF,$5D,$ED,$42,$E3,$C1,$D1
 $DA30 DEFB $57,$C9,$00,$00,$7E,$23,$E6,$1F
 $DA38 DEFB $07,$5F,$16,$00,$E5,$DD,$E1,$21
 $DA40 DEFB $80,$5D,$19,$5E,$23,$56,$23,$D5
 $DA48 DEFB $5E,$23,$56,$23,$7A,$B3,$28,$F8
 $DA50 DEFB $21,$BF,$5D,$19,$22,$32,$DA,$D1
 $DA58 DEFB $7A,$B3,$C8,$21,$BF,$5D,$19,$11
 $DA60 DEFB $0B,$5C,$06,$01,$DD,$7E,$00,$FE
 $DA68 DEFB $40,$38,$09,$F6,$20,$12,$13,$DD
 $DA70 DEFB $23,$04,$18,$F0,$AF,$12,$78,$32
 $DA78 DEFB $13,$DC,$F6,$01,$C9,$E5,$D5,$3A
 $DA80 DEFB $13,$DC,$47,$3A,$14,$DC,$B8,$30
 $DA88 DEFB $1C,$06,$01,$11,$0B,$5C,$21,$42
 $DA90 DEFB $5C,$1A,$A7,$28,$08,$BE,$20,$05
 $DA98 DEFB $23,$13,$04,$18,$F4,$3A,$14,$DC
 $DAA0 DEFB $B8,$28,$06,$38,$04,$D1,$E1,$AF
 $DAA8 DEFB $C9,$78,$32,$14,$DC,$E1,$E5,$23
 $DAB0 DEFB $CB,$7E,$2B,$28,$0C,$23,$23,$5E
 $DAB8 DEFB $23,$56,$21,$BF,$5D,$19,$E3,$18
 $DAC0 DEFB $EC,$D1,$E1,$F6,$01,$C9,$FE,$60
 $DAC8 DEFB $CA,$67,$DB,$CD,$E8,$DA,$D2,$EF
 $DAD0 DEFB $DA,$06,$B0,$FE,$2E,$28,$0B,$06
 $DAD8 DEFB $A0,$FE,$2C,$28,$05,$FE,$22,$C0
 $DAE0 DEFB $06,$90,$23,$78,$01,$00,$00,$C9
 $DAE8 DEFB $FE,$30,$D8,$FE,$3A,$3F,$C9,$CD
 $DAF0 DEFB $F7,$DB,$47,$7E,$FE,$3A,$28,$0D
 $DAF8 DEFB $FE,$41,$28,$09,$FE,$50,$28,$05
 $DB00 DEFB $CD,$56,$DB,$20,$7F,$78,$FE,$3C
 $DB08 DEFB $30,$45,$CB,$F8,$0E,$00,$7E,$CD
 $DB10 DEFB $56,$DB,$28,$4C,$FE,$3A,$20,$09
 $DB18 DEFB $23,$CD,$F7,$DB,$4F,$FE,$3C,$30
 $DB20 DEFB $2E,$7E,$CD,$56,$DB,$28,$39,$FE
 $DB28 DEFB $41,$20,$05,$CB,$F0,$23,$18,$07
 $DB30 DEFB $FE,$50,$20,$1B,$CB,$F1,$23,$7E
 $DB38 DEFB $FE,$4D,$20,$13,$23,$7E,$FE,$2E
 $DB40 DEFB $28,$FA,$CD,$59,$DB,$28,$19,$FE
 $DB48 DEFB $0D,$28,$14,$FE,$22,$28,$10,$AF
 $DB50 DEFB $3E,$D0,$01,$00,$00,$C9,$FE,$2E
 $DB58 DEFB $C8,$FE,$2C,$C8,$FE,$20,$C9,$2B
 $DB60 DEFB $AF,$3E,$F0,$C9,$00,$00,$00,$23
 $DB68 DEFB $CD,$F7,$DB,$32,$64,$DB,$AF,$32
 $DB70 DEFB $65,$DB,$32,$66,$DB,$23,$7E,$CD
 $DB78 DEFB $E8,$DA,$2B,$38,$43,$23,$CD,$F7
 $DB80 DEFB $DB,$47,$18,$04,$AF,$32,$64,$DB
 $DB88 DEFB $AF,$32,$65,$DB,$32,$66,$DB,$7E
 $DB90 DEFB $FE,$53,$20,$06,$78,$32,$65,$DB
 $DB98 DEFB $18,$25,$FE,$44,$20,$06,$78,$32
 $DBA0 DEFB $66,$DB,$18,$F4,$FE,$2F,$20,$A7
 $DBA8 DEFB $78,$32,$65,$DB,$23,$7E,$FE,$2D
 $DBB0 DEFB $28,$0D,$CD,$E8,$DA,$38,$98,$CD
 $DBB8 DEFB $F7,$DB,$32,$66,$DB,$18,$01,$23
 $DBC0 DEFB $E5,$3A,$64,$DB,$6F,$26,$00,$29
 $DBC8 DEFB $29,$5D,$54,$29,$29,$19,$3A,$65
 $DBD0 DEFB $DB,$5F,$16,$00,$19,$29,$29,$5D
 $DBD8 DEFB $54,$29,$19,$3A,$66,$DB,$5F,$16
 $DBE0 DEFB $00,$19,$E3,$C1,$78,$FE,$40,$D2
 $DBE8 DEFB $4F,$DB,$CB,$21,$CB,$10,$CB,$39
 $DBF0 DEFB $CB,$F9,$CB,$F8,$C3,$3D,$DB,$C5
 $DBF8 DEFB $0E,$00,$7E,$CD,$E8,$DA,$38,$10
 $DC00 DEFB $D6,$30,$47,$CB,$01,$79,$CB,$01
 $DC08 DEFB $CB,$01,$81,$80,$4F,$23,$18,$EA
 $DC10 DEFB $79,$C1,$C9,$00,$00

; Routine at DC15
;
; Used by the routines at #R$C4D1, #R$C929, #R$CBA7, #R$DC6C, #R$E691 and
; #R$F1C1.
c$DC15 XOR A         ;
 $DC16 LD L,A        ;
 $DC17 LD H,A        ;
 $DC18 RET           ;
 $DC19 DEC DE        ;
 $DC1A JR NZ,$DC5C   ;
 $DC1C JR Z,$DC1E    ;
*$DC1E NOP           ;
 $DC1F NOP           ;
 $DC20 CALL $DC6C    ;
 $DC23 RET NZ        ;
 $DC24 LD A,($A034)  ;
 $DC27 CALL $D46C    ;
 $DC2A LD A,(IX+$02) ;
 $DC2D AND A         ;
 $DC2E JR Z,$DC4B    ;
 $DC30 LD B,A        ;
 $DC31 LD A,($A00A)  ;
 $DC34 PUSH AF       ;
 $DC35 LD A,$01      ;
 $DC37 LD ($D0DC),A  ;
 $DC3A CALL $DD0B    ;
 $DC3D LD A,($A00A)  ;
 $DC40 CALL $D1B2    ;
 $DC43 POP BC        ;
 $DC44 CALL $DD0B    ;
 $DC47 XOR A         ;
; This entry point is used by the routine at #R$DC6C.
*$DC48 LD ($D0DC),A  ;
*$DC4B OR $01        ;
 $DC4D RET           ;
 $DC4E LD A,($A034)  ;
 $DC51 CALL $D46C    ;
 $DC54 JP $DCDD      ;
 $DC57 LD C,E        ;
 $DC58 JR NZ,$DCA8   ;
 $DC5A CALL C,$7EDD  ;
 $DC5D NOP           ;
 $DC5E LD ($A033),A  ;
 $DC61 XOR A         ;
 $DC62 LD ($A00F),A  ;
 $DC65 DEC A         ;
; This entry point is used by the routine at #R$DC6C.
*$DC66 LD ($A034),A  ;
 $DC69 JP $DD07      ;

; Routine at DC6C
;
; Used by the routines at #R$A2E4, #R$C996, #R$CB43 and #R$DC15.
c$DC6C LD A,($A036)    ;
 $DC6F CP $00          ;
 $DC71 RET Z           ;
 $DC72 CP $01          ;
 $DC74 RET Z           ;
 $DC75 CP $64          ;
 $DC77 RET Z           ;
 $DC78 OR $01          ;
 $DC7A RET             ;
 $DC7B JR NZ,$DC8D     ;
 $DC7D CALL $DC6C      ;
 $DC80 RET NZ          ;
 $DC81 CALL $A2A2      ;
 $DC84 LD A,($A00A)    ;
 $DC87 CALL $D102      ;
 $DC8A OR $01          ;
 $DC8C RET             ;
*$DC8D LD L,D          ;
 $DC8E DJNZ $DC48      ;
 $DC90 DEFB $DD        ;
 $DC91 LD IX,($A013)   ;
 $DC95 LD IY,($A017)   ;
 $DC99 LD A,(IY+$01)   ;
 $DC9C LD (IX+$01),A   ;
 $DC9F OR $01          ;
 $DCA1 RET             ;
 $DCA2 CALL $D26C      ;
 $DCA5 JR C,$DCB6      ;
*$DCA7 LD A,($A036)    ;
 $DCAA LD HL,$A034     ;
 $DCAD CALL $D278      ;
 $DCB0 JP C,$DC15      ;
 $DCB3 OR $01          ;
 $DCB5 RET             ;
*$DCB6 LD HL,$DCBB     ;
 $DCB9 XOR A           ;
 $DCBA RET             ;
 $DCBB LD HL,$68B7     ;
 $DCBE JP $A59F        ;
 $DCC1 LD L,C          ;
 $DCC2 DJNZ $DC66      ;
 $DCC4 CALL C,$2ADD    ;
 $DCC7 INC DE          ;
 $DCC8 AND B           ;
 $DCC9 LD A,($A036)    ;
 $DCCC LD (IX+$01),A   ;
 $DCCF OR $01          ;
 $DCD1 RET             ;
 $DCD2 LD A,($A033)    ;
 $DCD5 CALL $D448      ;
*$DCD8 CP $FF          ;
 $DCDA JP Z,$DC15      ;
; This entry point is used by the routine at #R$DC15.
*$DCDD CALL $CBA7      ;
 $DCE0 LD IY,($A017)   ;
 $DCE4 LD A,(IY+$01)   ;
 $DCE7 CP $FF          ;
 $DCE9 JP NZ,$DC15     ;
 $DCEC LD A,(IX+$02)   ;
 $DCEF AND A           ;
 $DCF0 JP Z,$DC15      ;
 $DCF3 LD A,(IX+$01)   ;
 $DCF6 CALL $DD35      ;
 $DCF9 JP NZ,$DC15     ;
 $DCFC OR $01          ;
 $DCFE RET             ;
 $DCFF NOP             ;
 $DD00 NOP             ;
 $DD01 NOP             ;
 $DD02 NOP             ;
 $DD03 LD H,B          ;
 $DD04 JR NZ,$DCD8     ;
 $DD06 CALL C,$7EDD    ;
 $DD09 LD (BC),A       ;
 $DD0A LD B,A          ;
; This entry point is used by the routine at #R$DC15.
*$DD0B LD A,($A036)    ;
*$DD0E PUSH AF         ;
 $DD0F LD HL,$A036     ;
 $DD12 CP (HL)         ;
 $DD13 LD A,B          ;
 $DD14 JR NZ,$DD19     ;
 $DD16 LD ($A00A),A    ;
*$DD19 CP $FF          ;
 $DD1B JR NZ,$DD1E     ;
 $DD1D XOR A           ;
*$DD1E LD ($DD01),A    ;
 $DD21 CALL $D224      ;
 $DD24 LD ($DCFF),IX   ;
 $DD28 POP AF          ;
 $DD29 CALL $D237      ;
 $DD2C LD (IX+$0F),B   ;
 $DD2F CALL $D249      ;
 $DD32 OR $01          ;
 $DD34 RET             ;
*$DD35 AND A           ;
 $DD36 RET Z           ;
 $DD37 PUSH IX         ;
 $DD39 CALL $D237      ;
 $DD3C LD A,(IX+$05)   ;
 $DD3F AND $28         ;
 $DD41 LD A,(IX+$02)   ;
 $DD44 POP IX          ;
 $DD46 JR Z,$DD4F      ;
 $DD48 CP (IY+$02)     ;
 $DD4B JR C,$DD4F      ;
 $DD4D XOR A           ;
 $DD4E RET             ;
*$DD4F OR $01          ;
 $DD51 RET             ;
 $DD52 AND H           ;
 $DD53 NOP             ;
 $DD54 RLA             ;
 $DD55 LD H,C          ;
 $DD56 DEFB $DD        ;
 $DD57 DEFB $FD        ;
 $DD58 RST $38         ;
 $DD59 LD H,B          ;
 $DD5A DEFB $DD        ;
 $DD5B LD DE,$60FD     ;
 $DD5E DEFB $DD        ;
 $DD5F DEC BC          ;
 $DD60 LD A,(BC)       ;
 $DD61 LD H,H          ;
 $DD62 NOP             ;
 $DD63 LD L,(HL)       ;
 $DD64 DEFB $DD        ;
 $DD65 LD A,(IX+$00)   ;
 $DD68 LD ($9FD7),A    ;
 $DD6B OR $01          ;
 $DD6D RET             ;
 $DD6E LD A,($A034)    ;
 $DD71 CALL $D471      ;
 $DD74 CP $FF          ;
 $DD76 JP Z,$DC15      ;
 $DD79 LD A,(IX+$00)   ;
 $DD7C CP $0B          ;
 $DD7E JP NC,$DC15     ;
 $DD81 OR $01          ;
 $DD83 RET             ;
 $DD84 LD L,L          ;
 $DD85 NOP             ;
 $DD86 SUB C           ;
 $DD87 DEFB $DD        ;
 $DD88 LD A,(IX+$01)   ;
 $DD8B LD ($9FD6),A    ;
 $DD8E OR $01          ;
 $DD90 RET             ;
 $DD91 LD IX,($A013)   ;
 $DD95 LD A,(IX+$01)   ;
 $DD98 AND A           ;
 $DD99 INC A           ;
 $DD9A JP Z,$DC15      ;
 $DD9D RET             ;
 $DD9E DEC C           ;
 $DD9F DJNZ $DDDB      ;
 $DDA1 INC (HL)        ;
 $DDA2 AND B           ;
 $DDA3 CALL $CC0E      ;
 $DDA6 CP $FF          ;
 $DDA8 LD A,$00        ;
 $DDAA JR Z,$DDAE      ;
 $DDAC LD A,$01        ;
*$DDAE CALL $B86A      ;
 $DDB1 OR $01          ;
 $DDB3 RET             ;
 $DDB4 LD B,B          ;
 $DDB5 LD D,B          ;
 $DDB6 CP B            ;
 $DDB7 DEFB $DD        ;
 $DDB8 CALL $CBA7      ;
 $DDBB OR $01          ;
 $DDBD RET             ;
 $DDBE LD B,B          ;
 $DDBF NOP             ;
 $DDC0 CP B            ;
 $DDC1 DEFB $DD        ;
 $DDC2 LD A,($A034)    ;
 $DDC5 LD ($A01F),A    ;
 $DDC8 OR $01          ;
 $DDCA RET             ;
 $DDCB NOP             ;
 $DDCC NOP             ;
 $DDCD NOP             ;
 $DDCE NOP             ;
 $DDCF NOP             ;
 $DDD0 LD B,L          ;
 $DDD1 NOP             ;
 $DDD2 CP B            ;
 $DDD3 LD IX,($A02F)   ;
 $DDD7 RES 7,H         ;
 $DDD9 PUSH HL         ;
 $DDDA LD A,H          ;
*$DDDB AND $3F         ;
 $DDDD LD H,A          ;
 $DDDE LD A,L          ;
 $DDDF AND $3F         ;
 $DDE1 LD L,A          ;
 $DDE2 CALL $DE48      ;
 $DDE5 LD ($DDCD),HL   ;
 $DDE8 LD HL,($9FDF)   ;
 $DDEB CALL $DE48      ;
 $DDEE LD ($DDCB),HL   ;
 $DDF1 POP HL          ;
 $DDF2 LD A,$61        ;
 $DDF4 LD ($DDCF),A    ;
 $DDF7 BIT 6,H         ;
 $DDF9 JR NZ,$DE19     ;
 $DDFB LD A,$70        ;
 $DDFD LD ($DDCF),A    ;
 $DE00 BIT 6,L         ;
 $DE02 JR NZ,$DE19     ;
 $DE04 CALL $DE60      ;
 $DE07 LD A,($9FE2)    ;
 $DE0A JR C,$DE0E      ;
 $DE0C JR NZ,$DE16     ;
*$DE0E CP $61          ;
 $DE10 LD A,$70        ;
 $DE12 JR Z,$DE16      ;
 $DE14 LD A,$61        ;
*$DE16 LD ($DDCF),A    ;
*$DE19 LD HL,($DDCD)   ;
 $DE1C LD DE,($DDCB)   ;
 $DE20 AND A           ;
 $DE21 SBC HL,DE       ;
 $DE23 LD DE,$02D0     ;
 $DE26 LD A,($9FE2)    ;
 $DE29 LD C,A          ;
 $DE2A LD A,($DDCF)    ;
 $DE2D LD B,A          ;
 $DE2E CALL $DE60      ;
 $DE31 JR C,$DE3C      ;
 $DE33 JR Z,$DE3C      ;
 $DE35 LD A,B          ;
 $DE36 CP C            ;
 $DE37 JR Z,$DE42      ;
 $DE39 ADD HL,DE       ;
 $DE3A JR $DE42        ;
*$DE3C ADD HL,DE       ;
 $DE3D LD A,B          ;
 $DE3E CP C            ;
 $DE3F JR NZ,$DE42     ;
 $DE41 ADD HL,DE       ;
*$DE42 LD ($A01F),HL   ;
 $DE45 OR $01          ;
 $DE47 RET             ;
*$DE48 PUSH DE         ;
 $DE49 PUSH BC         ;
 $DE4A LD C,L          ;
 $DE4B LD B,H          ;
 $DE4C LD HL,$0000     ;
 $DE4F LD DE,$003C     ;
 $DE52 LD A,B          ;
 $DE53 CP $0C          ;
 $DE55 JR Z,$DE5A      ;
*$DE57 ADD HL,DE       ;
 $DE58 DJNZ $DE57      ;
*$DE5A LD B,$00        ;
 $DE5C ADD HL,BC       ;
 $DE5D POP BC          ;
 $DE5E POP DE          ;
 $DE5F RET             ;
*$DE60 PUSH HL         ;
 $DE61 PUSH DE         ;
 $DE62 LD HL,($DDCD)   ;
 $DE65 LD DE,($DDCB)   ;
 $DE69 AND A           ;
 $DE6A SBC HL,DE       ;
 $DE6C POP DE          ;
 $DE6D POP HL          ;
 $DE6E RET             ;
 $DE6F JR NZ,$DE81     ;
 $DE71 CALL $A2A2      ;
 $DE74 LD HL,$68AD     ;
 $DE77 CALL $A59F      ;
 $DE7A LD A,($A036)    ;
 $DE7D CALL $D4CC      ;
 $DE80 AND A           ;
*$DE81 LD HL,$6900     ;
 $DE84 JR NZ,$DE8C     ;
 $DE86 CALL $A59F      ;
 $DE89 OR $01          ;
 $DE8B RET             ;
*$DE8C LD C,A          ;
 $DE8D LD A,($A00A)    ;
 $DE90 LD B,A          ;
 $DE91 LD A,($A036)    ;
 $DE94 CALL $D51A      ;
 $DE97 CALL $A2A2      ;
 $DE9A OR $01          ;
 $DE9C RET             ;
*$DE9D JR C,$DEAF      ;
 $DE9F ADD A,B         ;
 $DEA0 LD HL,$0000     ;
 $DEA3 NOP             ;
 $DEA4 LD IX,($A013)   ;
 $DEA8 SET 5,(IX+$05)  ;
 $DEAC OR $01          ;
 $DEAE RET             ;
*$DEAF JR C,$DEC1      ;
 $DEB1 NOP             ;
 $DEB2 JR NZ,$DEB4     ;
*$DEB4 NOP             ;
 $DEB5 NOP             ;
 $DEB6 LD IX,($A013)   ;
 $DEBA RES 5,(IX+$05)  ;
 $DEBE OR $01          ;
 $DEC0 RET             ;
*$DEC1 LD A,D          ;
 $DEC2 JR $DE9D        ;
 $DEC4 SBC A,$09       ;
 $DEC6 NOP             ;
 $DEC7 NOP             ;
*$DEC8 LD B,B          ;
 $DEC9 JR Z,$DEC8      ;
 $DECB LD A,(HL)       ;
 $DECC RRCA            ;
 $DECD LD (IX+$0F),A   ;
 $DED0 LD A,($A035)    ;
 $DED3 LD (IX+$01),A   ;
 $DED6 OR $01          ;
 $DED8 RET             ;
 $DED9 LD IX,($A013)   ;
 $DEDD LD IY,($A015)   ;
 $DEE1 LD A,($A035)    ;
*$DEE4 LD B,A          ;
 $DEE5 LD A,(IY+$04)   ;
 $DEE8 AND $07         ;
 $DEEA JP Z,$DC15      ;
 $DEED LD A,(IY+$02)   ;
 $DEF0 SUB (IX+$02)    ;
 $DEF3 JR C,$DF00      ;
 $DEF5 PUSH AF         ;
 $DEF6 LD A,B          ;
 $DEF7 CALL $D2ED      ;
 $DEFA LD B,A          ;
 $DEFB POP AF          ;
 $DEFC SUB B           ;
 $DEFD JR C,$DF00      ;
 $DEFF RET NZ          ;
*$DF00 XOR A           ;
 $DF01 RET             ;
 $DF02 LD L,D          ;
 $DF03 DEC E           ;
 $DF04 INC H           ;
 $DF05 RST $18         ;
 $DF06 LD IY,($A015)   ;
 $DF0A LD IX,($A013)   ;
 $DF0E LD A,($A035)    ;
 $DF11 LD (IX+$01),A   ;
 $DF14 LD A,(IY+$0F)   ;
 $DF17 LD (IX+$0F),A   ;
 $DF1A LD B,A          ;
 $DF1B LD A,($A034)    ;
 $DF1E CALL $D249      ;
 $DF21 OR $01          ;
 $DF23 RET             ;
 $DF24 LD A,($A034)    ;
 $DF27 LD B,A          ;
 $DF28 LD A,($A035)    ;
 $DF2B JP $C8C6        ;
 $DF2E LD A,($A034)    ;
 $DF31 CALL $C8AF      ;
 $DF34 JR Z,$DF3D      ;
 $DF36 LD HL,$A036     ;
 $DF39 CP (HL)         ;
 $DF3A JP NZ,$DC15     ;
*$DF3D OR $01          ;
 $DF3F RET             ;
 $DF40 LD A,B          ;
 $DF41 DJNZ $DF71      ;
 $DF43 RST $18         ;
 $DF44 ADD A,B         ;
 $DF45 LD B,B          ;
 $DF46 NOP             ;
 $DF47 NOP             ;
 $DF48 NOP             ;
 $DF49 LD A,$01        ;
 $DF4B LD ($CAAE),A    ;
 $DF4E CALL $DC6C      ;
 $DF51 RET NZ          ;
 $DF52 CALL $DF5B      ;
 $DF55 CALL $A2A2      ;
 $DF58 OR $01          ;
 $DF5A RET             ;
*$DF5B LD A,($A034)    ;
 $DF5E CALL $D237      ;
 $DF61 SET 6,(IX+$06)  ;
 $DF65 LD L,(IX+$0D)   ;
 $DF68 LD H,(IX+$0E)   ;
 $DF6B LD A,H          ;
 $DF6C OR L            ;
 $DF6D JP NZ,$A59F     ;
 $DF70 LD HL,$68E1     ;
 $DF73 CALL $A59F      ;
 $DF76 CALL $D3D5      ;
 $DF79 LD A,$2E        ;
 $DF7B JP $A9B7        ;
 $DF7E ADC A,B         ;
 $DF7F NOP             ;
 $DF80 RLCA            ;
 $DF81 POP BC          ;
 $DF82 CALL C,$FFFD    ;
 $DF85 RLCA            ;
 $DF86 ADC A,E         ;
 $DF87 RST $18         ;
 $DF88 DEFB $FD        ;
 $DF89 RST $38         ;
 $DF8A DEC BC          ;
 $DF8B EX AF,AF'       ;
 $DF8C NOP             ;
 $DF8D LD A,($9CA1)    ;
 $DF90 AND A           ;
 $DF91 JR Z,$E000      ;
 $DF93 LD A,$FF        ;
 $DF95 LD ($9CA1),A    ;
 $DF98 LD IX,($A013)   ;
 $DF9C LD HL,$07D5     ;
 $DF9F LD (IX+$09),L   ;
 $DFA2 LD (IX+$0A),H   ;
 $DFA5 JR $E000        ;
 $DFA7 RET Z           ;
 $DFA8 NOP             ;
 $DFA9 INC E           ;
 $DFAA RET PO          ;
 $DFAB RLCA            ;
 $DFAC OR (HL)         ;
 $DFAD RST $18         ;
 $DFAE DEFB $FD        ;
 $DFAF RST $38         ;
 $DFB0 RLCA            ;
 $DFB1 SBC A,L         ;
 $DFB2 SBC A,$FD       ;
 $DFB4 RST $38         ;
 $DFB5 DEC BC          ;
 $DFB6 RLCA            ;
 $DFB7 RET P           ;
 $DFB8 LD A,($A034)    ;
 $DFBB CP $59          ;
 $DFBD JP NZ,$E000     ;
 $DFC0 LD A,($9FE1)    ;
 $DFC3 CP $00          ;
 $DFC5 JP NZ,$E000     ;
 $DFC8 JR $DFCC        ;
 $DFCA NOP             ;
 $DFCB NOP             ;
; This entry point is used by the routine at #R$E691.
*$DFCC LD HL,$759C     ;
 $DFCF LD A,$06        ;
 $DFD1 CALL $D237      ;
 $DFD4 LD A,($A009)    ;
 $DFD7 CP (IX+$0F)     ;
 $DFDA JP NZ,$9E74     ;
 $DFDD LD HL,$75D2     ;
 $DFE0 JP $9E74        ;
 $DFE3 LD A,($A036)    ;
 $DFE6 CP $64          ;
 $DFE8 JR $DFFD        ;
 $DFEA LD B,A          ;
 $DFEB DJNZ $DFD0      ;
 $DFED RST $18         ;
 $DFEE JR $E007        ;
 $DFF0 LD C,B          ;
 $DFF1 DJNZ $E00F      ;
 $DFF3 RET PO          ;
 $DFF4 LD A,$64        ;
 $DFF6 JR $E028        ;
 $DFF8 LD A,($A036)    ;
 $DFFB CP $01          ;
*$DFFD JP NZ,$DC15     ;
*$E000 OR $01          ;
 $E002 RET             ;
 $E003 LD B,A          ;
 $E004 DJNZ $DFFE      ;
 $E006 RST $18         ;
*$E007 XOR A           ;
 $E008 CALL $E03A      ;
 $E00B LD IX,($A013)   ;
*$E00F LD (IX+$01),$00 ;
 $E013 LD A,($A00A)    ;
 $E016 LD (IX+$0F),A   ;
 $E019 OR $01          ;
 $E01B RET             ;
 $E01C LD A,($A036)    ;
 $E01F AND A           ;
 $E020 JR $DFFD        ;
 $E022 LD C,B          ;
 $E023 DJNZ $E041      ;
 $E025 RET PO          ;
 $E026 LD A,$01        ;
*$E028 CALL $E03A      ;
 $E02B LD IX,($A013)   ;
 $E02F LD (IX+$01),$00 ;
 $E033 LD (IX+$0F),$00 ;
 $E037 OR $01          ;
 $E039 RET             ;
*$E03A LD C,A          ;
 $E03B LD A,($A036)    ;
 $E03E CALL $CC0E      ;
*$E041 LD (IY+$00),C   ;
 $E044 LD IY,($A017)   ;
 $E048 LD A,C          ;
 $E049 CALL $D237      ;
 $E04C LD ($A017),IX   ;
 $E050 LD A,(IY+$01)   ;
 $E053 LD (IX+$01),A   ;
 $E056 LD (IY+$01),$FF ;
 $E05A LD A,(IY+$0F)   ;
 $E05D LD (IX+$0F),A   ;
 $E060 LD (IY+$0F),$00 ;
 $E064 LD B,$00        ;
*$E066 INC B           ;
 $E067 LD A,B          ;
 $E068 CP $6E          ;
 $E06A JR Z,$E07C      ;
 $E06C CALL $D237      ;
 $E06F LD A,($A036)    ;
 $E072 CP (IX+$01)     ;
 $E075 JR NZ,$E066     ;
 $E077 LD (IX+$01),C   ;
 $E07A JR $E066        ;
*$E07C CALL $CFB6      ;
 $E07F JR Z,$E086      ;
 $E081 LD (IX+$00),C   ;
 $E084 JR $E07C        ;
*$E086 LD A,C          ;
 $E087 LD ($A036),A    ;
 $E08A OR $01          ;
 $E08C RET             ;
 $E08D ADC A,L         ;
 $E08E INC B           ;
 $E08F ADD A,A         ;
 $E090 PUSH IY         ;
 $E092 DEFB $FD        ;
 $E093 RST $38         ;
 $E094 SBC A,E         ;
 $E095 RET PO          ;
 $E096 DEC B           ;
 $E097 SBC A,(IY+$6B)  ;
 $E09A DEC BC          ;
 $E09B LD (BC),A       ;
 $E09C DEC E           ;
 $E09D CALL M,$0BFF    ;
 $E0A0 ADC A,B         ;
 $E0A1 NOP             ;
 $E0A2 RLCA            ;
 $E0A3 XOR L           ;
 $E0A4 RET PO          ;
 $E0A5 LD (BC),A       ;
 $E0A6 LD E,L          ;
 $E0A7 RLCA            ;
 $E0A8 DEC (HL)        ;
 $E0A9 POP HL          ;
 $E0AA DEFB $FD        ;
 $E0AB RST $38         ;
 $E0AC DEC BC          ;
 $E0AD LD C,L          ;
 $E0AE RLCA            ;
 $E0AF INC E           ;
 $E0B0 RET PO          ;
 $E0B1 LD A,($A00A)    ;
 $E0B4 CP $58          ;
 $E0B6 JR NZ,$E0DD     ;
 $E0B8 LD A,($9FE1)    ;
 $E0BB CP $01          ;
 $E0BD JR NZ,$E0DD     ;
 $E0BF LD IX,($A015)   ;
 $E0C3 SET 7,(IX+$06)  ;
 $E0C7 SET 7,(IX+$05)  ;
 $E0CB LD A,($A00A)    ;
 $E0CE LD (IX+$0F),A   ;
 $E0D1 LD A,($A034)    ;
 $E0D4 LD (IX+$01),A   ;
 $E0D7 LD HL,$7B5A     ;
 $E0DA CALL $A59F      ;
*$E0DD OR $01          ;
 $E0DF RET             ;
 $E0E0 ADC A,B         ;
 $E0E1 NOP             ;
 $E0E2 RLCA            ;
 $E0E3 DEC (HL)        ;
 $E0E4 POP HL          ;
 $E0E5 DEFB $FD        ;
 $E0E6 RST $38         ;
 $E0E7 INC BC          ;
 $E0E8 EX DE,HL        ;
 $E0E9 RET PO          ;
 $E0EA DEC BC          ;
 $E0EB NOP             ;
 $E0EC NOP             ;
 $E0ED LD A,$51        ;
 $E0EF JP $9C56        ;
 $E0F2 ADC A,B         ;
 $E0F3 NOP             ;
 $E0F4 RLCA            ;
 $E0F5 DEC (HL)        ;
 $E0F6 POP HL          ;
 $E0F7 DEFB $FD        ;
 $E0F8 RST $38         ;
 $E0F9 INC BC          ;
 $E0FA DEFB $FD        ;
 $E0FB RET PO          ;
 $E0FC DEC BC          ;
 $E0FD NOP             ;
 $E0FE NOP             ;
 $E0FF LD A,$3F        ;
 $E101 JP $9C56        ;
 $E104 EX AF,AF'       ;
 $E105 LD H,B          ;
 $E106 LD A,$01        ;
 $E108 LD ($CAAE),A    ;
 $E10B LD A,($A036)    ;
 $E10E AND A           ;
 $E10F RET NZ          ;
 $E110 CALL $DF5B      ;
 $E113 LD IX,($A013)   ;
 $E117 BIT 5,(IX+$05)  ;
 $E11B RET NZ          ;
 $E11C SET 5,(IX+$05)  ;
 $E120 LD HL,$7BF7     ;
 $E123 LD (IX+$0D),L   ;
 $E126 LD (IX+$0E),H   ;
 $E129 LD HL,$7C13     ;
 $E12C CALL $A59F      ;
 $E12F CALL $A2A2      ;
 $E132 OR $01          ;
 $E134 RET             ;
 $E135 LD A,B          ;
 $E136 LD D,B          ;
 $E137 LD L,$DF        ;
 $E139 ADD A,B         ;
 $E13A LD B,B          ;
 $E13B NOP             ;
 $E13C NOP             ;
 $E13D NOP             ;
 $E13E LD A,$01        ;
 $E140 LD ($CAAE),A    ;
 $E143 LD A,($A036)    ;
 $E146 AND A           ;
 $E147 RET NZ          ;
 $E148 CALL $E151      ;
 $E14B CALL $A2A2      ;
 $E14E OR $01          ;
 $E150 RET             ;
*$E151 CALL $DF5B      ;
 $E154 LD A,($A034)    ;
 $E157 LD IX,$E16B     ;
 $E15B CALL $D34E      ;
 $E15E CP $FF          ;
 $E160 RET Z           ;
 $E161 LD L,(IX+$01)   ;
 $E164 LD H,(IX+$02)   ;
 $E167 CALL $A59F      ;
 $E16A RET             ;
 $E16B LD C,H          ;
 $E16C JP NZ,$667B     ;
 $E16F RST $10         ;
 $E170 LD A,E          ;
 $E171 ADD HL,SP       ;
 $E172 SBC A,(HL)      ;
 $E173 LD A,H          ;
 $E174 LD A,$E7        ;
 $E176 LD A,H          ;
 $E177 LD L,$4A        ;
 $E179 LD A,H          ;
 $E17A RST $38         ;
 $E17B ADC A,L         ;
 $E17C RLCA            ;
 $E17D RLCA            ;
 $E17E ADC A,B         ;
 $E17F POP HL          ;
 $E180 DEFB $FD        ;
 $E181 CALL M,$D607    ;
 $E184 POP HL          ;
 $E185 DEFB $FD        ;
 $E186 CALL M,$0D0B    ;
 $E189 RLCA            ;
 $E18A LD A,($A035)    ;
 $E18D CP $10          ;
 $E18F JR Z,$E199      ;
 $E191 CP $43          ;
 $E193 JR Z,$E199      ;
 $E195 CP $11          ;
 $E197 JR NZ,$E1D3     ;
*$E199 LD IX,$9993     ;
 $E19D SET 1,(IX+$03)  ;
 $E1A1 JR $E1D3        ;
 $E1A3 ADC A,L         ;
 $E1A4 RLCA            ;
 $E1A5 RLA             ;
 $E1A6 OR D            ;
 $E1A7 POP HL          ;
 $E1A8 RST $38         ;
 $E1A9 CALL M,$E1B1    ;
 $E1AC RLCA            ;
 $E1AD SUB $E1         ;
 $E1AF DEFB $FD        ;
 $E1B0 CALL M,$000B    ;
 $E1B3 RLCA            ;
 $E1B4 LD A,($A035)    ;
 $E1B7 CP $43          ;
 $E1B9 JR NZ,$E1D3     ;
 $E1BB CALL $C821      ;
 $E1BE JR NZ,$E1C6     ;
 $E1C0 CALL $E1FC      ;
 $E1C3 JP $DC15        ;
*$E1C6 LD A,$5F        ;
 $E1C8 CALL $E03A      ;
 $E1CB LD IX,$998F     ;
 $E1CF SET 1,(IX+$03)  ;
*$E1D3 OR $01          ;
 $E1D5 RET             ;
 $E1D6 DEC C           ;
 $E1D7 RLA             ;
 $E1D8 LD A,($A036)    ;
 $E1DB CALL $E207      ;
 $E1DE JR Z,$E1FC      ;
 $E1E0 INC IX          ;
 $E1E2 LD A,($A035)    ;
 $E1E5 CALL $E201      ;
 $E1E8 JR Z,$E1FC      ;
 $E1EA LD L,(IX+$01)   ;
 $E1ED LD H,(IX+$02)   ;
*$E1F0 PUSH AF         ;
 $E1F1 PUSH HL         ;
 $E1F2 LD HL,$6830     ;
 $E1F5 CALL $A59F      ;
*$E1F8 POP AF          ;
*$E1F9 OR $01          ;
 $E1FB RET             ;
*$E1FC LD HL,$761D     ;
; This entry point is used by the routine at #R$E691.
*$E1FF JR $E1F0        ;
*$E201 CALL $D34E      ;
 $E204 CP $FF          ;
 $E206 RET             ;
*$E207 LD IX,$E22A     ;
*$E20B CP (IX+$00)     ;
 $E20E JR Z,$E1F9      ;
 $E210 PUSH AF         ;
 $E211 LD A,(IX+$00)   ;
 $E214 CP $FE          ;
 $E216 JR Z,$E1F8      ;
 $E218 INC A           ;
 $E219 JR Z,$E227      ;
 $E21B INC IX          ;
 $E21D LD A,$FF        ;
 $E21F CALL $D34E      ;
 $E222 INC IX          ;
 $E224 POP AF          ;
 $E225 JR $E20B        ;
*$E227 POP AF          ;
 $E228 XOR A           ;
 $E229 RET             ;
 $E22A EX AF,AF'       ;
 $E22B DJNZ $E273      ;
 $E22D LD A,B          ;
 $E22E LD DE,$7846     ;
 $E231 RLCA            ;
 $E232 RET M           ;
 $E233 LD A,B          ;
 $E234 RST $38         ;
 $E235 ADD HL,BC       ;
 $E236 DJNZ $E287      ;
 $E238 LD A,C          ;
 $E239 LD DE,$794F     ;
 $E23C LD B,$C4        ;
 $E23E LD A,C          ;
 $E23F RST $38         ;
 $E240 LD A,(BC)       ;
 $E241 DJNZ $E278      ;
 $E243 LD A,D          ;
 $E244 LD DE,$7A35     ;
 $E247 RST $38         ;
 $E248 LD B,$10        ;
 $E24A CP C            ;
 $E24B LD A,D          ;
*$E24C LD DE,$7AB9     ;
 $E24F LD (DE),A       ;
 $E250 INC L           ;
 $E251 LD (HL),A       ;
 $E252 RST $38         ;
 $E253 DEC B           ;
 $E254 DJNZ $E24C      ;
 $E256 LD A,D          ;
 $E257 LD DE,$7AF6     ;
 $E25A DEC C           ;
 $E25B AND H           ;
 $E25C HALT            ;
 $E25D RLCA            ;
 $E25E CALL NC,$FF78   ;
 $E261 INC B           ;
*$E262 RRCA            ;
 $E263 LD (HL),C       ;
 $E264 LD (HL),E       ;
 $E265 RST $38         ;
 $E266 RLCA            ;
 $E267 LD DE,$780C     ;
 $E26A LD (DE),A       ;
 $E26B LD ($FF77),HL   ;
 $E26E DEC C           ;
 $E26F LD B,E          ;
 $E270 ADD A,A         ;
 $E271 HALT            ;
 $E272 RST $38         ;
*$E273 LD E,A          ;
 $E274 LD B,E          ;
 $E275 ADD A,A         ;
 $E276 HALT            ;
 $E277 DJNZ $E2BD      ;
 $E279 HALT            ;
 $E27A LD DE,$7644     ;
 $E27D DEC C           ;
 $E27E DEC L           ;
 $E27F HALT            ;
 $E280 RST $38         ;
 $E281 CP $12          ;
 $E283 LD B,L          ;
 $E284 LD L,B          ;
 $E285 DJNZ $E2CC      ;
*$E287 LD L,B          ;
 $E288 LD DE,$6845     ;
 $E28B RST $38         ;
 $E28C RST $38         ;
*$E28D LD A,($A036)    ;
 $E290 LD HL,$A034     ;
 $E293 CP (HL)         ;
 $E294 JP Z,$DC15      ;
 $E297 RET             ;
 $E298 LD A,($A034)    ;
 $E29B CP $1E          ;
 $E29D JR Z,$E2A4      ;
 $E29F CP $21          ;
 $E2A1 JP NZ,$DC15     ;
*$E2A4 LD A,($A00A)    ;
 $E2A7 LD C,$00        ;
 $E2A9 CALL $9C07      ;
 $E2AC JP NZ,$DC15     ;
 $E2AF LD IX,($A013)   ;
 $E2B3 LD A,(IX+$0F)   ;
 $E2B6 AND A           ;
 $E2B7 JP NZ,$DC15     ;
 $E2BA LD A,($A034)    ;
*$E2BD CALL $CFB9      ;
 $E2C0 JP NZ,$DC15     ;
 $E2C3 OR $01          ;
 $E2C5 RET             ;
 $E2C6 NOP             ;
 $E2C7 LD B,A          ;
 $E2C8 DJNZ $E262      ;
 $E2CA JP PO,$0A3A     ;
 $E2CD AND B           ;
 $E2CE LD B,A          ;
 $E2CF LD A,($A034)    ;
 $E2D2 INC A           ;
 $E2D3 LD ($E2C6),A    ;
 $E2D6 DEC A           ;
 $E2D7 CALL $DD0E      ;
 $E2DA LD A,($A036)    ;
 $E2DD LD B,A          ;
 $E2DE LD A,($A034)    ;
 $E2E1 LD C,A          ;
 $E2E2 LD DE,$F2B6     ;
 $E2E5 LD A,($E2C6)    ;
 $E2E8 CALL $E2EE      ;
 $E2EB OR $01          ;
 $E2ED RET             ;
*$E2EE PUSH DE         ;
 $E2EF LD D,A          ;
 $E2F0 LD A,B          ;
 $E2F1 LD ($A034),A    ;
 $E2F4 LD A,C          ;
 $E2F5 LD ($A035),A    ;
 $E2F8 LD A,($A036)    ;
 $E2FB PUSH AF         ;
 $E2FC LD A,D          ;
 $E2FD LD ($A036),A    ;
 $E300 CALL $CC0E      ;
 $E303 LD L,(IY+$01)   ;
 $E306 LD H,(IY+$02)   ;
 $E309 LD B,$02        ;
 $E30B CALL $CF80      ;
 $E30E POP AF          ;
 $E30F LD ($A036),A    ;
 $E312 POP DE          ;
 $E313 LD (IY+$01),E   ;
 $E316 LD (IY+$02),D   ;
 $E319 OR $01          ;
 $E31B RET             ;
 $E31C LD IX,($A013)   ;
 $E320 BIT 5,(IX+$06)  ;
 $E324 JP Z,$DC15      ;
 $E327 RET             ;
 $E328 LD L,D          ;
 $E329 DJNZ $E347      ;
 $E32B EX (SP),HL      ;
 $E32C LD HL,$6836     ;
 $E32F CALL $A59F      ;
 $E332 LD IX,($A013)   ;
 $E336 LD L,(IX+$09)   ;
 $E339 LD H,(IX+$0A)   ;
 $E33C CALL $A419      ;
 $E33F CALL $A2A2      ;
 $E342 OR $01          ;
 $E344 RET             ;
 $E345 CALL $E34F      ;
 $E348 RET Z           ;
 $E349 LD A,$25        ;
 $E34B LD ($A033),A    ;
 $E34E RET             ;
*$E34F LD A,($A036)    ;
 $E352 CALL $E619      ;
 $E355 JR Z,$E365      ;
 $E357 CALL $E39C      ;
 $E35A CALL $E3A9      ;
 $E35D AND A           ;
 $E35E SBC HL,DE       ;
 $E360 JR C,$E365      ;
 $E362 OR $01          ;
 $E364 RET             ;
*$E365 LD HL,$E36A     ;
 $E368 XOR A           ;
 $E369 RET             ;
 $E36A LD HL,$683F     ;
 $E36D JP $A59F        ;
 $E370 LD H,(HL)       ;
 $E371 DEC E           ;
 $E372 LD B,L          ;
 $E373 EX (SP),HL      ;
 $E374 CALL $E34F      ;
 $E377 CALL $E38F      ;
 $E37A LD A,($A035)    ;
 $E37D CALL $E619      ;
 $E380 JR Z,$E38C      ;
 $E382 CALL $E39C      ;
 $E385 CALL $E3A9      ;
 $E388 ADD HL,DE       ;
 $E389 CALL $E38F      ;
*$E38C OR $01          ;
 $E38E RET             ;
*$E38F RL L            ;
 $E391 RL H            ;
 $E393 SRL L           ;
 $E395 LD (IX+$09),L   ;
 $E398 LD (IX+$0A),H   ;
 $E39B RET             ;
*$E39C LD L,(IX+$09)   ;
 $E39F LD H,(IX+$0A)   ;
 $E3A2 RL L            ;
 $E3A4 SRA H           ;
 $E3A6 RR L            ;
 $E3A8 RET             ;
*$E3A9 LD DE,($A02F)   ;
 $E3AD RES 7,D         ;
 $E3AF RL E            ;
 $E3B1 SRA D           ;
 $E3B3 RR E            ;
 $E3B5 OR $01          ;
 $E3B7 RET             ;
 $E3B8 CALL $E3F5      ;
 $E3BB RET Z           ;
 $E3BC LD A,($A036)    ;
 $E3BF PUSH AF         ;
 $E3C0 LD A,($A034)    ;
 $E3C3 INC A           ;
 $E3C4 LD ($A036),A    ;
 $E3C7 CALL $CFB6      ;
 $E3CA EX AF,AF'       ;
 $E3CB POP AF          ;
 $E3CC LD ($A036),A    ;
 $E3CF EX AF,AF'       ;
 $E3D0 JR Z,$E3E7      ;
 $E3D2 LD A,(IX+$03)   ;
 $E3D5 CALL $D237      ;
 $E3D8 LD IY,($A017)   ;
 $E3DC LD A,(IX+$04)   ;
 $E3DF AND (IY+$04)    ;
 $E3E2 AND $70         ;
 $E3E4 JP Z,$DC15      ;
*$E3E7 OR $01          ;
 $E3E9 RET             ;
 $E3EA LD A,B          ;
 $E3EB JR NZ,$E3A5     ;
 $E3ED EX (SP),HL      ;
 $E3EE SUB B           ;
 $E3EF LD B,B          ;
 $E3F0 JR Z,$E3F2      ;
*$E3F2 NOP             ;
 $E3F3 JR $E413        ;
*$E3F5 CALL $CBA7      ;
 $E3F8 CALL $DCA7      ;
 $E3FB RET Z           ;
 $E3FC LD IX,($A017)   ;
 $E400 LD IY,($A013)   ;
 $E404 LD A,($A034)    ;
 $E407 JP $DEE4        ;
 $E40A LD A,B          ;
 $E40B JR NZ,$E402     ;
 $E40D EX (SP),HL      ;
 $E40E SUB B           ;
 $E40F LD B,B          ;
 $E410 JR Z,$E412      ;
*$E412 NOP             ;
*$E413 LD IY,($A017)   ;
 $E417 LD A,($A034)    ;
 $E41A LD (IY+$01),A   ;
 $E41D OR $01          ;
 $E41F RET             ;
 $E420 CALL $CBA7      ;
 $E423 LD A,($A036)    ;
 $E426 LD HL,$A034     ;
 $E429 CALL $D278      ;
 $E42C JP NC,$DC15     ;
 $E42F OR $01          ;
 $E431 RET             ;
 $E432 LD A,B          ;
 $E433 JR NZ,$E455     ;
 $E435 CALL PO,$8010   ;
 $E438 JR Z,$E43A      ;
*$E43A NOP             ;
 $E43B LD IY,($A013)   ;
 $E43F LD A,(IY+$01)   ;
 $E442 LD IY,($A017)   ;
 $E446 LD (IY+$01),A   ;
 $E449 OR $01          ;
 $E44B RET             ;
 $E44C CALL $CBA7      ;
 $E44F JP $E28D        ;
 $E452 CALL PE,$4C00   ;
*$E455 CALL PO,$2F07   ;
 $E458 PUSH HL         ;
 $E459 LD A,(BC)       ;
 $E45A RST $38         ;
 $E45B LD B,A          ;
 $E45C ADC A,B         ;
 $E45D CALL PO,$FFFD   ;
 $E460 LD D,A          ;
 $E461 LD D,D          ;
 $E462 DEFB $DD        ;
 $E463 JP M,$6BFF      ;
 $E466 CALL PO,$8843   ;
 $E469 PUSH HL         ;
 $E46A DEC BC          ;
 $E46B RST $00         ;
 $E46C PUSH IY         ;
 $E46E DEFB $FD        ;
 $E46F RST $38         ;
 $E470 ADD A,C         ;
 $E471 CALL PO,$0DC1   ;
 $E474 ADD A,C         ;
 $E475 CALL PO,$8457   ;
 $E478 DEFB $DD        ;
 $E479 DEFB $FD        ;
 $E47A RST $38         ;
 $E47B ADD A,C         ;
 $E47C CALL PO,$0C42   ;
 $E47F JP M,$0FFF      ;
 $E482 JP $E57A        ;
 $E485 LD E,E          ;
 $E486 CALL PO,$270A   ;
 $E489 NOP             ;
 $E48A LD IX,($A013)   ;
 $E48E LD A,(IX+$0F)   ;
 $E491 LD ($9FD6),A    ;
 $E494 OR $01          ;
 $E496 RET             ;
 $E497 LD B,A          ;
 $E498 INC H           ;
 $E499 OR B            ;
 $E49A CALL PO,$353A   ;
 $E49D AND B           ;
 $E49E LD B,A          ;
 $E49F LD A,($A034)    ;
 $E4A2 LD IX,($A013)   ;
 $E4A6 LD (IX+$01),$FF ;
 $E4AA CALL $DD0E      ;
 $E4AD OR $01          ;
 $E4AF RET             ;
 $E4B0 LD IX,($A013)   ;
 $E4B4 BIT 6,(IX+$05)  ;
 $E4B8 JR Z,$E4C6      ;
 $E4BA LD A,(IX+$0F)   ;
 $E4BD CALL $D224      ;
 $E4C0 LD A,(IX+$09)   ;
 $E4C3 LD ($A033),A    ;
*$E4C6 OR $01          ;
 $E4C8 RET             ;
 $E4C9 INC B           ;
 $E4CA NOP             ;
 $E4CB LD HL,$9C56     ;
 $E4CE LD A,($A034)    ;
 $E4D1 PUSH AF         ;
 $E4D2 CP $02          ;
 $E4D4 JR Z,$E4DE      ;
 $E4D6 CP $03          ;
 $E4D8 JR Z,$E4DE      ;
 $E4DA CP $04          ;
 $E4DC JR NZ,$E4E7     ;
*$E4DE LD HL,$7611     ;
 $E4E1 CALL $A59F      ;
 $E4E4 LD HL,$9C60     ;
*$E4E7 LD A,($A036)    ;
 $E4EA PUSH AF         ;
 $E4EB CALL $E4FB      ;
 $E4EE POP AF          ;
 $E4EF POP BC          ;
*$E4F0 CALL $DD0E      ;
 $E4F3 LD HL,($DCFF)   ;
 $E4F6 RES 6,(HL)      ;
 $E4F8 OR $01          ;
 $E4FA RET             ;
*$E4FB JP (HL)         ;
 $E4FC LD A,($A034)    ;
 $E4FF CALL $E619      ;
 $E502 JP Z,$DC15      ;
 $E505 RET             ;
 $E506 XOR L           ;
 $E507 DEC C           ;
 $E508 RST $00         ;
 $E509 JR $E4F0        ;
 $E50B DEFB $FD        ;
 $E50C CALL M,$E510    ;
*$E50F LD A,(BC)       ;
*$E510 LD D,A          ;
 $E511 LD (HL),B       ;
 $E512 EX (SP),HL      ;
 $E513 DEFB $FD        ;
 $E514 CALL M,$E50F    ;
 $E517 DEC BC          ;
 $E518 LD L,L          ;
 $E519 DEC C           ;
 $E51A CALL M,$3EE4    ;
 $E51D CP $32          ;
 $E51F RST $10         ;
 $E520 SBC A,A         ;
 $E521 LD L,(IX+$09)   ;
 $E524 LD H,(IX+$0A)   ;
 $E527 SET 7,L         ;
 $E529 LD ($A02F),HL   ;
 $E52C OR $01          ;
 $E52E RET             ;
 $E52F RLCA            ;
 $E530 RLCA            ;
 $E531 LD A,$02        ;
 $E533 CALL $A11C      ;
 $E536 LD HL,($9FE5)   ;
 $E539 LD ($9FE5),IX   ;
 $E53D LD (IX-$02),L   ;
 $E540 LD (IX-$01),H   ;
 $E543 LD A,($A036)    ;
 $E546 LD (IX+$00),A   ;
 $E549 LD A,($A035)    ;
 $E54C LD B,$00        ;
 $E54E CP $FF          ;
 $E550 JR Z,$E556      ;
 $E552 CALL $D2A4      ;
 $E555 LD B,A          ;
*$E556 LD A,($A034)    ;
 $E559 ADD A,B         ;
 $E55A LD (IX+$01),A   ;
 $E55D OR $01          ;
 $E55F RET             ;
*$E560 LD IX,$9FE7     ;
*$E564 CALL $A0F7      ;
 $E567 RET Z           ;
 $E568 LD A,($A036)    ;
 $E56B CP (IX+$00)     ;
 $E56E JR NZ,$E564     ;
 $E570 OR $01          ;
 $E572 RET             ;
 $E573 CALL $E560      ;
 $E576 JP Z,$DC15      ;
 $E579 RET             ;
; This entry point is used by the routine at #R$E691.
*$E57A LD B,B          ;
 $E57B NOP             ;
 $E57C LD (HL),E       ;
 $E57D PUSH HL         ;
 $E57E DEC (IX+$01)    ;
 $E581 RET NZ          ;
 $E582 CALL $E58C      ;
 $E585 JP $DC15        ;
 $E588 LD B,B          ;
 $E589 NOP             ;
 $E58A LD (HL),E       ;
 $E58B PUSH HL         ;
*$E58C PUSH IX         ;
 $E58E POP DE          ;
 $E58F LD IY,$9FE5     ;
 $E593 CALL $A104      ;
 $E596 LD L,(IX-$02)   ;
 $E599 LD H,(IX-$01)   ;
 $E59C LD (IY-$02),L   ;
 $E59F LD (IY-$01),H   ;
 $E5A2 CALL $A1C7      ;
 $E5A5 OR $01          ;
 $E5A7 RET             ;
 $E5A8 NOP             ;
 $E5A9 DJNZ $E5A1      ;
 $E5AB LD BC,$4CC9     ;
 $E5AE INC B           ;
 $E5AF OR C            ;
 $E5B0 PUSH HL         ;
 $E5B1 LD IX,($A013)   ;
 $E5B5 LD A,($A035)    ;
 $E5B8 CP (IX+$0F)     ;
 $E5BB JP NZ,$DC15     ;
 $E5BE OR $01          ;
 $E5C0 RET             ;
 $E5C1 NOP             ;
 $E5C2 NOP             ;
 $E5C3 LD A,($9860)    ;
 $E5C6 CALL $D237      ;
 $E5C9 LD A,(IX+$0F)   ;
 $E5CC LD IX,($A017)   ;
 $E5D0 CP (IX+$0F)     ;
 $E5D3 LD A,($A036)    ;
 $E5D6 JR $E5F0        ;
 $E5D8 LD B,A          ;
 $E5D9 RLCA            ;
 $E5DA RST $18         ;
 $E5DB PUSH HL         ;
 $E5DC OR $01          ;
 $E5DE RET             ;
 $E5DF LD IX,($A013)   ;
 $E5E3 LD A,(IX+$0F)   ;
 $E5E6 LD IX,($A015)   ;
 $E5EA CP (IX+$0F)     ;
 $E5ED LD A,($A035)    ;
*$E5F0 JP NZ,$DC15     ;
 $E5F3 LD HL,$A034     ;
 $E5F6 CP (HL)         ;
 $E5F7 JP Z,$DC15      ;
 $E5FA OR $01          ;
 $E5FC RET             ;
 $E5FD LD B,A          ;
 $E5FE NOP             ;
 $E5FF INC B           ;
 $E600 AND $F6         ;
 $E602 LD BC,$3AC9     ;
 $E605 LD (HL),$A0     ;
 $E607 CALL $C863      ;
 $E60A EX AF,AF'       ;
 $E60B LD B,A          ;
 $E60C LD A,($A034)    ;
 $E60F CALL $C863      ;
 $E612 EX AF,AF'       ;
 $E613 CP B            ;
 $E614 LD A,($A036)    ;
 $E617 JR $E5F0        ;
; This entry point is used by the routine at #R$E691.
*$E619 LD C,A          ;
 $E61A LD B,$FF        ;
*$E61C INC B           ;
 $E61D LD A,B          ;
 $E61E CP $6E          ;
 $E620 RET Z           ;
 $E621 CALL $D237      ;
 $E624 LD A,(IX+$01)   ;
 $E627 CP C            ;
 $E628 JR NZ,$E61C     ;
 $E62A LD HL,$0575     ;
 $E62D LD A,(IX+$07)   ;
 $E630 CP L            ;
 $E631 JR NZ,$E61C     ;
 $E633 LD A,(IX+$08)   ;
 $E636 AND $0F         ;
 $E638 CP H            ;
 $E639 JR NZ,$E61C     ;
 $E63B OR $01          ;
 $E63D RET             ;
 $E63E LD B,B          ;
 $E63F NOP             ;
 $E640 LD B,D          ;
 $E641 AND $3A         ;
 $E643 LD (HL),$A0     ;
 $E645 CALL $E619      ;
 $E648 JP Z,$DC15      ;
 $E64B CALL $E39C      ;
 $E64E BIT 7,H         ;
 $E650 JP Z,$DC15      ;
 $E653 RET             ;
 $E654 LD B,B          ;
 $E655 NOP             ;
 $E656 LD E,B          ;
 $E657 AND $3A         ;
 $E659 LD (HL),$A0     ;
 $E65B CALL $E619      ;
 $E65E JP Z,$DC15      ;
 $E661 CALL $E39C      ;
 $E664 BIT 7,H         ;
 $E666 JP NZ,$DC15     ;
 $E669 LD A,H          ;
 $E66A OR L            ;
 $E66B JP Z,$DC15      ;
 $E66E RET             ;
 $E66F LD B,B          ;
 $E670 NOP             ;
 $E671 LD (HL),E       ;
 $E672 AND $3A         ;
 $E674 LD (HL),$A0     ;
 $E676 CALL $E619      ;
 $E679 JR Z,$E683      ;
 $E67B CALL $E39C      ;
 $E67E LD A,H          ;
 $E67F OR L            ;
 $E680 JP NZ,$DC15     ;
; This entry point is used by the routine at #R$F1C1.
*$E683 OR $01          ;
 $E685 RET             ;
; This entry point is used by the routine at #R$E691.
*$E686 CALL $D29D      ;
 $E689 CP $32          ;
 $E68B JP C,$DC15      ;
 $E68E OR $01          ;
 $E690 RET             ;

; Routine at E691
;
; Used by the routine at #R$9D13.
c$E691 CALL $E686      ;
 $E694 RET Z           ;
 $E695 CALL $D29D      ;
 $E698 LD B,A          ;
*$E699 LD IX,$9FF6     ;
*$E69D DJNZ $E6A6      ;
 $E69F CALL $A0F7      ;
 $E6A2 JR Z,$E699      ;
 $E6A4 JR $E69D        ;
*$E6A6 PUSH IX         ;
 $E6A8 POP HL          ;
 $E6A9 LD DE,$9FF6     ;
 $E6AC AND A           ;
 $E6AD SBC HL,DE       ;
 $E6AF JR Z,$E6B9      ;
 $E6B1 PUSH IX         ;
 $E6B3 LD HL,$6F80     ;
 $E6B6 CALL $A59F      ;
*$E6B9 OR $01          ;
 $E6BB RET             ;
 $E6BC DEC C           ;
 $E6BD INC C           ;
 $E6BE LD A,($A035)    ;
 $E6C1 CALL $E619      ;
 $E6C4 JR Z,$E6E3      ;
 $E6C6 LD E,(IX+$09)   ;
 $E6C9 LD D,(IX+$0A)   ;
 $E6CC LD HL,$6BB7     ;
 $E6CF CALL $A59F      ;
 $E6D2 LD HL,$0000     ;
 $E6D5 AND A           ;
 $E6D6 SBC HL,DE       ;
 $E6D8 CALL $A419      ;
 $E6DB LD A,$22        ;
 $E6DD CALL $A9B7      ;
 $E6E0 CALL $A2A2      ;
*$E6E3 OR $01          ;
 $E6E5 RET             ;
 $E6E6 LD C,L          ;
 $E6E7 NOP             ;
 $E6E8 OR $E6          ;
 $E6EA CALL $CFB6      ;
 $E6ED LD A,($A034)    ;
 $E6F0 LD (IX+$03),A   ;
 $E6F3 OR $01          ;
 $E6F5 RET             ;
 $E6F6 LD A,($A036)    ;
 $E6F9 LD HL,$A034     ;
 $E6FC CP (HL)         ;
 $E6FD JP Z,$DC15      ;
 $E700 DEC A           ;
 $E701 LD IX,($A013)   ;
 $E705 CP (IX+$01)     ;
 $E708 JP NZ,$DC15     ;
 $E70B OR $01          ;
 $E70D RET             ;
 $E70E NOP             ;
 $E70F NOP             ;
 $E710 LD A,($5C3C)    ;
 $E713 PUSH AF         ;
 $E714 CALL $CFB6      ;
 $E717 LD A,(IX+$03)   ;
 $E71A AND A           ;
 $E71B LD HL,$6C54     ;
 $E71E JR NZ,$E725     ;
 $E720 LD A,$01        ;
 $E722 LD ($5C3C),A    ;
*$E725 CALL $A59F      ;
 $E728 POP AF          ;
 $E729 LD ($5C3C),A    ;
 $E72C OR $01          ;
 $E72E RET             ;
 $E72F LD B,$EB        ;
 $E731 LD L,L          ;
 $E732 RLCA            ;
 $E733 CPL             ;
 $E734 PUSH HL         ;
 $E735 DEC C           ;
 $E736 INC B           ;
 $E737 INC DE          ;
 $E738 SBC A,D         ;
 $E739 RST $20         ;
 $E73A OR (HL)         ;
 $E73B RST $20         ;
 $E73C LD (DE),A       ;
 $E73D ADD A,C         ;
 $E73E NOP             ;
 $E73F EI              ;
 $E740 LD D,C          ;
 $E741 RST $20         ;
 $E742 LD B,$02        ;
 $E744 LD L,(HL)       ;
 $E745 RLCA            ;
 $E746 CPL             ;
 $E747 PUSH HL         ;
 $E748 RRCA            ;
 $E749 LD A,(BC)       ;
 $E74A SUB E           ;
 $E74B SBC A,D         ;
 $E74C RST $20         ;
 $E74D LD A,E          ;
 $E74E RST $20         ;
 $E74F OR (HL)         ;
 $E750 RST $20         ;
 $E751 RLCA            ;
 $E752 CPL             ;
 $E753 PUSH HL         ;
 $E754 RRCA            ;
 $E755 LD A,(BC)       ;
 $E756 INC BC          ;
 $E757 XOR B           ;
 $E758 PUSH HL         ;
 $E759 LD (DE),A       ;
 $E75A ADD A,E         ;
 $E75B EI              ;
 $E75C EX AF,AF'       ;
 $E75D OR (HL)         ;
 $E75E RST $20         ;
 $E75F RLA             ;
 $E760 JP PO,$19E7     ;
 $E763 RST $38         ;
 $E764 OR (HL)         ;
 $E765 RST $20         ;
 $E766 ADD A,D         ;
 $E767 ADD A,C         ;
 $E768 NOP             ;
 $E769 EI              ;
 $E76A LD (HL),E       ;
 $E76B RST $20         ;
 $E76C SUB E           ;
 $E76D LD A,D          ;
 $E76E PUSH HL         ;
 $E76F LD D,(HL)       ;
 $E770 RST $20         ;
 $E771 LD A,E          ;
 $E772 RST $20         ;
 $E773 LD B,$FC        ;
 $E775 LD L,(HL)       ;
 $E776 INC DE          ;
 $E777 SBC A,D         ;
 $E778 RST $20         ;
 $E779 OR (HL)         ;
 $E77A RST $20         ;
 $E77B LD (DE),A       ;
 $E77C ADD A,E         ;
 $E77D EI              ;
 $E77E EX AF,AF'       ;
 $E77F OR (HL)         ;
 $E780 RST $20         ;
 $E781 INC DE          ;
 $E782 POP BC          ;
 $E783 PUSH HL         ;
 $E784 ADC A,H         ;
 $E785 RST $20         ;
 $E786 INC BC          ;
 $E787 XOR B           ;
 $E788 PUSH HL         ;
 $E789 LD C,$7B        ;
 $E78B RST $20         ;
 $E78C LD (BC),A       ;
 $E78D ADD A,B         ;
 $E78E LD A,(DE)       ;
 $E78F EX AF,AF'       ;
 $E790 LD (BC),A       ;
 $E791 ADD A,B         ;
 $E792 EI              ;
 $E793 NOP             ;
 $E794 INC BC          ;
 $E795 XOR B           ;
 $E796 PUSH HL         ;
 $E797 LD C,$94        ;
 $E799 RST $20         ;
 $E79A ADD A,B         ;
 $E79B NOP             ;
 $E79C INC BC          ;
 $E79D XOR B           ;
 $E79E PUSH HL         ;
 $E79F LD (DE),A       ;
 $E7A0 ADD A,E         ;
 $E7A1 EI              ;
 $E7A2 EX AF,AF'       ;
 $E7A3 OR D            ;
 $E7A4 RST $20         ;
 $E7A5 RLA             ;
 $E7A6 JP PO,$19E7     ;
 $E7A9 RST $38         ;
 $E7AA OR D            ;
 $E7AB RST $20         ;
 $E7AC ADD A,E         ;
 $E7AD LD A,D          ;
 $E7AE PUSH HL         ;
 $E7AF SBC A,H         ;
 $E7B0 RST $20         ;
 $E7B1 DEC BC          ;
 $E7B2 INC BC          ;
 $E7B3 ADC A,B         ;
 $E7B4 PUSH HL         ;
 $E7B5 LD A,(BC)       ;
 $E7B6 INC BC          ;
 $E7B7 ADC A,B         ;
 $E7B8 PUSH HL         ;
 $E7B9 RLCA            ;
 $E7BA ADC A,B         ;
 $E7BB CALL PO,$FF00   ;
 $E7BE ADD A,A         ;
 $E7BF LD D,D          ;
 $E7C0 DEFB $DD        ;
 $E7C1 JP M,$B9FF      ;
 $E7C4 RST $20         ;
 $E7C5 ADD A,D         ;
 $E7C6 ADD A,D         ;
 $E7C7 NOP             ;
 $E7C8 RST $38         ;
 $E7C9 CP C            ;
 $E7CA RST $20         ;
 $E7CB ADD A,C         ;
 $E7CC DEC C           ;
 $E7CD CP C            ;
 $E7CE RST $20         ;
 $E7CF RLA             ;
 $E7D0 ADD A,H         ;
 $E7D1 DEFB $DD        ;
 $E7D2 NOP             ;
 $E7D3 RST $38         ;
 $E7D4 CP C            ;
 $E7D5 RST $20         ;
 $E7D6 ADD A,D         ;
 $E7D7 INC C           ;
 $E7D8 JP M,$B9FF      ;
 $E7DB RST $20         ;
 $E7DC INC BC          ;
 $E7DD XOR B           ;
 $E7DE PUSH HL         ;
 $E7DF LD C,$B9        ;
 $E7E1 RST $20         ;
 $E7E2 LD A,(BC)       ;
 $E7E3 NOP             ;
 $E7E4 OR $01          ;
 $E7E6 RET             ;
 $E7E7 LD B,C          ;
 $E7E8 INC B           ;
 $E7E9 LD B,E          ;
 $E7EA LD (HL),D       ;
 $E7EB EX DE,HL        ;
 $E7EC LD B,L          ;
 $E7ED INC B           ;
 $E7EE JR $E859        ;
 $E7F0 LD C,B          ;
 $E7F1 INC B           ;
 $E7F2 LD E,C          ;
 $E7F3 INC B           ;
 $E7F4 JP P,$45E7      ;
 $E7F7 INC B           ;
 $E7F8 LD H,E          ;
 $E7F9 LD (HL),C       ;
 $E7FA LD C,B          ;
 $E7FB INC B           ;
 $E7FC LD E,C          ;
 $E7FD INC B           ;
 $E7FE CALL M,$45E7    ;
 $E801 INC B           ;
 $E802 LD (HL),L       ;
 $E803 LD (HL),C       ;
 $E804 LD C,B          ;
 $E805 INC B           ;
 $E806 LD B,D          ;
 $E807 ADD A,(HL)      ;
 $E808 INC B           ;
 $E809 LD E,B          ;
 $E80A LD B,D          ;
 $E80B INC DE          ;
 $E80C LD L,$FF        ;
 $E80E LD B,D          ;
 $E80F INC DE          ;
 $E810 CPL             ;
 $E811 RST $38         ;
 $E812 LD B,D          ;
 $E813 INC DE          ;
 $E814 ADD HL,SP       ;
 $E815 RST $38         ;
 $E816 LD B,C          ;
 $E817 INC B           ;
 $E818 LD B,D          ;
 $E819 INC DE          ;
 $E81A ADD HL,SP       ;
 $E81B RST $38         ;
 $E81C LD B,C          ;
 $E81D INC BC          ;
 $E81E LD B,L          ;
 $E81F INC B           ;
 $E820 LD D,B          ;
 $E821 LD (HL),C       ;
 $E822 LD C,B          ;
 $E823 INC B           ;
 $E824 LD E,C          ;
 $E825 INC B           ;
 $E826 INC H           ;
 $E827 RET PE          ;
 $E828 LD B,D          ;
 $E829 ADC A,C         ;
 $E82A RLCA            ;
 $E82B DEC SP          ;
 $E82C LD B,D          ;
 $E82D ADC A,C         ;
 $E82E INC BC          ;
 $E82F LD A,($8942)    ;
 $E832 LD BC,$413A     ;
 $E835 DEC B           ;
 $E836 LD B,D          ;
 $E837 ADC A,C         ;
 $E838 LD BC,$414B     ;
 $E83B LD BC,$0141     ;
 $E83E LD B,C          ;
 $E83F LD B,$41        ;
 $E841 LD BC,$0441     ;
 $E844 LD B,C          ;
 $E845 EX AF,AF'       ;
 $E846 LD B,C          ;
 $E847 LD (BC),A       ;
 $E848 LD B,D          ;
 $E849 ADC A,C         ;
 $E84A RLCA            ;
 $E84B DEC SP          ;
 $E84C LD B,C          ;
 $E84D EX AF,AF'       ;
 $E84E LD B,C          ;
 $E84F INC BC          ;
 $E850 LD B,L          ;
 $E851 INC B           ;
 $E852 ADC A,C         ;
 $E853 LD (HL),C       ;
 $E854 LD C,B          ;
 $E855 INC B           ;
 $E856 LD B,D          ;
 $E857 ADD A,(HL)      ;
 $E858 INC B           ;
*$E859 LD B,E          ;
*$E85A RRCA            ;
 $E85B LD B,H          ;
 $E85C DEC B           ;
 $E85D JR NC,$E85A     ;
 $E85F DJNZ $E870      ;
 $E861 LD B,H          ;
 $E862 LD B,$2F        ;
 $E864 EI              ;
 $E865 LD DE,$0F0F     ;
 $E868 LD B,(HL)       ;
 $E869 LD H,$71        ;
 $E86B LD B,L          ;
 $E86C INC B           ;
 $E86D AND H           ;
 $E86E LD (HL),C       ;
 $E86F LD C,B          ;
*$E870 INC B           ;
 $E871 LD B,D          ;
 $E872 ADD A,(HL)      ;
 $E873 INC B           ;
*$E874 LD B,C          ;
 $E875 LD B,H          ;
 $E876 EX AF,AF'       ;
 $E877 JR NC,$E874     ;
 $E879 DJNZ $E88A      ;
 $E87B LD B,H          ;
 $E87C LD A,(BC)       ;
 $E87D JR NC,$E87A     ;
 $E87F DJNZ $E890      ;
 $E881 LD B,H          ;
 $E882 ADD HL,BC       ;
 $E883 CPL             ;
 $E884 EI              ;
 $E885 DJNZ $E896      ;
 $E887 RRCA            ;
 $E888 LD B,(HL)       ;
 $E889 LD H,$71        ;
 $E88B LD B,L          ;
 $E88C INC B           ;
 $E88D OR A            ;
 $E88E LD (HL),C       ;
 $E88F LD C,B          ;
*$E890 INC B           ;
 $E891 LD B,D          ;
 $E892 ADD A,(HL)      ;
 $E893 INC B           ;
 $E894 LD E,(HL)       ;
 $E895 LD B,D          ;
*$E896 INC DE          ;
 $E897 LD C,B          ;
 $E898 RST $38         ;
 $E899 LD B,D          ;
 $E89A INC DE          ;
 $E89B LD B,A          ;
 $E89C RST $38         ;
 $E89D LD B,D          ;
 $E89E INC DE          ;
 $E89F LD B,D          ;
 $E8A0 RST $38         ;
 $E8A1 LD D,D          ;
 $E8A2 INC E           ;
 $E8A3 LD B,D          ;
 $E8A4 RST $38         ;
 $E8A5 XOR E           ;
 $E8A6 RET PE          ;
 $E8A7 LD B,D          ;
 $E8A8 INC DE          ;
 $E8A9 LD B,E          ;
 $E8AA RST $38         ;
 $E8AB LD B,D          ;
 $E8AC INC E           ;
 $E8AD LD B,D          ;
 $E8AE RST $38         ;
 $E8AF LD C,B          ;
 $E8B0 INC B           ;
 $E8B1 LD B,E          ;
 $E8B2 LD B,A          ;
 $E8B3 EX DE,HL        ;
 $E8B4 LD C,B          ;
 $E8B5 RLCA            ;
 $E8B6 RRCA            ;
 $E8B7 LD B,C          ;
 $E8B8 LD BC,$0B45     ;
 $E8BB LD (DE),A       ;
 $E8BC LD (HL),C       ;
 $E8BD LD C,B          ;
 $E8BE DEC BC          ;
 $E8BF LD C,B          ;
 $E8C0 RLCA            ;
 $E8C1 LD E,C          ;
 $E8C2 RLCA            ;
 $E8C3 POP BC          ;
 $E8C4 RET PE          ;
 $E8C5 LD B,L          ;
 $E8C6 RLCA            ;
 $E8C7 DEC E           ;
 $E8C8 LD (HL),C       ;
 $E8C9 LD B,E          ;
 $E8CA RLA             ;
 $E8CB DEFB $ED,$0F    ;
 $E8CD LD B,H          ;
 $E8CE INC B           ;
 $E8CF JR NC,$E8D8     ;
 $E8D1 RRCA            ;
*$E8D2 RRCA            ;
 $E8D3 LD B,H          ;
 $E8D4 RLCA            ;
 $E8D5 JR NC,$E8D2     ;
 $E8D7 LD DE,$0F0F     ;
 $E8DA LD B,H          ;
 $E8DB RLCA            ;
 $E8DC CPL             ;
 $E8DD EI              ;
 $E8DE LD (DE),A       ;
 $E8DF RRCA            ;
 $E8E0 RRCA            ;
 $E8E1 LD B,H          ;
 $E8E2 RLCA            ;
 $E8E3 DEC D           ;
 $E8E4 EI              ;
 $E8E5 RST $38         ;
 $E8E6 LD B,D          ;
 $E8E7 ADD A,A         ;
 $E8E8 LD B,H          ;
 $E8E9 RST $38         ;
 $E8EA LD B,(HL)       ;
 $E8EB LD H,$71        ;
 $E8ED LD B,D          ;
 $E8EE ADD A,A         ;
 $E8EF LD B,L          ;
 $E8F0 RST $38         ;
 $E8F1 LD B,D          ;
 $E8F2 ADD A,A         ;
 $E8F3 INC DE          ;
 $E8F4 RST $38         ;
 $E8F5 LD B,C          ;
 $E8F6 LD BC,$0B45     ;
 $E8F9 ADD HL,SP       ;
 $E8FA LD (HL),C       ;
 $E8FB LD B,L          ;
 $E8FC INC B           ;
 $E8FD AND H           ;
 $E8FE LD (HL),C       ;
 $E8FF LD C,B          ;
 $E900 INC B           ;
 $E901 LD B,D          ;
 $E902 ADD A,(HL)      ;
 $E903 INC B           ;
*$E904 LD B,C          ;
 $E905 LD B,H          ;
 $E906 ADD HL,BC       ;
 $E907 JR NC,$E904     ;
 $E909 RLCA            ;
*$E90A RRCA            ;
 $E90B LD B,H          ;
 $E90C EX AF,AF'       ;
 $E90D JR NC,$E90A     ;
 $E90F RLCA            ;
 $E910 RRCA            ;
 $E911 LD B,L          ;
 $E912 INC B           ;
 $E913 ADC A,C         ;
 $E914 LD (HL),C       ;
 $E915 LD C,B          ;
 $E916 INC B           ;
 $E917 LD B,D          ;
 $E918 ADD A,(HL)      ;
 $E919 INC B           ;
 $E91A LD B,E          ;
*$E91B RRCA            ;
 $E91C LD B,H          ;
 $E91D DEC B           ;
 $E91E JR NC,$E91B     ;
 $E920 RLCA            ;
 $E921 RRCA            ;
 $E922 LD B,L          ;
 $E923 INC B           ;
 $E924 EX AF,AF'       ;
 $E925 LD (HL),B       ;
 $E926 LD C,B          ;
 $E927 INC B           ;
 $E928 LD B,D          ;
 $E929 ADD A,(HL)      ;
 $E92A INC B           ;
 $E92B LD E,H          ;
 $E92C LD B,L          ;
 $E92D INC B           ;
 $E92E INC (HL)        ;
 $E92F LD (HL),B       ;
 $E930 LD C,B          ;
 $E931 INC B           ;
 $E932 INC BC          ;
 $E933 LD L,D          ;
 $E934 SBC A,(HL)      ;
 $E935 LD B,C          ;
 $E936 INC B           ;
 $E937 LD B,C          ;
 $E938 LD BC,$2843     ;
 $E93B EX DE,HL        ;
 $E93C RRCA            ;
 $E93D JP NZ,$FB81     ;
 $E940 NOP             ;
 $E941 LD C,C          ;
 $E942 JP (HL)         ;
 $E943 EXX             ;
 $E944 RLCA            ;
 $E945 LD D,C          ;
 $E946 JP (HL)         ;
 $E947 INC A           ;
 $E948 JP (HL)         ;
 $E949 LD B,L          ;
 $E94A NOP             ;
 $E94B JR NZ,$E9BD     ;
 $E94D LD E,C          ;
 $E94E RLCA            ;
 $E94F LD C,L          ;
 $E950 JP (HL)         ;
 $E951 LD B,D          ;
 $E952 ADD A,B         ;
 $E953 EI              ;
 $E954 NOP             ;
 $E955 ADD A,D         ;
 $E956 ADD A,C         ;
 $E957 NOP             ;
 $E958 RLCA            ;
 $E959 LD H,C          ;
 $E95A JP (HL)         ;
 $E95B LD (DE),A       ;
 $E95C ADC A,B         ;
 $E95D LD BC,$55FF     ;
 $E960 JP (HL)         ;
 $E961 LD (BC),A       ;
 $E962 ADD A,B         ;
 $E963 EI              ;
 $E964 INC C           ;
 $E965 LD D,D          ;
 $E966 ADD A,C         ;
 $E967 EI              ;
 $E968 RLCA            ;
 $E969 LD H,L          ;
 $E96A JP (HL)         ;
 $E96B INC BC          ;
 $E96C ADD A,L         ;
 $E96D SBC A,(HL)      ;
 $E96E LD B,L          ;
 $E96F RLCA            ;
 $E970 LD (HL),L       ;
 $E971 LD (HL),B       ;
 $E972 LD C,B          ;
 $E973 RLCA            ;
 $E974 LD B,A          ;
 $E975 AND H           ;
 $E976 EX DE,HL        ;
 $E977 RST $38         ;
 $E978 LD A,(BC)       ;
 $E979 LD B,D          ;
 $E97A ADD A,B         ;
 $E97B EI              ;
 $E97C DEC BC          ;
 $E97D LD B,D          ;
 $E97E ADD A,B         ;
 $E97F EI              ;
 $E980 NOP             ;
 $E981 LD D,D          ;
 $E982 ADC A,B         ;
 $E983 RLCA            ;
 $E984 RST $38         ;
 $E985 ADD A,C         ;
 $E986 JP (HL)         ;
 $E987 LD B,D          ;
 $E988 ADD A,B         ;
 $E989 EI              ;
 $E98A DEC BC          ;
 $E98B LD B,C          ;
 $E98C INC B           ;
 $E98D LD C,B          ;
 $E98E INC B           ;
 $E98F LD B,E          ;
 $E990 LD (HL),D       ;
 $E991 EX DE,HL        ;
 $E992 LD B,H          ;
 $E993 INC B           ;
 $E994 JR NZ,$E995     ;
 $E996 RST $38         ;
 $E997 LD B,E          ;
 $E998 OR $EC          ;
 $E99A JP NZ,$0A88     ;
 $E99D RST $38         ;
 $E99E IN A,($E9)      ;
 $E9A0 RST $00         ;
 $E9A1 JP PO,$5DE7     ;
 $E9A4 RST $38         ;
 $E9A5 IN A,($E9)      ;
 $E9A7 LD D,A          ;
 $E9A8 SBC A,B         ;
 $E9A9 POP AF          ;
 $E9AA LD A,(BC)       ;
 $E9AB RST $38         ;
 $E9AC OR L            ;
 $E9AD JP (HL)         ;
 $E9AE LD B,D          ;
 $E9AF INC DE          ;
 $E9B0 ADD HL,SP       ;
 $E9B1 RST $38         ;
 $E9B2 LD C,$9A        ;
 $E9B4 JP (HL)         ;
 $E9B5 LD D,A          ;
 $E9B6 SBC A,B         ;
 $E9B7 POP AF          ;
 $E9B8 LD A,(BC)       ;
 $E9B9 RST $38         ;
 $E9BA JP $42E9        ;
*$E9BD INC DE          ;
 $E9BE DEC SP          ;
 $E9BF RST $38         ;
 $E9C0 LD C,$9A        ;
 $E9C2 JP (HL)         ;
 $E9C3 LD D,A          ;
 $E9C4 SBC A,B         ;
 $E9C5 POP AF          ;
 $E9C6 LD A,(BC)       ;
 $E9C7 RST $38         ;
 $E9C8 RST $08         ;
 $E9C9 JP (HL)         ;
 $E9CA LD B,C          ;
 $E9CB INC B           ;
 $E9CC LD C,$9A        ;
 $E9CE JP (HL)         ;
 $E9CF LD D,A          ;
 $E9D0 SBC A,B         ;
 $E9D1 POP AF          ;
 $E9D2 LD A,(BC)       ;
 $E9D3 RST $38         ;
 $E9D4 SBC A,D         ;
 $E9D5 JP (HL)         ;
 $E9D6 LD B,C          ;
 $E9D7 INC BC          ;
 $E9D8 LD C,$9A        ;
 $E9DA JP (HL)         ;
 $E9DB LD B,E          ;
 $E9DC INC C           ;
 $E9DD OUT (C),B       ;
 $E9DF LD BC,$0341     ;
 $E9E2 LD B,C          ;
 $E9E3 INC BC          ;
 $E9E4 LD B,E          ;
 $E9E5 RLA             ;
 $E9E6 SBC HL,BC       ;
 $E9E8 INC DE          ;
 $E9E9 LD B,D          ;
 $E9EA RST $38         ;
 $E9EB LD B,D          ;
 $E9EC INC DE          ;
 $E9ED LD B,A          ;
 $E9EE RST $38         ;
 $E9EF LD D,D          ;
 $E9F0 INC E           ;
 $E9F1 LD B,D          ;
 $E9F2 RST $38         ;
 $E9F3 LD SP,HL        ;
 $E9F4 JP (HL)         ;
 $E9F5 LD B,D          ;
 $E9F6 INC DE          ;
 $E9F7 LD B,E          ;
*$E9F8 RST $38         ;
 $E9F9 LD B,D          ;
 $E9FA INC E           ;
 $E9FB LD B,D          ;
 $E9FC RST $38         ;
 $E9FD LD B,E          ;
 $E9FE LD B,A          ;
 $E9FF EX DE,HL        ;
 $EA00 LD B,C          ;
 $EA01 LD BC,$0441     ;
 $EA04 LD B,C          ;
 $EA05 LD BC,$0445     ;
 $EA08 SUB B           ;
 $EA09 LD L,A          ;
 $EA0A LD B,E          ;
 $EA0B JR Z,$E9F8      ;
 $EA0D LD B,D          ;
 $EA0E ADD A,B         ;
 $EA0F LD E,L          ;
 $EA10 NOP             ;
 $EA11 LD D,D          ;
 $EA12 ADC A,B         ;
 $EA13 DEC D           ;
 $EA14 RST $38         ;
 $EA15 LD DE,$42EA     ;
 $EA18 ADD A,B         ;
 $EA19 EI              ;
 $EA1A NOP             ;
 $EA1B LD D,D          ;
 $EA1C ADC A,B         ;
 $EA1D RLCA            ;
 $EA1E RST $38         ;
 $EA1F DEC DE          ;
 $EA20 JP PE,$8042     ;
 $EA23 EI              ;
 $EA24 DEC BC          ;
 $EA25 RRCA            ;
 $EA26 JP NZ,$1588     ;
 $EA29 RST $38         ;
 $EA2A XOR C           ;
 $EA2B JP PE,$1953     ;
 $EA2E EX DE,HL        ;
 $EA2F DEC H           ;
 $EA30 JP PE,$11C3     ;
 $EA33 EX DE,HL        ;
 $EA34 LD E,E          ;
 $EA35 JP PE,$88C2     ;
 $EA38 DEC D           ;
 $EA39 RST $38         ;
 $EA3A XOR C           ;
 $EA3B JP PE,$C20F     ;
 $EA3E ADD A,C         ;
 $EA3F EI              ;
 $EA40 NOP             ;
 $EA41 LD SP,$C3EA     ;
 $EA44 LD DE,$5BEB     ;
 $EA47 JP PE,$88C2     ;
 $EA4A DEC D           ;
 $EA4B RST $38         ;
 $EA4C XOR C           ;
 $EA4D JP PE,$520F     ;
 $EA50 ADD A,C         ;
 $EA51 EI              ;
 $EA52 NOP             ;
 $EA53 LD B,E          ;
 $EA54 JP PE,$00C5     ;
 $EA57 RET NZ          ;
 $EA58 LD (HL),B       ;
 $EA59 LD SP,$41EA     ;
 $EA5C INC B           ;
 $EA5D LD C,B          ;
 $EA5E INC B           ;
 $EA5F LD B,A          ;
 $EA60 OR $EA          ;
 $EA62 LD L,L          ;
 $EA63 DEC BC          ;
 $EA64 LD B,E          ;
 $EA65 LD (HL),D       ;
 $EA66 EX DE,HL        ;
 $EA67 LD B,C          ;
 $EA68 LD (BC),A       ;
 $EA69 LD B,D          ;
 $EA6A INC C           ;
 $EA6B LD L,L          ;
 $EA6C RST $38         ;
 $EA6D LD B,H          ;
 $EA6E DEC BC          ;
 $EA6F LD E,$67        ;
 $EA71 RST $38         ;
 $EA72 LD D,D          ;
 $EA73 ADD A,E         ;
 $EA74 EI              ;
 $EA75 LD H,A          ;
 $EA76 LD (HL),D       ;
 $EA77 JP PE,$8252     ;
 $EA7A NOP             ;
 $EA7B RST $38         ;
 $EA7C ADD A,H         ;
 $EA7D JP PE,$83C2     ;
 $EA80 LD B,$67        ;
 $EA82 OR (HL)         ;
 $EA83 JP PE,$0B44     ;
 $EA86 DEC E           ;
 $EA87 LD ($52FF),A    ;
 $EA8A ADD A,E         ;
 $EA8B EI              ;
 $EA8C LD ($EA89),A    ;
 $EA8F LD B,D          ;
 $EA90 DEC C           ;
 $EA91 LD L,L          ;
 $EA92 RST $38         ;
 $EA93 LD B,C          ;
 $EA94 LD BC,$2843     ;
 $EA97 EX DE,HL        ;
 $EA98 RRCA            ;
 $EA99 ADD A,D         ;
 $EA9A ADD A,C         ;
 $EA9B EI              ;
 $EA9C NOP             ;
 $EA9D AND L           ;
 $EA9E JP PE,$8852     ;
 $EAA1 LD D,$FF        ;
 $EAA3 SBC A,B         ;
 $EAA4 JP PE,$0045     ;
 $EAA7 RST $00         ;
 $EAA8 LD (HL),B       ;
 $EAA9 LD B,D          ;
 $EAAA ADD A,B         ;
 $EAAB EI              ;
 $EAAC NOP             ;
 $EAAD LD D,D          ;
 $EAAE ADC A,B         ;
 $EAAF LD A,(BC)       ;
 $EAB0 RST $38         ;
 $EAB1 XOR L           ;
 $EAB2 JP PE,$A203     ;
 $EAB5 SBC A,(HL)      ;
 $EAB6 RRCA            ;
 $EAB7 LD B,H          ;
 $EAB8 DEC BC          ;
 $EAB9 LD E,$32        ;
 $EABB RST $38         ;
 $EABC LD D,D          ;
 $EABD ADD A,E         ;
 $EABE EI              ;
 $EABF LD ($EABC),A    ;
 $EAC2 LD B,D          ;
 $EAC3 DEC C           ;
 $EAC4 LD L,L          ;
 $EAC5 RST $38         ;
 $EAC6 LD B,C          ;
 $EAC7 LD BC,$0141     ;
 $EACA LD B,C          ;
 $EACB LD BC,$0045     ;
 $EACE RST $00         ;
 $EACF LD (HL),B       ;
 $EAD0 ADD A,D         ;
 $EAD1 ADD A,C         ;
 $EAD2 EI              ;
 $EAD3 LD HL,($EA95)   ;
 $EAD6 ADD A,D         ;
 $EAD7 ADD A,C         ;
 $EAD8 EI              ;
 $EAD9 DEC HL          ;
 $EADA SUB L           ;
 $EADB JP PE,$8382     ;
 $EADE EI              ;
 $EADF SCF             ;
 $EAE0 RET NC          ;
 $EAE1 JP PE,$8602     ;
 $EAE4 NOP             ;
 $EAE5 LD E,$41        ;
 $EAE7 INC B           ;
 $EAE8 LD B,C          ;
 $EAE9 INC B           ;
 $EAEA RLCA            ;
 $EAEB AND H           ;
 $EAEC EX DE,HL        ;
 $EAED RST $38         ;
 $EAEE LD A,(BC)       ;
 $EAEF LD B,D          ;
 $EAF0 ADD A,B         ;
 $EAF1 EI              ;
 $EAF2 DEC BC          ;
 $EAF3 LD C,$98        ;
 $EAF5 JP PE,$0707     ;
 $EAF8 LD A,($A034)    ;
 $EAFB LD IX,($A015)   ;
 $EAFF LD (IX+$01),A   ;
 $EB02 LD (IX+$0F),$32 ;
 $EB06 LD IX,($A013)   ;
 $EB0A LD (IX+$0F),$32 ;
 $EB0E OR $01          ;
 $EB10 RET             ;
 $EB11 NOP             ;
 $EB12 NOP             ;
 $EB13 LD IX,$99A9     ;
 $EB17 JR $EB1F        ;
 $EB19 NOP             ;
 $EB1A NOP             ;
 $EB1B LD IX,$9997     ;
*$EB1F LD HL,$0000     ;
 $EB22 AND A           ;
 $EB23 BIT 1,(IX+$03)  ;
 $EB27 RET             ;
 $EB28 ADD A,B         ;
 $EB29 NOP             ;
 $EB2A LD B,C          ;
 $EB2B LD BC,$0141     ;
 $EB2E LD B,A          ;
 $EB2F POP HL          ;
 $EB30 EX DE,HL        ;
 $EB31 RLA             ;
 $EB32 RST $38         ;
 $EB33 LD B,C          ;
 $EB34 EX AF,AF'       ;
 $EB35 LD B,C          ;
 $EB36 EX AF,AF'       ;
 $EB37 LD B,C          ;
 $EB38 EX AF,AF'       ;
 $EB39 LD B,C          ;
 $EB3A EX AF,AF'       ;
 $EB3B LD B,C          ;
 $EB3C EX AF,AF'       ;
 $EB3D LD B,A          ;
 $EB3E AND H           ;
 $EB3F EX DE,HL        ;
 $EB40 RST $38         ;
 $EB41 LD A,(BC)       ;
 $EB42 LD B,D          ;
 $EB43 ADD A,B         ;
 $EB44 EI              ;
 $EB45 DEC BC          ;
 $EB46 DEC BC          ;
 $EB47 ADD A,B         ;
 $EB48 NOP             ;
 $EB49 LD B,D          ;
 $EB4A ADD A,A         ;
 $EB4B LD B,H          ;
 $EB4C RST $38         ;
 $EB4D LD B,D          ;
 $EB4E ADD A,A         ;
 $EB4F LD B,L          ;
 $EB50 RST $38         ;
 $EB51 LD B,D          ;
 $EB52 ADD A,A         ;
 $EB53 LD SP,$42FF     ;
 $EB56 ADD A,A         ;
 $EB57 LD ($42FF),A    ;
 $EB5A ADD A,A         ;
 $EB5B LD ($42FF),A    ;
 $EB5E ADD A,A         ;
 $EB5F LD SP,$41FF     ;
 $EB62 ADD HL,BC       ;
 $EB63 LD B,D          ;
 $EB64 ADD A,A         ;
 $EB65 LD B,(HL)       ;
 $EB66 RST $38         ;
 $EB67 LD B,D          ;
 $EB68 ADD A,A         ;
 $EB69 LD B,(HL)       ;
 $EB6A RST $38         ;
 $EB6B LD B,C          ;
 $EB6C LD A,(BC)       ;
 $EB6D LD B,D          ;
 $EB6E ADD A,A         ;
 $EB6F INC DE          ;
 $EB70 RST $38         ;
 $EB71 DEC BC          ;
 $EB72 ADD A,B         ;
 $EB73 NOP             ;
 $EB74 LD B,A          ;
 $EB75 AND H           ;
 $EB76 EX DE,HL        ;
 $EB77 RST $38         ;
 $EB78 LD (DE),A       ;
 $EB79 LD B,C          ;
 $EB7A DEC B           ;
 $EB7B LD B,C          ;
 $EB7C DEC B           ;
 $EB7D LD B,C          ;
 $EB7E DEC B           ;
 $EB7F LD B,C          ;
 $EB80 DEC B           ;
 $EB81 LD B,A          ;
 $EB82 POP HL          ;
 $EB83 EX DE,HL        ;
 $EB84 LD (HL),$FF     ;
 $EB86 LD B,D          ;
 $EB87 ADD A,B         ;
 $EB88 EI              ;
 $EB89 DEC (HL)        ;
 $EB8A DEC BC          ;
 $EB8B ADC A,H         ;
 $EB8C INC B           ;
 $EB8D JP NZ,$FB83     ;
 $EB90 CALL M,$EB9A    ;
 $EB93 LD B,D          ;
 $EB94 DEC D           ;
 $EB95 DEFB $FD        ;
 $EB96 RST $38         ;
 $EB97 LD C,$8D        ;
 $EB99 EX DE,HL        ;
*$EB9A DEC BC          ;
 $EB9B ADD A,A         ;
 $EB9C RLCA            ;
 $EB9D LD B,C          ;
 $EB9E DEFB $FD        ;
 $EB9F LD B,D          ;
 $EBA0 INC DE          ;
 $EBA1 CALL M,$0BFF    ;
 $EBA4 ADD A,B         ;
 $EBA5 INC B           ;
 $EBA6 LD D,C          ;
 $EBA7 RRA             ;
 $EBA8 AND (HL)        ;
 $EBA9 EX DE,HL        ;
 $EBAA LD B,A          ;
 $EBAB PUSH DE         ;
 $EBAC EX DE,HL        ;
 $EBAD DEFB $FD        ;
 $EBAE RST $38         ;
 $EBAF JP NZ,$FA82     ;
 $EBB2 RST $38         ;
 $EBB3 RET NZ          ;
 $EBB4 EX DE,HL        ;
 $EBB5 LD D,D          ;
 $EBB6 INC C           ;
 $EBB7 DEFB $FD        ;
 $EBB8 RST $38         ;
 $EBB9 XOR D           ;
 $EBBA EX DE,HL        ;
 $EBBB LD B,A          ;
 $EBBC PUSH DE         ;
 $EBBD EX DE,HL        ;
 $EBBE DEFB $FD        ;
 $EBBF RST $38         ;
 $EBC0 LD B,H          ;
 $EBC1 JP M,$FC1D      ;
 $EBC4 RST $38         ;
*$EBC5 LD D,D          ;
 $EBC6 ADD A,E         ;
 $EBC7 EI              ;
 $EBC8 CALL M,$EBC5    ;
 $EBCB LD B,A          ;
 $EBCC LD B,$E5        ;
 $EBCE EI              ;
 $EBCF JP M,$0D42      ;
 $EBD2 DEFB $FD        ;
 $EBD3 RST $38         ;
 $EBD4 DEC BC          ;
 $EBD5 RLCA            ;
 $EBD6 NOP             ;
 $EBD7 LD A,($A034)    ;
 $EBDA INC A           ;
 $EBDB LD ($9FD6),A    ;
 $EBDE OR $01          ;
 $EBE0 RET             ;
 $EBE1 ADD A,H         ;
 $EBE2 NOP             ;
 $EBE3 JP NZ,$FB81     ;
 $EBE6 LD HL,($EBEF)   ;
 $EBE9 LD D,D          ;
 $EBEA ADD A,C         ;
 $EBEB EI              ;
 $EBEC DEC HL          ;
 $EBED EX (SP),HL      ;
 $EBEE EX DE,HL        ;
 $EBEF LD B,C          ;
 $EBF0 INC C           ;
 $EBF1 LD D,D          ;
 $EBF2 ADD A,E         ;
 $EBF3 EI              ;
 $EBF4 DEFB $FD        ;
 $EBF5 POP AF          ;
 $EBF6 EX DE,HL        ;
 $EBF7 LD B,C          ;
 $EBF8 DEC C           ;
 $EBF9 DEC BC          ;
 $EBFA LD E,C          ;
 $EBFB LD (BC),A       ;
 $EBFC JP M,$45EB      ;
 $EBFF LD (BC),A       ;
 $EC00 ADD HL,HL       ;
 $EC01 LD (HL),E       ;
 $EC02 LD C,B          ;
 $EC03 LD (BC),A       ;
 $EC04 LD E,C          ;
 $EC05 LD (BC),A       ;
 $EC06 INC B           ;
 $EC07 CALL PE,$0245   ;
 $EC0A LD (HL),C       ;
 $EC0B LD (HL),E       ;
 $EC0C LD C,B          ;
 $EC0D LD (BC),A       ;
 $EC0E LD E,C          ;
 $EC0F LD (BC),A       ;
 $EC10 LD C,$EC        ;
 $EC12 RLCA            ;
 $EC13 OR $EC          ;
 $EC15 RST $38         ;
 $EC16 RST $38         ;
 $EC17 LD B,L          ;
 $EC18 LD (BC),A       ;
 $EC19 LD C,A          ;
 $EC1A LD (HL),A       ;
 $EC1B LD E,C          ;
 $EC1C LD (BC),A       ;
 $EC1D DEC DE          ;
 $EC1E CALL PE,$0245   ;
 $EC21 ADD HL,DE       ;
 $EC22 LD (HL),E       ;
 $EC23 LD C,B          ;
 $EC24 LD (BC),A       ;
 $EC25 LD E,C          ;
 $EC26 LD (BC),A       ;
 $EC27 DEC H           ;
 $EC28 CALL PE,$0C07   ;
 $EC2B DEFB $ED,$FF    ;
 $EC2D RST $38         ;
 $EC2E LD B,C          ;
 $EC2F LD (BC),A       ;
 $EC30 LD B,D          ;
 $EC31 ADD A,A         ;
 $EC32 DEC L           ;
 $EC33 RST $38         ;
 $EC34 LD B,D          ;
 $EC35 ADD A,A         ;
 $EC36 JR NC,$EC37     ;
 $EC38 LD B,L          ;
 $EC39 LD (BC),A       ;
 $EC3A RET P           ;
 $EC3B LD (HL),D       ;
 $EC3C LD E,C          ;
 $EC3D LD (BC),A       ;
 $EC3E INC A           ;
 $EC3F CALL PE,$8742   ;
 $EC42 LD SP,$42FF     ;
 $EC45 ADD A,A         ;
 $EC46 LD ($59FF),A    ;
 $EC49 LD (BC),A       ;
 $EC4A LD C,B          ;
 $EC4B CALL PE,$8742   ;
 $EC4E LD ($42FF),A    ;
 $EC51 ADD A,A         ;
 $EC52 LD SP,$42FF     ;
 $EC55 ADD A,A         ;
 $EC56 JR NC,$EC57     ;
 $EC58 LD B,D          ;
 $EC59 ADD A,A         ;
 $EC5A DEC L           ;
 $EC5B RST $38         ;
 $EC5C LD B,C          ;
 $EC5D LD BC,$0141     ;
 $EC60 LD B,C          ;
 $EC61 INC BC          ;
 $EC62 LD B,C          ;
 $EC63 INC BC          ;
 $EC64 RLCA            ;
 $EC65 RLA             ;
 $EC66 DEFB $ED,$FF    ;
 $EC68 RST $38         ;
 $EC69 LD B,L          ;
 $EC6A LD (BC),A       ;
 $EC6B RET             ;
 $EC6C LD (HL),A       ;
 $EC6D LD E,C          ;
 $EC6E LD (BC),A       ;
 $EC6F LD L,L          ;
 $EC70 CALL PE,$8642   ;
 $EC73 LD (BC),A       ;
 $EC74 LD E,H          ;
 $EC75 LD B,D          ;
 $EC76 ADD A,(HL)      ;
 $EC77 LD (BC),A       ;
 $EC78 LD E,(HL)       ;
 $EC79 LD B,D          ;
 $EC7A ADD A,(HL)      ;
 $EC7B LD (BC),A       ;
 $EC7C LD E,H          ;
 $EC7D LD E,C          ;
 $EC7E LD (BC),A       ;
 $EC7F LD A,L          ;
 $EC80 CALL PE,$0141   ;
 $EC83 LD B,C          ;
 $EC84 INC B           ;
 $EC85 LD B,C          ;
 $EC86 INC B           ;
 $EC87 LD B,C          ;
 $EC88 LD (BC),A       ;
 $EC89 LD B,C          ;
 $EC8A LD (BC),A       ;
 $EC8B LD B,D          ;
 $EC8C ADD A,A         ;
 $EC8D DEC L           ;
 $EC8E RST $38         ;
 $EC8F LD B,D          ;
 $EC90 ADD A,A         ;
 $EC91 JR NC,$EC92     ;
 $EC93 LD B,D          ;
 $EC94 ADD A,A         ;
 $EC95 LD SP,$42FF     ;
 $EC98 ADD A,A         ;
 $EC99 LD ($59FF),A    ;
 $EC9C LD (BC),A       ;
 $EC9D SBC A,E         ;
 $EC9E CALL PE,$8742   ;
 $ECA1 LD ($42FF),A    ;
 $ECA4 ADD A,A         ;
 $ECA5 LD SP,$59FF     ;
 $ECA8 LD (BC),A       ;
 $ECA9 AND A           ;
 $ECAA CALL PE,$8742   ;
 $ECAD JR NC,$ECAE     ;
 $ECAF LD B,D          ;
 $ECB0 ADD A,A         ;
 $ECB1 DEC L           ;
 $ECB2 RST $38         ;
 $ECB3 LD B,C          ;
 $ECB4 LD BC,$0141     ;
 $ECB7 LD B,C          ;
 $ECB8 INC BC          ;
 $ECB9 LD B,C          ;
 $ECBA INC BC          ;
 $ECBB LD B,E          ;
 $ECBC ADD HL,SP       ;
 $ECBD OUT (C),E       ;
 $ECBF LD (BC),A       ;
 $ECC0 CP (HL)         ;
 $ECC1 CALL PE,$0B48   ;
 $ECC4 LD C,B          ;
 $ECC5 INC C           ;
 $ECC6 LD C,B          ;
 $ECC7 LD A,(BC)       ;
 $ECC8 LD C,B          ;
 $ECC9 ADD HL,BC       ;
 $ECCA LD C,B          ;
 $ECCB EX AF,AF'       ;
 $ECCC LD C,B          ;
 $ECCD DEC B           ;
 $ECCE LD C,B          ;
 $ECCF LD B,$03        ;
 $ECD1 XOR B           ;
 $ECD2 PUSH HL         ;
 $ECD3 LD B,C          ;
 $ECD4 INC B           ;
 $ECD5 LD B,C          ;
 $ECD6 DEC B           ;
 $ECD7 ADD HL,DE       ;
 $ECD8 LD (BC),A       ;
 $ECD9 RST $10         ;
 $ECDA CALL PE,$8042   ;
 $ECDD EI              ;
 $ECDE DEC (HL)        ;
 $ECDF LD D,D          ;
 $ECE0 ADD A,C         ;
 $ECE1 EI              ;
 $ECE2 LD (BC),A       ;
 $ECE3 RST $18         ;
 $ECE4 CALL PE,$1542   ;
 $ECE7 LD (BC),A       ;
 $ECE8 RST $38         ;
 $ECE9 LD D,D          ;
 $ECEA ADD A,E         ;
 $ECEB EI              ;
 $ECEC LD (HL),$E5     ;
 $ECEE CALL PE,$0241   ;
 $ECF1 LD B,C          ;
 $ECF2 LD (BC),A       ;
 $ECF3 LD C,$D5        ;
 $ECF5 CALL PE,$0080   ;
 $ECF8 LD B,C          ;
 $ECF9 LD (BC),A       ;
 $ECFA LD B,C          ;
 $ECFB INC B           ;
 $ECFC LD C,$01        ;
 $ECFE DEFB $ED,$80    ;
 $ED00 NOP             ;
 $ED01 LD B,C          ;
 $ED02 LD (BC),A       ;
 $ED03 LD B,C          ;
 $ED04 EX AF,AF'       ;
 $ED05 LD B,C          ;
 $ED06 LD (BC),A       ;
 $ED07 LD B,C          ;
 $ED08 EX AF,AF'       ;
 $ED09 LD B,C          ;
 $ED0A INC BC          ;
 $ED0B DEC BC          ;
 $ED0C ADD A,B         ;
 $ED0D NOP             ;
 $ED0E LD B,C          ;
 $ED0F INC B           ;
 $ED10 LD B,C          ;
 $ED11 LD BC,$0141     ;
 $ED14 LD B,C          ;
 $ED15 DEC B           ;
 $ED16 DEC BC          ;
 $ED17 ADD A,B         ;
 $ED18 NOP             ;
 $ED19 LD B,C          ;
 $ED1A LD (BC),A       ;
 $ED1B LD B,D          ;
 $ED1C ADD A,A         ;
 $ED1D INC DE          ;
 $ED1E RST $38         ;
 $ED1F LD B,D          ;
 $ED20 ADD A,A         ;
 $ED21 LD B,L          ;
 $ED22 RST $38         ;
 $ED23 LD B,D          ;
 $ED24 ADD A,A         ;
 $ED25 LD B,H          ;
 $ED26 RST $38         ;
 $ED27 DEC BC          ;
 $ED28 ADC A,B         ;
 $ED29 NOP             ;
 $ED2A LD B,D          ;
 $ED2B INC H           ;
 $ED2C DEFB $FD        ;
 $ED2D RST $38         ;
 $ED2E LD D,D          ;
 $ED2F INC E           ;
 $ED30 DEFB $FD        ;
 $ED31 RST $38         ;
 $ED32 LD HL,($42ED)   ;
 $ED35 LD C,$FD        ;
 $ED37 RST $38         ;
 $ED38 DEC BC          ;
 $ED39 NOP             ;
 $ED3A NOP             ;
 $ED3B LD DE,$050B     ;
 $ED3E LD HL,$6D6A     ;
 $ED41 LD B,$10        ;
 $ED43 CALL $F1B2      ;
 $ED46 SET 6,(IX+$05)  ;
 $ED4A RET             ;
 $ED4B LD E,C          ;
 $ED4C INC B           ;
 $ED4D LD C,E          ;
 $ED4E LD A,I          ;
 $ED50 SBC A,B         ;
 $ED51 POP AF          ;
 $ED52 LD ($4FFF),A    ;
 $ED55 DEFB $ED,$02    ;
 $ED57 ADC A,D         ;
 $ED58 LD ($0214),A    ;
 $ED5B ADC A,D         ;
 $ED5C LD SP,$021E     ;
 $ED5F ADC A,D         ;
 $ED60 JR NC,$ED76     ;
 $ED62 LD (BC),A       ;
 $ED63 ADC A,D         ;
 $ED64 DEC L           ;
 $ED65 INC D           ;
 $ED66 LD (BC),A       ;
 $ED67 ADC A,E         ;
 $ED68 LD BC,$8714     ;
 $ED6B SBC A,B         ;
 $ED6C POP AF          ;
 $ED6D LD HL,$8FFF     ;
 $ED70 DEFB $ED,$87    ;
 $ED72 SBC A,B         ;
 $ED73 POP AF          ;
 $ED74 LD ($AAFF),A    ;
 $ED77 DEFB $ED,$02    ;
 $ED79 ADC A,E         ;
 $ED7A LD (BC),A       ;
 $ED7B INC D           ;
 $ED7C LD (BC),A       ;
 $ED7D ADC A,D         ;
 $ED7E DEC L           ;
 $ED7F INC D           ;
 $ED80 LD (BC),A       ;
 $ED81 ADC A,D         ;
 $ED82 JR NC,$ED98     ;
 $ED84 LD (BC),A       ;
 $ED85 ADC A,D         ;
 $ED86 LD SP,$021E     ;
 $ED89 ADC A,D         ;
 $ED8A LD ($0E14),A    ;
 $ED8D LD C,A          ;
 $ED8E DEFB $ED,$02    ;
 $ED90 ADC A,E         ;
 $ED91 INC BC          ;
 $ED92 JR Z,$ED96      ;
 $ED94 ADC A,E         ;
 $ED95 INC BC          ;
*$ED96 JR Z,$ED9A      ;
*$ED98 ADC A,E         ;
 $ED99 INC BC          ;
*$ED9A JR Z,$ED9E      ;
 $ED9C ADC A,E         ;
 $ED9D LD (BC),A       ;
*$ED9E JR Z,$EDA2      ;
 $EDA0 ADC A,E         ;
 $EDA1 LD B,$28        ;
 $EDA3 LD (BC),A       ;
 $EDA4 ADC A,E         ;
 $EDA5 INC B           ;
 $EDA6 JR Z,$EDB6      ;
 $EDA8 LD L,D          ;
 $EDA9 DEFB $ED,$02    ;
 $EDAB ADC A,E         ;
 $EDAC EX AF,AF'       ;
 $EDAD JR Z,$EDB1      ;
 $EDAF ADC A,E         ;
 $EDB0 LD (BC),A       ;
*$EDB1 JR Z,$EDB5      ;
 $EDB3 ADC A,E         ;
 $EDB4 RLCA            ;
*$EDB5 JR Z,$EDB9      ;
 $EDB7 ADC A,E         ;
 $EDB8 RLCA            ;
*$EDB9 JR Z,$EDBD      ;
 $EDBB ADC A,E         ;
 $EDBC RLCA            ;
*$EDBD JR Z,$EDC1      ;
 $EDBF ADC A,E         ;
 $EDC0 LD (BC),A       ;
*$EDC1 JR Z,$EDC5      ;
 $EDC3 ADC A,E         ;
 $EDC4 INC B           ;
*$EDC5 JR Z,$EDC9      ;
 $EDC7 ADC A,E         ;
 $EDC8 INC B           ;
*$EDC9 JR Z,$EDCD      ;
 $EDCB ADC A,E         ;
 $EDCC INC B           ;
*$EDCD JR Z,$EDD1      ;
 $EDCF ADC A,E         ;
 $EDD0 LD BC,$0228     ;
 $EDD3 ADC A,E         ;
 $EDD4 LD BC,$0228     ;
 $EDD7 ADC A,E         ;
 $EDD8 DEC B           ;
 $EDD9 JR Z,$EDE9      ;
*$EDDB LD L,D          ;
 $EDDC DEFB $ED,$87    ;
 $EDDE RLCA            ;
 $EDDF LD B,C          ;
 $EDE0 DEFB $FD        ;
 $EDE1 LD D,A          ;
 $EDE2 SBC A,B         ;
 $EDE3 POP AF          ;
 $EDE4 CALL M,$E1FF    ;
 $EDE7 DEFB $ED,$0B    ;
*$EDE9 ADC A,B         ;
 $EDEA RLCA            ;
 $EDEB RLCA            ;
 $EDEC JR Z,$EDDB      ;
 $EDEE DEFB $FD        ;
 $EDEF RST $38         ;
 $EDF0 LD D,A          ;
 $EDF1 SBC A,B         ;
 $EDF2 POP AF          ;
 $EDF3 CALL M,$F0FF    ;
 $EDF6 DEFB $ED,$0B    ;
 $EDF8 LD E,C          ;
 $EDF9 INC B           ;
 $EDFA RET M           ;
 $EDFB LD A,I          ;
 $EDFD SBC A,B         ;
*$EDFE POP AF          ;
 $EDFF LD ($FCFF),A    ;
 $EE02 LD A,I          ;
 $EE04 SBC A,B         ;
 $EE05 POP AF          ;
 $EE06 LD ($16FF),A    ;
 $EE09 XOR $02         ;
 $EE0B ADC A,D         ;
 $EE0C LD ($0750),A    ;
 $EE0F JR Z,$EDFE      ;
 $EE11 LD ($0EFF),A    ;
 $EE14 CALL M,$02ED    ;
*$EE17 ADC A,E         ;
 $EE18 INC B           ;
 $EE19 INC A           ;
 $EE1A LD B,C          ;
 $EE1B INC BC          ;
 $EE1C LD C,$FC        ;
 $EE1E OUT (C),E       ;
 $EE20 INC B           ;
 $EE21 RRA             ;
 $EE22 XOR $42         ;
 $EE24 ADD A,B         ;
 $EE25 EI              ;
 $EE26 NOP             ;
 $EE27 RRCA            ;
 $EE28 LD C,$27        ;
 $EE2A XOR $59         ;
 $EE2C INC B           ;
 $EE2D DEC HL          ;
 $EE2E XOR $42         ;
 $EE30 ADD A,B         ;
 $EE31 EI              ;
 $EE32 NOP             ;
 $EE33 LD (DE),A       ;
 $EE34 ADC A,B         ;
 $EE35 RLA             ;
 $EE36 RST $38         ;
 $EE37 INC SP          ;
 $EE38 XOR $02         ;
 $EE3A ADD A,B         ;
 $EE3B EI              ;
 $EE3C DEC A           ;
 $EE3D INC BC          ;
 $EE3E OR E            ;
 $EE3F RST $28         ;
 $EE40 LD D,D          ;
 $EE41 ADC A,B         ;
 $EE42 RLCA            ;
 $EE43 RST $38         ;
 $EE44 LD B,B          ;
 $EE45 XOR $03         ;
 $EE47 RST $00         ;
 $EE48 RST $28         ;
 $EE49 LD B,C          ;
 $EE4A LD A,(BC)       ;
 $EE4B LD B,D          ;
 $EE4C ADD A,A         ;
 $EE4D INC DE          ;
 $EE4E RST $38         ;
 $EE4F LD B,C          ;
 $EE50 LD BC,$0141     ;
 $EE53 LD B,C          ;
 $EE54 LD BC,$0141     ;
 $EE57 LD B,A          ;
 $EE58 POP HL          ;
 $EE59 EX DE,HL        ;
 $EE5A RLA             ;
 $EE5B RST $38         ;
 $EE5C LD B,C          ;
 $EE5D EX AF,AF'       ;
 $EE5E LD B,C          ;
 $EE5F EX AF,AF'       ;
 $EE60 LD B,C          ;
 $EE61 EX AF,AF'       ;
 $EE62 LD B,C          ;
 $EE63 EX AF,AF'       ;
 $EE64 LD B,C          ;
 $EE65 EX AF,AF'       ;
 $EE66 LD B,A          ;
 $EE67 AND H           ;
 $EE68 EX DE,HL        ;
 $EE69 RST $38         ;
 $EE6A JR NZ,$EEAE     ;
 $EE6C ADD A,L         ;
 $EE6D LD E,E          ;
 $EE6E RST $38         ;
 $EE6F LD B,D          ;
 $EE70 ADD A,A         ;
 $EE71 LD E,E          ;
 $EE72 RST $38         ;
 $EE73 LD B,D          ;
 $EE74 ADD A,H         ;
 $EE75 LD E,E          ;
 $EE76 RST $38         ;
 $EE77 LD (DE),A       ;
 $EE78 ADC A,B         ;
 $EE79 DEC C           ;
 $EE7A RST $38         ;
 $EE7B LD (HL),A       ;
 $EE7C XOR $82         ;
 $EE7E ADD A,E         ;
 $EE7F NOP             ;
 $EE80 JR NZ,$EE17     ;
 $EE82 XOR $82         ;
 $EE84 ADD A,E         ;
 $EE85 NOP             ;
 $EE86 LD H,(HL)       ;
 $EE87 SUB L           ;
 $EE88 XOR $82         ;
 $EE8A ADD A,E         ;
 $EE8B LD BC,$9566     ;
 $EE8E XOR $12         ;
 $EE90 ADD A,E         ;
 $EE91 LD BC,$9820     ;
 $EE94 XOR $03         ;
 $EE96 SBC A,H         ;
 $EE97 RST $28         ;
 $EE98 LD (DE),A       ;
 $EE99 ADC A,B         ;
 $EE9A LD D,$FF        ;
 $EE9C SBC A,B         ;
 $EE9D XOR $02         ;
 $EE9F ADD A,B         ;
 $EEA0 EI              ;
 $EEA1 INC HL          ;
 $EEA2 LD (BC),A       ;
 $EEA3 ADD A,L         ;
 $EEA4 LD C,A          ;
 $EEA5 RST $38         ;
 $EEA6 LD (BC),A       ;
 $EEA7 INC H           ;
 $EEA8 LD C,A          ;
 $EEA9 RST $38         ;
 $EEAA RLCA            ;
 $EEAB CPL             ;
 $EEAC PUSH HL         ;
 $EEAD SCF             ;
*$EEAE INC D           ;
 $EEAF ADD A,D         ;
 $EEB0 ADD A,C         ;
 $EEB1 EI              ;
 $EEB2 NOP             ;
 $EEB3 SUB (HL)        ;
 $EEB4 RST $28         ;
 $EEB5 RRCA            ;
 $EEB6 ADD A,E         ;
 $EEB7 LD A,D          ;
 $EEB8 PUSH HL         ;
 $EEB9 XOR A           ;
 $EEBA XOR $03         ;
 $EEBC OR E            ;
 $EEBD RST $28         ;
 $EEBE LD B,A          ;
 $EEBF CP (HL)         ;
 $EEC0 DEFB $DD        ;
 $EEC1 JR Z,$EEC2      ;
 $EEC3 INC BC          ;
 $EEC4 RST $00         ;
 $EEC5 RST $28         ;
 $EEC6 LD (DE),A       ;
 $EEC7 ADD A,E         ;
 $EEC8 LD D,E          ;
 $EEC9 LD H,$DA        ;
 $EECB XOR $12         ;
 $EECD ADD A,E         ;
 $EECE LD D,C          ;
 $EECF DAA             ;
 $EED0 JP C,$02EE      ;
 $EED3 ADD A,B         ;
 $EED4 LD D,C          ;
 $EED5 NOP             ;
 $EED6 LD (BC),A       ;
 $EED7 ADD A,B         ;
 $EED8 LD D,E          ;
 $EED9 NOP             ;
 $EEDA RRCA            ;
 $EEDB INC BC          ;
 $EEDC RST $00         ;
 $EEDD RST $28         ;
 $EEDE LD (DE),A       ;
 $EEDF ADC A,B         ;
 $EEE0 ADD HL,BC       ;
 $EEE1 RST $38         ;
 $EEE2 JP C,$07EE      ;
 $EEE5 CP (HL)         ;
 $EEE6 DEFB $DD        ;
 $EEE7 LD ($82FF),A    ;
 $EEEA ADD A,E         ;
 $EEEB NOP             ;
 $EEEC JR NZ,$EEEF     ;
 $EEEE RST $28         ;
*$EEEF ADD A,D         ;
 $EEF0 ADD A,E         ;
 $EEF1 NOP             ;
 $EEF2 LD H,(HL)       ;
 $EEF3 LD BC,$82EF     ;
 $EEF6 ADD A,E         ;
 $EEF7 LD BC,$0166     ;
 $EEFA RST $28         ;
 $EEFB LD (DE),A       ;
 $EEFC ADD A,E         ;
 $EEFD LD BC,$0920     ;
 $EF00 RST $28         ;
 $EF01 INC BC          ;
 $EF02 XOR H           ;
 $EF03 RST $28         ;
 $EF04 RLCA            ;
 $EF05 CP (HL)         ;
 $EF06 DEFB $DD        ;
 $EF07 RRCA            ;
 $EF08 RST $38         ;
 $EF09 INC BC          ;
 $EF0A RST $00         ;
 $EF0B RST $28         ;
 $EF0C LD B,A          ;
 $EF0D OR $F1          ;
 $EF0F LD D,L          ;
 $EF10 RST $38         ;
 $EF11 LD (BC),A       ;
 $EF12 ADD A,B         ;
 $EF13 EI              ;
 $EF14 LD HL,$8542     ;
 $EF17 LD E,E          ;
 $EF18 RST $38         ;
 $EF19 LD B,D          ;
 $EF1A ADD A,A         ;
 $EF1B LD E,E          ;
 $EF1C RST $38         ;
 $EF1D LD B,D          ;
 $EF1E ADD A,H         ;
 $EF1F LD E,E          ;
 $EF20 RST $38         ;
 $EF21 LD B,E          ;
 $EF22 LD (HL),D       ;
 $EF23 EX DE,HL        ;
 $EF24 LD B,C          ;
 $EF25 LD (BC),A       ;
 $EF26 LD B,C          ;
 $EF27 INC BC          ;
 $EF28 EX AF,AF'       ;
 $EF29 LD L,B          ;
 $EF2A LD B,D          ;
 $EF2B ADD A,B         ;
 $EF2C EI              ;
 $EF2D LD H,A          ;
 $EF2E LD (DE),A       ;
 $EF2F ADC A,B         ;
 $EF30 RRCA            ;
 $EF31 RST $38         ;
 $EF32 LD L,$EF        ;
 $EF34 RLCA            ;
 $EF35 CPL             ;
 $EF36 PUSH HL         ;
 $EF37 DJNZ $EF38      ;
 $EF39 ADD A,D         ;
 $EF3A ADD A,E         ;
 $EF3B NOP             ;
 $EF3C LD H,A          ;
 $EF3D LD B,A          ;
 $EF3E RST $28         ;
 $EF3F RRCA            ;
 $EF40 SUB E           ;
 $EF41 LD A,D          ;
 $EF42 PUSH HL         ;
 $EF43 ADD HL,SP       ;
 $EF44 RST $28         ;
 $EF45 ADC A,H         ;
 $EF46 RST $28         ;
 $EF47 LD B,$73        ;
 $EF49 LD (HL),L       ;
 $EF4A LD (BC),A       ;
 $EF4B ADD A,B         ;
 $EF4C EI              ;
 $EF4D LD ($8812),A    ;
 $EF50 DJNZ $EF51      ;
 $EF52 LD C,(HL)       ;
 $EF53 RST $28         ;
 $EF54 RLCA            ;
 $EF55 CP (HL)         ;
 $EF56 DEFB $DD        ;
 $EF57 JR NC,$EF58     ;
 $EF59 LD BC,$0101     ;
 $EF5C LD BC,$0101     ;
 $EF5F LD DE,$5F0C     ;
 $EF62 RST $28         ;
 $EF63 LD (DE),A       ;
 $EF64 ADD A,E         ;
 $EF65 EI              ;
 $EF66 RLA             ;
 $EF67 LD H,E          ;
 $EF68 RST $28         ;
 $EF69 LD BC,$010D     ;
 $EF6C EX AF,AF'       ;
 $EF6D LD BC,$0108     ;
 $EF70 EX AF,AF'       ;
 $EF71 LD BC,$0108     ;
 $EF74 EX AF,AF'       ;
 $EF75 RLCA            ;
 $EF76 CP (HL)         ;
 $EF77 DEFB $DD        ;
 $EF78 DEC B           ;
 $EF79 RST $38         ;
 $EF7A RLCA            ;
 $EF7B AND H           ;
 $EF7C EX DE,HL        ;
 $EF7D RST $38         ;
 $EF7E INC E           ;
 $EF7F LD BC,$0103     ;
 $EF82 INC BC          ;
 $EF83 LD (DE),A       ;
 $EF84 ADD A,C         ;
 $EF85 EI              ;
 $EF86 NOP             ;
 $EF87 ADC A,H         ;
 $EF88 RST $28         ;
 $EF89 INC BC          ;
 $EF8A LD C,B          ;
 $EF8B SBC A,(HL)      ;
 $EF8C LD (BC),A       ;
 $EF8D ADD A,B         ;
 $EF8E EI              ;
 $EF8F NOP             ;
 $EF90 INC BC          ;
 $EF91 XOR B           ;
 $EF92 PUSH HL         ;
 $EF93 LD C,$90        ;
 $EF95 RST $28         ;
 $EF96 INC BC          ;
 $EF97 ADC A,B         ;
 $EF98 PUSH HL         ;
 $EF99 INC BC          ;
 $EF9A JP Z,$00DF      ;
 $EF9D NOP             ;
 $EF9E LD HL,$75E8     ;
*$EFA1 LD A,$01        ;
 $EFA3 LD ($5C3C),A    ;
 $EFA6 CALL $A59F      ;
 $EFA9 OR $01          ;
 $EFAB RET             ;
 $EFAC NOP             ;
 $EFAD NOP             ;
 $EFAE LD HL,$7603     ;
 $EFB1 JR $EFA1        ;
 $EFB3 NOP             ;
 $EFB4 NOP             ;
 $EFB5 LD DE,$07F0     ;
 $EFB8 LD B,$10        ;
*$EFBA LD A,($A036)    ;
 $EFBD CALL $F1C1      ;
 $EFC0 RES 6,(IX+$05)  ;
 $EFC4 OR $01          ;
 $EFC6 RET             ;
 $EFC7 NOP             ;
 $EFC8 NOP             ;
 $EFC9 LD A,($A009)    ;
 $EFCC CP $23          ;
 $EFCE JR Z,$EFE6      ;
 $EFD0 CP $21          ;
 $EFD2 JR Z,$EFE6      ;
 $EFD4 CP $22          ;
 $EFD6 JR Z,$EFE6      ;
 $EFD8 CP $26          ;
 $EFDA JR Z,$EFE6      ;
 $EFDC CP $25          ;
 $EFDE JR Z,$EFE6      ;
 $EFE0 CP $24          ;
 $EFE2 JR Z,$EFE6      ;
 $EFE4 CP $27          ;
*$EFE6 JP Z,$DFCC      ;
 $EFE9 LD DE,$0000     ;
 $EFEC LD B,$80        ;
 $EFEE CALL $EFBA      ;
 $EFF1 SET 6,(IX+$05)  ;
 $EFF5 RET             ;
 $EFF6 ADD HL,DE       ;
 $EFF7 LD B,$F6        ;
 $EFF9 RST $28         ;
 $EFFA LD B,D          ;
 $EFFB ADD A,B         ;
 $EFFC EI              ;
 $EFFD LD H,A          ;
 $EFFE LD (DE),A       ;
 $EFFF ADC A,B         ;
 $F000 RRCA            ;
 $F001 RST $38         ;
 $F002 CP $EF          ;
 $F004 RLCA            ;
 $F005 CPL             ;
 $F006 PUSH HL         ;
 $F007 DJNZ $F008      ;
 $F009 ADD A,D         ;
 $F00A ADD A,E         ;
 $F00B NOP             ;
 $F00C LD H,A          ;
 $F00D LD C,D          ;
 $F00E RST $28         ;
 $F00F RRCA            ;
 $F010 SUB E           ;
 $F011 LD A,D          ;
 $F012 PUSH HL         ;
 $F013 ADD HL,BC       ;
 $F014 RET P           ;
 $F015 ADC A,H         ;
 $F016 RST $28         ;
 $F017 RRCA            ;
 $F018 RET             ;
 $F019 INC B           ;
 $F01A ADD HL,HL       ;
 $F01B RET P           ;
 $F01C LD D,A          ;
 $F01D SBC A,B         ;
 $F01E POP AF          ;
 $F01F LD A,(BC)       ;
 $F020 RST $38         ;
 $F021 RLA             ;
 $F022 RET P           ;
 $F023 LD B,(HL)       ;
 $F024 LD D,D          ;
 $F025 LD (HL),L       ;
 $F026 LD C,$17        ;
 $F028 RET P           ;
 $F029 RRCA            ;
 $F02A LD D,A          ;
 $F02B SBC A,B         ;
 $F02C POP AF          ;
 $F02D LD A,(BC)       ;
 $F02E RST $38         ;
 $F02F INC (HL)        ;
 $F030 RET P           ;
 $F031 LD B,(HL)       ;
 $F032 LD D,D          ;
 $F033 LD (HL),L       ;
 $F034 LD D,A          ;
 $F035 SBC A,B         ;
 $F036 POP AF          ;
 $F037 LD ($29FF),A    ;
 $F03A RET P           ;
 $F03B LD D,A          ;
 $F03C SBC A,B         ;
 $F03D POP AF          ;
; This entry point is used by the routine at #R$F56E.
*$F03E LD ($53FF),A    ;
 $F041 RET P           ;
 $F042 LD (BC),A       ;
 $F043 ADD A,A         ;
 $F044 RST $38         ;
 $F045 RST $38         ;
 $F046 LD D,D          ;
 $F047 ADD A,E         ;
 $F048 EI              ;
 $F049 CCF             ;
 $F04A ADD HL,HL       ;
 $F04B RET P           ;
 $F04C LD (BC),A       ;
 $F04D ADD A,A         ;
 $F04E DEC L           ;
 $F04F RST $38         ;
 $F050 LD C,$29        ;
 $F052 RET P           ;
 $F053 POP BC          ;
 $F054 JR Z,$F07F      ;
 $F056 RET P           ;
 $F057 LD B,C          ;
 $F058 ADD HL,DE       ;
 $F059 LD C,$29        ;
 $F05B RET P           ;
 $F05C INC BC          ;
 $F05D XOR B           ;
 $F05E PUSH HL         ;
 $F05F LD C,$5C        ;
 $F061 RET P           ;
 $F062 LD E,C          ;
 $F063 LD (BC),A       ;
 $F064 LD H,D          ;
 $F065 RET P           ;
 $F066 LD B,D          ;
 $F067 ADD A,B         ;
 $F068 EI              ;
 $F069 LD E,H          ;
 $F06A LD B,L          ;
 $F06B DEC BC          ;
 $F06C JR NZ,$F0DB     ;
 $F06E RRCA            ;
 $F06F LD E,C          ;
 $F070 LD (BC),A       ;
 $F071 LD L,D          ;
 $F072 RET P           ;
 $F073 LD B,L          ;
 $F074 LD (BC),A       ;
 $F075 LD L,$6D        ;
 $F077 LD C,B          ;
 $F078 LD (BC),A       ;
 $F079 LD B,D          ;
 $F07A ADD A,(HL)      ;
 $F07B LD (BC),A       ;
 $F07C LD E,(HL)       ;
 $F07D LD B,(HL)       ;
 $F07E CP C            ;
*$F07F LD L,H          ;
 $F080 LD B,A          ;
 $F081 CPL             ;
 $F082 PUSH HL         ;
 $F083 INC D           ;
 $F084 DEC B           ;
 $F085 LD B,E          ;
 $F086 XOR B           ;
 $F087 PUSH HL         ;
 $F088 JP $E57A        ;
 $F08B ADD A,L         ;
 $F08C RET P           ;
 $F08D LD B,D          ;
 $F08E ADD A,A         ;
 $F08F LD B,L          ;
 $F090 RST $38         ;
 $F091 LD B,D          ;
 $F092 ADD A,A         ;
 $F093 INC DE          ;
 $F094 RST $38         ;
 $F095 LD B,C          ;
 $F096 LD BC,$A843     ;
 $F099 POP AF          ;
 $F09A LD B,C          ;
 $F09B INC B           ;
 $F09C LD B,C          ;
 $F09D LD (BC),A       ;
 $F09E LD B,C          ;
 $F09F LD (BC),A       ;
 $F0A0 LD B,D          ;
 $F0A1 ADD A,B         ;
 $F0A2 EI              ;
 $F0A3 NOP             ;
 $F0A4 LD (DE),A       ;
 $F0A5 ADC A,B         ;
 $F0A6 RLA             ;
 $F0A7 RST $38         ;
 $F0A8 AND H           ;
 $F0A9 RET P           ;
 $F0AA RLA             ;
 $F0AB SBC A,B         ;
 $F0AC POP AF          ;
 $F0AD INC D           ;
 $F0AE RST $38         ;
 $F0AF XOR D           ;
 $F0B0 RET P           ;
 $F0B1 LD (BC),A       ;
 $F0B2 ADD A,B         ;
 $F0B3 EI              ;
 $F0B4 JR Z,$F0F8      ;
 $F0B6 ADD A,A         ;
 $F0B7 JR NC,$F0B8     ;
 $F0B9 LD B,C          ;
 $F0BA ADD HL,BC       ;
 $F0BB LD B,D          ;
 $F0BC INC H           ;
 $F0BD JR NC,$F0BE     ;
 $F0BF LD B,C          ;
 $F0C0 DEC B           ;
 $F0C1 LD B,C          ;
 $F0C2 EX AF,AF'       ;
 $F0C3 LD B,C          ;
 $F0C4 LD A,(BC)       ;
 $F0C5 LD B,D          ;
 $F0C6 ADD A,A         ;
 $F0C7 JR NC,$F0C8     ;
 $F0C9 LD B,A          ;
 $F0CA AND H           ;
 $F0CB EX DE,HL        ;
 $F0CC RST $38         ;
 $F0CD INC C           ;
 $F0CE LD B,C          ;
 $F0CF LD BC,$0208     ;
 $F0D2 RRCA            ;
 $F0D3 ADD A,D         ;
 $F0D4 ADD A,C         ;
 $F0D5 NOP             ;
 $F0D6 EI              ;
 $F0D7 JP PO,$52F0     ;
 $F0DA ADC A,B         ;
*$F0DB LD BC,$D2FF     ;
 $F0DE RET P           ;
 $F0DF LD C,$EE        ;
 $F0E1 RET P           ;
 $F0E2 LD B,L          ;
 $F0E3 NOP             ;
 $F0E4 LD A,B          ;
 $F0E5 LD L,H          ;
 $F0E6 LD B,E          ;
 $F0E7 INC BC          ;
 $F0E8 POP AF          ;
 $F0E9 RLCA            ;
 $F0EA CP (HL)         ;
 $F0EB DEFB $DD        ;
 $F0EC INC B           ;
 $F0ED RST $38         ;
 $F0EE RLA             ;
 $F0EF SBC A,B         ;
 $F0F0 POP AF          ;
 $F0F1 INC D           ;
 $F0F2 RST $38         ;
 $F0F3 XOR $F0         ;
 $F0F5 LD BC,$5902     ;
*$F0F8 LD (BC),A       ;
 $F0F9 RST $30         ;
 $F0FA RET P           ;
 $F0FB LD B,D          ;
 $F0FC ADD A,B         ;
 $F0FD EI              ;
 $F0FE NOP             ;
*$F0FF RRCA            ;
 $F100 LD C,$FF        ;
 $F102 RET P           ;
 $F103 NOP             ;
 $F104 NOP             ;
*$F105 LD IX,$996F     ;
 $F109 SET 1,(IX+$03)  ;
*$F10D OR $01          ;
 $F10F RET             ;
 $F110 LD E,C          ;
 $F111 LD (BC),A       ;
 $F112 DJNZ $F105      ;
 $F114 LD B,L          ;
 $F115 LD (BC),A       ;
 $F116 CP A            ;
 $F117 LD L,L          ;
 $F118 LD E,C          ;
 $F119 INC B           ;
 $F11A JR $F10D        ;
 $F11C RLCA            ;
 $F11D RLA             ;
 $F11E DEFB $ED,$FF    ;
 $F120 RST $38         ;
 $F121 LD B,D          ;
 $F122 ADD HL,HL       ;
 $F123 LD C,B          ;
 $F124 RST $38         ;
 $F125 LD B,D          ;
 $F126 ADD A,A         ;
 $F127 LD B,H          ;
 $F128 RST $38         ;
 $F129 LD B,D          ;
 $F12A ADD A,A         ;
 $F12B LD B,L          ;
 $F12C RST $38         ;
 $F12D LD B,D          ;
 $F12E ADD A,A         ;
 $F12F INC DE          ;
 $F130 RST $38         ;
 $F131 LD B,C          ;
 $F132 LD BC,$0441     ;
 $F135 LD B,C          ;
 $F136 DEC B           ;
 $F137 LD B,D          ;
 $F138 ADD A,B         ;
 $F139 EI              ;
 $F13A NOP             ;
 $F13B LD (BC),A       ;
 $F13C DJNZ $F186      ;
 $F13E RST $38         ;
 $F13F INC BC          ;
 $F140 XOR B           ;
 $F141 PUSH HL         ;
 $F142 LD C,$3F        ;
 $F144 POP AF          ;
 $F145 LD E,C          ;
 $F146 INC B           ;
 $F147 LD B,L          ;
 $F148 POP AF          ;
 $F149 LD B,E          ;
 $F14A RST $38         ;
 $F14B CALL PE,$2942   ;
 $F14E LD L,$FF        ;
 $F150 LD B,E          ;
 $F151 INC C           ;
 $F152 OUT (C),B       ;
 $F154 LD BC,$0341     ;
 $F157 LD C,$35        ;
 $F159 POP AF          ;
 $F15A LD (DE),A       ;
 $F15B ADC A,B         ;
 $F15C LD BC,$5AFF     ;
 $F15F POP AF          ;
 $F160 LD (DE),A       ;
 $F161 ADC A,B         ;
 $F162 EX AF,AF'       ;
 $F163 RST $38         ;
 $F164 LD H,B          ;
 $F165 POP AF          ;
 $F166 LD (BC),A       ;
 $F167 ADD A,B         ;
 $F168 EI              ;
 $F169 DEC L           ;
 $F16A LD (BC),A       ;
 $F16B ADD A,L         ;
 $F16C LD H,A          ;
 $F16D RST $38         ;
 $F16E LD (BC),A       ;
 $F16F ADD A,A         ;
 $F170 LD H,A          ;
 $F171 RST $38         ;
 $F172 LD (BC),A       ;
 $F173 ADD A,A         ;
 $F174 SCF             ;
 $F175 RST $38         ;
 $F176 LD (DE),A       ;
 $F177 ADC A,B         ;
 $F178 LD C,$FF        ;
 $F17A HALT            ;
 $F17B POP AF          ;
 $F17C ADD A,D         ;
 $F17D ADD A,E         ;
 $F17E EI              ;
 $F17F DEC BC          ;
 $F180 SUB D           ;
 $F181 POP AF          ;
 $F182 LD (BC),A       ;
 $F183 ADD A,A         ;
 $F184 SCF             ;
 $F185 RST $38         ;
*$F186 LD (BC),A       ;
 $F187 ADD A,A         ;
 $F188 LD H,A          ;
 $F189 RST $38         ;
 $F18A LD (BC),A       ;
 $F18B ADD A,H         ;
 $F18C LD H,A          ;
 $F18D RST $38         ;
 $F18E LD (BC),A       ;
 $F18F ADD A,B         ;
 $F190 EI              ;
 $F191 NOP             ;
 $F192 INC BC          ;
 $F193 XOR B           ;
 $F194 PUSH HL         ;
 $F195 LD C,$92        ;
 $F197 POP AF          ;
 $F198 RLCA            ;
 $F199 NOP             ;
 $F19A CALL $D29D      ;
 $F19D LD B,A          ;
 $F19E LD A,($A034)    ;
 $F1A1 CP B            ;
 $F1A2 JP C,$DC15      ;
 $F1A5 OR $01          ;
 $F1A7 RET             ;
 $F1A8 NOP             ;
 $F1A9 NOP             ;
 $F1AA LD HL,$6D5D     ;
 $F1AD LD DE,$0910     ;
 $F1B0 LD B,$20        ;
*$F1B2 LD A,$0B        ;
 $F1B4 CALL $F1C1      ;
 $F1B7 RES 6,(IX+$05)  ;
 $F1BB CALL $A59F      ;
 $F1BE OR $01          ;
 $F1C0 RET             ;

; Routine at F1C1
;
; Used by the routines at #R$9ED1 and #R$E691.
c$F1C1 CALL $D237     ;
 $F1C4 LD (IX+$09),E  ;
 $F1C7 LD (IX+$0A),D  ;
 $F1CA LD A,(IX+$08)  ;
 $F1CD AND $0F        ;
 $F1CF OR B           ;
 $F1D0 LD (IX+$08),A  ;
 $F1D3 OR $01         ;
 $F1D5 RET            ;
 $F1D6 RLCA           ;
 $F1D7 NOP            ;
 $F1D8 LD A,($A034)   ;
 $F1DB LD B,$61       ;
 $F1DD CP $0D         ;
 $F1DF JR C,$F1E5     ;
 $F1E1 LD B,$70       ;
 $F1E3 SUB $0C        ;
*$F1E5 LD HL,$9FE0    ;
 $F1E8 CP (HL)        ;
 $F1E9 JP NZ,$DC15    ;
 $F1EC LD A,($9FE2)   ;
 $F1EF CP B           ;
 $F1F0 JP NZ,$DC15    ;
 $F1F3 OR $01         ;
 $F1F5 RET            ;
 $F1F6 RLCA           ;
 $F1F7 NOP            ;
 $F1F8 LD IX,($A013)  ;
 $F1FC SET 7,(IX+$05) ;
 $F200 OR $01         ;
 $F202 RET            ;
 $F203 RLCA           ;
 $F204 NOP            ;
 $F205 LD IX,($A013)  ;
 $F209 RES 0,(IX+$05) ;
 $F20D OR $01         ;
 $F20F RET            ;
 $F210 RLCA           ;
 $F211 NOP            ;
 $F212 LD IX,($A013)  ;
 $F216 SET 0,(IX+$05) ;
 $F21A OR $01         ;
 $F21C RET            ;
 $F21D LD (BC),A      ;
 $F21E ADC A,H        ;
 $F21F DJNZ $F224     ;
 $F221 LD (BC),A      ;
 $F222 ADC A,H        ;
 $F223 LD (BC),A      ;
*$F224 INC BC         ;
 $F225 LD (BC),A      ;
 $F226 ADC A,H        ;
 $F227 INC D          ;
 $F228 INC BC         ;
 $F229 LD (BC),A      ;
 $F22A ADC A,H        ;
 $F22B LD (BC),A      ;
 $F22C LD BC,$BE07    ;
 $F22F DEFB $DD       ;
 $F230 LD (BC),A      ;
 $F231 RST $38        ;
 $F232 LD (BC),A      ;
 $F233 ADC A,H        ;
 $F234 LD A,(DE)      ;
 $F235 INC B          ;
 $F236 LD (BC),A      ;
 $F237 ADC A,H        ;
 $F238 LD (BC),A      ;
 $F239 INC B          ;
 $F23A RRCA           ;
 $F23B LD (BC),A      ;
 $F23C ADC A,H        ;
 $F23D LD E,$04       ;
 $F23F LD (BC),A      ;
 $F240 ADC A,H        ;
 $F241 LD (BC),A      ;
 $F242 DEC B          ;
 $F243 LD C,$1D       ;
 $F245 JP P,$BE07     ;
 $F248 DEFB $DD       ;
 $F249 LD (BC),A      ;
 $F24A RST $38        ;
 $F24B LD (BC),A      ;
 $F24C ADC A,H        ;
 $F24D DEC D          ;
 $F24E INC BC         ;
 $F24F LD (BC),A      ;
 $F250 ADC A,H        ;
 $F251 LD (BC),A      ;
 $F252 INC BC         ;
 $F253 LD (BC),A      ;
 $F254 ADC A,H        ;
 $F255 LD DE,$0203    ;
 $F258 ADC A,H        ;
 $F259 LD (BC),A      ;
 $F25A LD BC,$BE07    ;
 $F25D DEFB $DD       ;
 $F25E INC B          ;
 $F25F RST $38        ;
 $F260 LD (BC),A      ;
 $F261 ADC A,H        ;
 $F262 RRA            ;
 $F263 INC B          ;
 $F264 LD (BC),A      ;
 $F265 ADC A,H        ;
 $F266 LD (BC),A      ;
 $F267 LD BC,$BE07    ;
 $F26A DEFB $DD       ;
 $F26B INC B          ;
 $F26C RST $38        ;
 $F26D LD (BC),A      ;
 $F26E ADC A,H        ;
 $F26F DEC DE         ;
 $F270 INC B          ;
 $F271 LD (BC),A      ;
 $F272 ADC A,H        ;
 $F273 LD (BC),A      ;
 $F274 LD BC,$460E    ;
 $F277 JP P,$BE07     ;
 $F27A DEFB $DD       ;
 $F27B INC A          ;
 $F27C RST $38        ;
 $F27D LD (BC),A      ;
 $F27E ADC A,H        ;
 $F27F RLA            ;
 $F280 LD A,(BC)      ;
 $F281 LD (BC),A      ;
 $F282 ADC A,H        ;
 $F283 INC B          ;
 $F284 DEC B          ;
 $F285 LD (BC),A      ;
 $F286 ADC A,H        ;
 $F287 LD D,$0A       ;
 $F289 LD (BC),A      ;
 $F28A ADC A,H        ;
 $F28B INC BC         ;
 $F28C DEC B          ;
 $F28D RLCA           ;
 $F28E CP (HL)        ;
 $F28F DEFB $DD       ;
 $F290 INC A          ;
 $F291 RST $38        ;
 $F292 LD (BC),A      ;
 $F293 ADC A,H        ;
 $F294 LD (HL),$0A    ;
 $F296 LD (BC),A      ;
 $F297 ADC A,H        ;
 $F298 INC B          ;
 $F299 DEC B          ;
 $F29A LD (BC),A      ;
 $F29B ADC A,H        ;
 $F29C SCF            ;
 $F29D LD A,(BC)      ;
 $F29E LD (BC),A      ;
 $F29F ADC A,H        ;
 $F2A0 INC BC         ;
 $F2A1 DEC B          ;
 $F2A2 LD C,$78       ;
 $F2A4 JP P,$0784     ;
 $F2A7 RLCA           ;
 $F2A8 RET            ;
 $F2A9 CALL PO,$FFFD  ;
 $F2AC RLCA           ;
 $F2AD CP (HL)        ;
 $F2AE DEFB $DD       ;
 $F2AF CALL M,$0BFF   ;
 $F2B2 RRCA           ;
 $F2B3 LD C,$B2       ;
 $F2B5 JP P,$FD05     ;
 $F2B8 XOR H          ;
 $F2B9 LD L,E         ;
 $F2BA RLCA           ;
 $F2BB CPL            ;
 $F2BC PUSH HL        ;
 $F2BD INC B          ;
 $F2BE INC B          ;
 $F2BF INC BC         ;
 $F2C0 XOR B          ;
 $F2C1 PUSH HL        ;
 $F2C2 ADD A,C        ;
 $F2C3 ADD A,D        ;
 $F2C4 RET NC         ;
 $F2C5 JP P,$7A83     ;
 $F2C8 PUSH HL        ;
 $F2C9 CP A           ;
 $F2CA JP P,$F686     ;
 $F2CD LD L,E         ;
 $F2CE HALT           ;
 $F2CF DI             ;
 $F2D0 INC BC         ;
 $F2D1 ADC A,B        ;
 $F2D2 PUSH HL        ;
 $F2D3 RLCA           ;
 $F2D4 CPL            ;
 $F2D5 PUSH HL        ;
 $F2D6 DEC B          ;
 $F2D7 INC BC         ;
 $F2D8 ADD A,E        ;
 $F2D9 LD A,$E6       ;
 $F2DB EX DE,HL       ;
 $F2DC JP P,$A803     ;
 $F2DF PUSH HL        ;
 $F2E0 ADD A,E        ;
 $F2E1 LD A,D         ;
 $F2E2 PUSH HL        ;
 $F2E3 RET C          ;
 $F2E4 JP P,$FD85     ;
 $F2E7 DEC DE         ;
 $F2E8 LD L,H         ;
 $F2E9 CP D           ;
 $F2EA JP P,$8282     ;
 $F2ED DEFB $FD       ;
 $F2EE RST $38        ;
 $F2EF CALL M,$82F2   ;
 $F2F2 ADD A,C        ;
 $F2F3 DEFB $FD       ;
 $F2F4 EI             ;
 $F2F5 LD L,$F3       ;
 $F2F7 INC DE         ;
 $F2F8 AND $E6        ;
 $F2FA LD E,C         ;
 $F2FB DI             ;
 $F2FC INC BC         ;
 $F2FD ADC A,B        ;
 $F2FE PUSH HL        ;
 $F2FF RLCA           ;
 $F300 CPL            ;
 $F301 PUSH HL        ;
 $F302 DEC B          ;
 $F303 LD (BC),A      ;
 $F304 ADD A,E        ;
 $F305 LD D,H         ;
 $F306 AND $A2        ;
 $F308 DI             ;
 $F309 ADD A,E        ;
 $F30A LD L,A         ;
 $F30B AND $66        ;
 $F30D DI             ;
 $F30E LD (DE),A      ;
 $F30F ADD A,D        ;
 $F310 DEFB $FD       ;
 $F311 RST $38        ;
 $F312 LD L,$F3       ;
 $F314 INC BC         ;
 $F315 XOR B          ;
 $F316 PUSH HL        ;
 $F317 ADD A,E        ;
 $F318 LD A,D         ;
 $F319 PUSH HL        ;
 $F31A INC B          ;
 $F31B DI             ;
 $F31C ADD A,E        ;
 $F31D LD D,H         ;
 $F31E AND $A2        ;
 $F320 DI             ;
 $F321 ADD A,E        ;
 $F322 LD L,A         ;
 $F323 AND $69        ;
 $F325 DI             ;
 $F326 RLCA           ;
 $F327 CP H           ;
 $F328 AND $FD        ;
 $F32A EI             ;
 $F32B LD C,$FF       ;
 $F32D JP P,$8803     ;
 $F330 PUSH HL        ;
 $F331 LD B,$C7       ;
 $F333 LD L,E         ;
 $F334 RLCA           ;
 $F335 CPL            ;
 $F336 PUSH HL        ;
 $F337 DEC B          ;
 $F338 LD (BC),A      ;
 $F339 ADD A,E        ;
 $F33A LD D,H         ;
 $F33B AND $A2        ;
 $F33D DI             ;
 $F33E ADD A,E        ;
 $F33F LD L,A         ;
 $F340 AND $66        ;
 $F342 DI             ;
 $F343 ADD A,D        ;
 $F344 ADD A,D        ;
 $F345 DEFB $FD       ;
 $F346 RST $38        ;
 $F347 CALL M,$12F2   ;
 $F34A ADD A,C        ;
 $F34B DEFB $FD       ;
 $F34C EI             ;
 $F34D LD E,C         ;
 $F34E DI             ;
 $F34F INC BC         ;
 $F350 XOR B          ;
 $F351 PUSH HL        ;
 $F352 SUB E          ;
 $F353 LD A,D         ;
 $F354 PUSH HL        ;
 $F355 ADD HL,SP      ;
 $F356 DI             ;
 $F357 LD SP,$03F3    ;
 $F35A ADC A,B        ;
 $F35B PUSH HL        ;
 $F35C INC BC         ;
 $F35D LD C,$E7       ;
 $F35F SUB E          ;
 $F360 AND $E6        ;
 $F362 CALL M,$76F2   ;
 $F365 DI             ;
 $F366 INC BC         ;
 $F367 ADC A,B        ;
 $F368 PUSH HL        ;
 $F369 RRCA           ;
 $F36A RRCA           ;
 $F36B ADD A,D        ;
 $F36C ADD A,D        ;
 $F36D DEFB $FD       ;
 $F36E RST $38        ;
 $F36F RET NC         ;
 $F370 JP P,$E683     ;
 $F373 AND $E5        ;
 $F375 JP P,$8002     ;
 $F378 CALL M,$8300   ;
 $F37B ADD A,B        ;
 $F37C DI             ;
 $F37D LD A,D         ;
 $F37E DI             ;
 $F37F DEC BC         ;
 $F380 RET Z          ;
 $F381 NOP            ;
 $F382 ADC A,C        ;
 $F383 DI             ;
 $F384 LD (BC),A      ;
 $F385 ADD A,B        ;
 $F386 DEFB $FD       ;
 $F387 NOP            ;
 $F388 DEC BC         ;
 $F389 LD IX,($A013)  ;
 $F38D LD A,($A036)   ;
 $F390 DEC A          ;
 $F391 CP (IX+$01)    ;
 $F394 JP NZ,$DC15    ;
 $F397 LD HL,$A034    ;
 $F39A INC A          ;
 $F39B CP (HL)        ;
 $F39C JP Z,$DC15     ;
 $F39F OR $01         ;
 $F3A1 RET            ;
 $F3A2 INC BC         ;
 $F3A3 ADC A,B        ;
 $F3A4 PUSH HL        ;
 $F3A5 RLCA           ;
 $F3A6 LD B,$E5       ;
 $F3A8 EI             ;
 $F3A9 DEFB $FD       ;
 $F3AA LD C,$69       ;
 $F3AC DI             ;
 $F3AD RLCA           ;
 $F3AE LD B,C         ;
 $F3AF SBC A,H        ;
 $F3B0 DEFB $FD       ;
 $F3B1 RST $38        ;
 $F3B2 ADD A,E        ;
 $F3B3 LD D,H         ;
 $F3B4 AND $C1        ;
 $F3B6 DI             ;
 $F3B7 ADD A,E        ;
 $F3B8 LD L,A         ;
 $F3B9 AND $C1        ;
 $F3BB DI             ;
 $F3BC RLCA           ;
 $F3BD CP H           ;
 $F3BE AND $FC        ;
 $F3C0 EI             ;
 $F3C1 DEC BC         ;
; This entry point is used by the routine at #R$A277.
*$F3C2 PUSH IY        ;
 $F3C4 PUSH HL        ;
 $F3C5 PUSH HL        ;
 $F3C6 POP IY         ;
 $F3C8 PUSH DE        ;
 $F3C9 PUSH BC        ;
 $F3CA LD D,$7F       ;
 $F3CC LD E,$3F       ;
 $F3CE LD B,$01       ;
 $F3D0 LD C,$01       ;
 $F3D2 LD L,$01       ;
*$F3D4 LD A,(IY+$00)  ;
 $F3D7 AND A          ;
 $F3D8 JP Z,$F488     ;
 $F3DB INC IY         ;
 $F3DD CP $08         ;
 $F3DF JR NZ,$F3EF    ;
 $F3E1 LD D,(IY+$00)  ;
 $F3E4 SET 7,D        ;
 $F3E6 INC IY         ;
 $F3E8 LD E,(IY+$00)  ;
 $F3EB INC IY         ;
 $F3ED JR $F3D4       ;
*$F3EF BIT 7,A        ;
 $F3F1 JR Z,$F414     ;
 $F3F3 LD B,A         ;
 $F3F4 AND $07        ;
 $F3F6 LD C,A         ;
 $F3F7 LD A,B         ;
 $F3F8 RRCA           ;
 $F3F9 AND $3C        ;
 $F3FB LD B,A         ;
 $F3FC LD A,(IY+$00)  ;
 $F3FF AND $3F        ;
 $F401 LD L,A         ;
 $F402 INC L          ;
 $F403 LD A,(IY+$00)  ;
 $F406 INC IY         ;
 $F408 RLCA           ;
 $F409 RLCA           ;
 $F40A AND $03        ;
 $F40C OR B           ;
 $F40D LD B,A         ;
 $F40E INC B          ;
 $F40F CALL $F56E     ;
 $F412 JR $F3D4       ;
*$F414 BIT 6,A        ;
 $F416 JR Z,$F42E     ;
 $F418 AND $07        ;
 $F41A PUSH DE        ;
 $F41B LD D,(IY+$00)  ;
 $F41E SET 7,D        ;
 $F420 INC IY         ;
 $F422 LD E,(IY+$00)  ;
 $F425 INC IY         ;
 $F427 CALL $F490     ;
 $F42A POP DE         ;
 $F42B JP $F3D4       ;
*$F42E BIT 5,A        ;
 $F430 JP Z,$F3D4     ;
 $F433 AND $07        ;
 $F435 RLCA           ;
 $F436 RLCA           ;
 $F437 RLCA           ;
 $F438 PUSH HL        ;
 $F439 PUSH DE        ;
 $F43A PUSH BC        ;
 $F43B LD C,A         ;
 $F43C LD H,(IY+$00)  ;
 $F43F INC IY         ;
 $F441 LD A,(IY+$00)  ;
 $F444 ADD A,$10      ;
 $F446 LD L,A         ;
 $F447 INC IY         ;
*$F449 LD A,(IY+$00)  ;
 $F44C INC IY         ;
 $F44E CP $FF         ;
 $F450 JR Z,$F482     ;
 $F452 LD B,A         ;
 $F453 AND $03        ;
 $F455 LD E,A         ;
 $F456 LD A,B         ;
 $F457 RRCA           ;
 $F458 RRCA           ;
 $F459 AND $3F        ;
 $F45B INC A          ;
 $F45C LD B,A         ;
*$F45D LD A,(HL)      ;
 $F45E AND $07        ;
 $F460 RLCA           ;
 $F461 RLCA           ;
 $F462 RLCA           ;
 $F463 CP C           ;
 $F464 JR NZ,$F468    ;
 $F466 XOR $38        ;
*$F468 RRCA           ;
 $F469 RRCA           ;
 $F46A RRCA           ;
 $F46B OR C           ;
 $F46C LD (HL),A      ;
 $F46D LD A,E         ;
 $F46E AND A          ;
 $F46F CALL Z,$F514   ;
 $F472 DEC A          ;
 $F473 CALL Z,$F540   ;
 $F476 DEC A          ;
 $F477 CALL Z,$F525   ;
 $F47A DEC A          ;
 $F47B CALL Z,$F536   ;
 $F47E DJNZ $F45D     ;
 $F480 JR $F449       ;
*$F482 POP BC         ;
 $F483 POP DE         ;
 $F484 POP HL         ;
 $F485 JP $F3D4       ;
*$F488 POP BC         ;
 $F489 POP DE         ;
 $F48A POP HL         ;
 $F48B POP IY         ;
 $F48D RET            ;
 $F48E NOP            ;
 $F48F NOP            ;
*$F490 LD ($F60B),A   ;
 $F493 PUSH DE        ;
 $F494 PUSH HL        ;
 $F495 LD HL,$00B0    ;
 $F498 PUSH HL        ;
*$F499 CALL $F50D     ;
 $F49C JR NZ,$F4A5    ;
 $F49E CALL $F565     ;
 $F4A1 JR NZ,$F499    ;
 $F4A3 JR $F4AB       ;
*$F4A5 CALL $F5D2     ;
 $F4A8 CALL $F55E     ;
*$F4AB LD HL,$0000    ;
 $F4AE LD ($F48E),HL  ;
*$F4B1 CALL $F54A     ;
 $F4B4 LD A,$00       ;
 $F4B6 JR Z,$F4CD     ;
 $F4B8 CALL $F50D     ;
 $F4BB LD A,$00       ;
 $F4BD JR NZ,$F4C8    ;
 $F4BF LD A,($F48E)   ;
 $F4C2 AND A          ;
 $F4C3 JR NZ,$F4C8    ;
 $F4C5 PUSH DE        ;
 $F4C6 LD A,$01       ;
*$F4C8 PUSH AF        ;
 $F4C9 CALL $F555     ;
 $F4CC POP AF         ;
*$F4CD LD ($F48E),A   ;
 $F4D0 CALL $F555     ;
 $F4D3 LD A,$00       ;
 $F4D5 JR Z,$F4EC     ;
 $F4D7 CALL $F50D     ;
 $F4DA LD A,$00       ;
 $F4DC JR NZ,$F4E7    ;
 $F4DE LD A,($F48F)   ;
 $F4E1 AND A          ;
 $F4E2 JR NZ,$F4E7    ;
 $F4E4 PUSH DE        ;
 $F4E5 LD A,$01       ;
*$F4E7 PUSH AF        ;
 $F4E8 CALL $F54A     ;
 $F4EB POP AF         ;
*$F4EC LD ($F48F),A   ;
 $F4EF CALL $F5D2     ;
 $F4F2 CALL $F55E     ;
 $F4F5 JR Z,$F4FF     ;
 $F4F7 CALL $F50D     ;
 $F4FA JR Z,$F4B1     ;
 $F4FC CALL $F5D2     ;
*$F4FF POP DE         ;
 $F500 LD A,E         ;
 $F501 CP $B0         ;
 $F503 JR NZ,$F499    ;
 $F505 LD A,$00       ;
 $F507 LD ($F60B),A   ;
 $F50A POP HL         ;
 $F50B POP DE         ;
 $F50C RET            ;
*$F50D PUSH HL        ;
 $F50E CALL $F5FB     ;
 $F511 AND (HL)       ;
 $F512 POP HL         ;
 $F513 RET            ;
*$F514 PUSH AF        ;
 $F515 PUSH DE        ;
 $F516 LD DE,$0020    ;
 $F519 AND A          ;
 $F51A SBC HL,DE      ;
 $F51C LD A,H         ;
 $F51D CP $57         ;
 $F51F JR NZ,$F522    ;
 $F521 ADD HL,DE      ;
*$F522 POP DE         ;
 $F523 POP AF         ;
 $F524 RET            ;
*$F525 PUSH AF        ;
 $F526 PUSH DE        ;
 $F527 LD DE,$0020    ;
 $F52A ADD HL,DE      ;
 $F52B LD A,H         ;
 $F52C CP $5A         ;
 $F52E JR NZ,$F532    ;
 $F530 AND A          ;
 $F531 SBC HL,DE      ;
 $F533 POP DE         ;
 $F534 POP AF         ;
 $F535 RET            ;
*$F536 PUSH AF        ;
 $F537 DEC HL         ;
 $F538 LD A,H         ;
 $F539 CP $57         ;
 $F53B JR NZ,$F53E    ;
 $F53D INC HL         ;
*$F53E POP AF         ;
 $F53F RET            ;
*$F540 PUSH AF        ;
 $F541 INC HL         ;
 $F542 LD A,H         ;
 $F543 CP $5A         ;
 $F545 JR NZ,$F548    ;
 $F547 DEC HL         ;
*$F548 POP AF         ;
 $F549 RET            ;
; This entry point is used by the routine at #R$F56E.
*$F54A INC E          ;
 $F54B LD H,A         ;
 $F54C LD A,E         ;
 $F54D CP $B0         ;
 $F54F LD A,H         ;
 $F550 RET NZ         ;
 $F551 DEC E          ;
 $F552 XOR A          ;
 $F553 LD A,H         ;
 $F554 RET            ;

; Routine at F555
;
; Used by the routines at #R$F1C1 and #R$F56E.
c$F555 DEC E         ;
 $F556 LD H,A        ;
 $F557 LD A,E        ;
 $F558 CP $FF        ;
 $F55A LD A,H        ;
 $F55B RET NZ        ;
 $F55C INC E         ;
 $F55D RET           ;

; Routine at F55E
;
; Used by the routines at #R$F1C1 and #R$F56E.
c$F55E INC D         ;
 $F55F RET NZ        ;
 $F560 DEC D         ;
 $F561 LD H,A        ;
 $F562 XOR A         ;
 $F563 LD A,H        ;
 $F564 RET           ;

; Routine at F565
;
; Used by the routines at #R$F1C1 and #R$F56E.
c$F565 DEC D         ;
 $F566 BIT 7,D       ;
 $F568 RET NZ        ;
 $F569 INC D         ;
 $F56A LD H,A        ;
 $F56B XOR A         ;
 $F56C LD A,H        ;
 $F56D RET           ;

; Routine at F56E
;
; Used by the routine at #R$F1C1.
c$F56E BIT 0,C       ;
 $F570 JR NZ,$F5A2   ;
 $F572 PUSH HL       ;
 $F573 PUSH BC       ;
*$F574 CALL $F5D2    ;
 $F577 BIT 2,C       ;
 $F579 JR Z,$F582    ;
 $F57B CALL $F565    ;
 $F57E JR Z,$F59F    ;
 $F580 JR $F587      ;
*$F582 CALL $F55E    ;
 $F585 JR Z,$F59F    ;
*$F587 DEC B         ;
 $F588 JR NZ,$F59C   ;
 $F58A BIT 1,C       ;
 $F58C JR Z,$F595    ;
 $F58E CALL $F555    ;
 $F591 JR Z,$F59F    ;
 $F593 JR $F59A      ;
*$F595 CALL $F54A    ;
 $F598 JR Z,$F59F    ;
*$F59A POP BC        ;
 $F59B PUSH BC       ;
*$F59C DEC L         ;
 $F59D JR NZ,$F574   ;
*$F59F POP BC        ;
 $F5A0 POP HL        ;
 $F5A1 RET           ;
*$F5A2 PUSH HL       ;
 $F5A3 PUSH BC       ;
*$F5A4 CALL $F5D2    ;
 $F5A7 BIT 1,C       ;
 $F5A9 JR Z,$F5B2    ;
 $F5AB CALL $F555    ;
 $F5AE JR Z,$F5CF    ;
 $F5B0 JR $F5B7      ;
*$F5B2 CALL $F54A    ;
 $F5B5 JR Z,$F5CF    ;
*$F5B7 DEC B         ;
 $F5B8 JR NZ,$F5CC   ;
 $F5BA BIT 2,C       ;
 $F5BC JR Z,$F5C5    ;
 $F5BE CALL $F565    ;
 $F5C1 JR Z,$F5CF    ;
 $F5C3 JR $F5CA      ;
*$F5C5 CALL $F55E    ;
 $F5C8 JR Z,$F5CF    ;
*$F5CA POP BC        ;
 $F5CB PUSH BC       ;
*$F5CC DEC L         ;
 $F5CD JR NZ,$F5A4   ;
*$F5CF POP BC        ;
 $F5D0 POP HL        ;
 $F5D1 RET           ;
; This entry point is used by the routine at #R$F1C1.
*$F5D2 PUSH HL       ;
 $F5D3 CALL $F5FB    ;
 $F5D6 PUSH AF       ;
 $F5D7 PUSH HL       ;
 $F5D8 LD A,H        ;
 $F5D9 AND $18       ;
 $F5DB RRCA          ;
 $F5DC RRCA          ;
 $F5DD RRCA          ;
 $F5DE ADD A,$58     ;
 $F5E0 LD H,A        ;
 $F5E1 LD A,(HL)     ;
 $F5E2 AND $38       ;
 $F5E4 LD (HL),A     ;
 $F5E5 LD A,($F60B)  ;
 $F5E8 RLCA          ;
 $F5E9 RLCA          ;
 $F5EA RLCA          ;
 $F5EB CP (HL)       ;
 $F5EC JR NZ,$F5F0   ;
 $F5EE XOR $38       ;
*$F5F0 RRCA          ;
 $F5F1 RRCA          ;
 $F5F2 RRCA          ;
 $F5F3 OR (HL)       ;
 $F5F4 LD (HL),A     ;
 $F5F5 POP HL        ;
 $F5F6 POP AF        ;
 $F5F7 OR (HL)       ;
 $F5F8 LD (HL),A     ;
 $F5F9 POP HL        ;
 $F5FA RET           ;
; This entry point is used by the routine at #R$F1C1.
*$F5FB PUSH BC       ;
 $F5FC LD B,E        ;
 $F5FD LD C,D        ;
 $F5FE CALL $22AA    ;
 $F601 LD B,A        ;
 $F602 INC B         ;
 $F603 LD A,$01      ;
*$F605 RRC A         ;
 $F607 DJNZ $F605    ;
 $F609 POP BC        ;
 $F60A RET           ;
 $F60B JR C,$F612    ;
 $F60D LD B,A        ;
 $F60E RST $38       ;
 $F60F LD C,D        ;
 $F610 ADD A,D       ;
 $F611 CP $47        ;
 $F613 XOR B         ;
 $F614 DEFB $FD      ;
 $F615 LD E,C        ;
 $F616 DEFB $ED,$FC  ;
 $F618 LD E,B        ;
 $F619 LD A,($36FC)  ;
 $F61C LD L,(HL)     ;
 $F61D EI            ;
 $F61E SCF           ;
 $F61F LD L,(HL)     ;
 $F620 EI            ;
 $F621 DEC BC        ;
 $F622 XOR D         ;
 $F623 JP M,$F03E    ;
 $F626 LD SP,HL      ;
 $F627 LD B,$28      ;
 $F629 LD SP,HL      ;
 $F62A LD E,H        ;
 $F62B LD L,B        ;
*$F62C RET M         ;
 $F62D LD E,A        ;
 $F62E CP (HL)       ;
 $F62F RST $30       ;
 $F630 DEC A         ;
 $F631 DEFB $ED,$F6  ;
 $F633 INC C         ;
 $F634 JR C,$F62C    ;
 $F636 RST $38       ;
 $F637 NOP           ;
 $F638 EX AF,AF'     ;
 $F639 LD A,A        ;
 $F63A XOR A         ;
 $F63B EI            ;
 $F63C CP $FF        ;
 $F63E LD A,H        ;
 $F63F ADD A,A       ;
 $F640 JP NZ,$FEFE   ;
 $F643 CP $FE        ;
 $F645 CP $FE        ;
 $F647 EX AF,AF'     ;
 $F648 DAA           ;
 $F649 XOR A         ;
 $F64A EI            ;
 $F64B CP $E7        ;
 $F64D CPL           ;
 $F64E ADD A,D       ;
 $F64F XOR (HL)      ;
 $F650 EX AF,AF'     ;
 $F651 DAA           ;
 $F652 LD B,B        ;
 $F653 ADD A,C       ;
 $F654 DJNZ $F65E    ;
 $F656 SCF           ;
 $F657 XOR A         ;
 $F658 RST $38       ;
 $F659 CP $C7        ;
 $F65B RRA           ;
 $F65C ADC A,D       ;
 $F65D LD (HL),B     ;
*$F65E EX AF,AF'     ;
 $F65F LD H,A        ;
 $F660 SBC A,A       ;
 $F661 SBC A,H       ;
 $F662 ADC A,$A5     ;
 $F664 DJNZ $F66E    ;
 $F666 LD E,B        ;
 $F667 SBC A,A       ;
 $F668 ADD A,B       ;
 $F669 DJNZ $F673    ;
 $F66B LD B,A        ;
 $F66C XOR A         ;
 $F66D RST $38       ;
*$F66E CP $A7        ;
 $F670 RRCA          ;
 $F671 ADC A,D       ;
 $F672 LD H,C        ;
*$F673 LD B,B        ;
 $F674 JR $F6CB      ;
 $F676 EX AF,AF'     ;
 $F677 LD C,A        ;
 $F678 LD H,D        ;
 $F679 LD SP,HL      ;
*$F67A CP $9D        ;
 $F67C ADC A,$08     ;
 $F67E LD L,B        ;
 $F67F JR NC,$F67A   ;
 $F681 CP $D9        ;
 $F683 RST $28       ;
 $F684 ADD A,B       ;
 $F685 LD D,L        ;
; This entry point is used by the routine at #R$F1C1.
*$F686 LD B,B        ;
 $F687 LD H,A        ;
 $F688 AND E         ;
 $F689 EX AF,AF'     ;
 $F68A LD (HL),$4F   ;
 $F68C ADC A,H       ;
 $F68D ADD A,L       ;
 $F68E ADC A,E       ;
 $F68F DEC B         ;
 $F690 LD B,(HL)     ;
 $F691 LD ($084D),A  ;
 $F694 LD L,$47      ;
 $F696 ADC A,H       ;
 $F697 LD B,H        ;
 $F698 ADC A,A       ;
 $F699 LD B,L        ;
 $F69A LD B,(HL)     ;
 $F69B DEC HL        ;
 $F69C LD B,(HL)     ;
 $F69D LD ($0B58),HL ;
 $F6A0 DEC C         ;
 $F6A1 LD A,($3403)  ;
 $F6A4 DEC BC        ;
 $F6A5 DEC B         ;
 $F6A6 LD A,($08FF)  ;
 $F6A9 LD D,B        ;
 $F6AA ADD A,A       ;
 $F6AB ADC A,B       ;
 $F6AC ADC A,$8D     ;
 $F6AE ADD A,A       ;
 $F6AF ADD A,H       ;
 $F6B0 RET Z         ;
 $F6B1 ADD A,(HL)    ;
 $F6B2 LD B,L        ;
 $F6B3 LD H,$58      ;
 $F6B5 LD A,(BC)     ;
 $F6B6 INC DE        ;
 $F6B7 LD L,$00      ;
 $F6B9 LD BC,$0D24   ;
 $F6BC LD B,$05      ;
 $F6BE LD (DE),A     ;
 $F6BF DEC BC        ;
 $F6C0 LD (BC),A     ;
 $F6C1 INC C         ;
 $F6C2 ADD HL,BC     ;
 $F6C3 EX AF,AF'     ;
 $F6C4 DEC BC        ;
 $F6C5 LD A,(BC)     ;
 $F6C6 RST $38       ;
 $F6C7 EX AF,AF'     ;
 $F6C8 LD B,A        ;
 $F6C9 LD H,B        ;
 $F6CA ADD A,B       ;
*$F6CB SUB A         ;
 $F6CC XOR L         ;
 $F6CD SUB A         ;
 $F6CE ADD A,H       ;
 $F6CF ADD A,(HL)    ;
 $F6D0 ADD A,(HL)    ;
 $F6D1 ADD A,A       ;
 $F6D2 LD B,C        ;
 $F6D3 LD D,A        ;
 $F6D4 LD (HL),H     ;
 $F6D5 LD B,B        ;
 $F6D6 LD B,D        ;
 $F6D7 LD E,A        ;
 $F6D8 EX AF,AF'     ;
 $F6D9 LD E,D        ;
 $F6DA ADC A,(HL)    ;
 $F6DB ADD A,(HL)    ;
 $F6DC RST $00       ;
 $F6DD EX AF,AF'     ;
 $F6DE LD D,H        ;
 $F6DF ADC A,A       ;
 $F6E0 ADD A,E       ;
 $F6E1 LD B,L        ;
 $F6E2 EX AF,AF'     ;
 $F6E3 LD D,L        ;
 $F6E4 ADC A,A       ;
 $F6E5 ADD A,E       ;
 $F6E6 LD B,L        ;
 $F6E7 EX AF,AF'     ;
 $F6E8 LD E,E        ;
 $F6E9 ADC A,E       ;
 $F6EA ADD A,E       ;
 $F6EB LD B,C        ;
 $F6EC NOP           ;
 $F6ED EX AF,AF'     ;
 $F6EE DEC E         ;
 $F6EF CPL           ;
 $F6F0 ADC A,(HL)    ;
 $F6F1 INC BC        ;
 $F6F2 EX AF,AF'     ;
 $F6F3 NOP           ;
 $F6F4 LD E,(HL)     ;
 $F6F5 ADD A,E       ;
 $F6F6 EXX           ;
 $F6F7 ADC A,C       ;
 $F6F8 LD C,L        ;
 $F6F9 ADD A,D       ;
 $F6FA LD C,(HL)     ;
 $F6FB ADC A,E       ;
 $F6FC SBC A,E       ;
 $F6FD EX AF,AF'     ;
 $F6FE DEC E         ;
 $F6FF JR NC,$F692   ;
 $F701 INC DE        ;
 $F702 ADD A,B       ;
 $F703 SBC A,B       ;
 $F704 ADD A,E       ;
 $F705 ADC A,$89     ;
 $F707 LD D,D        ;
 $F708 ADD A,B       ;
 $F709 ADD A,L       ;
 $F70A SUB L         ;
 $F70B EX AF,AF'     ;
 $F70C ADD A,H       ;
 $F70D LD B,E        ;
 $F70E ADD A,L       ;
 $F70F RST $00       ;
 $F710 SUB (HL)      ;
 $F711 EX AF,AF'     ;
 $F712 ADD A,L       ;
 $F713 DEC DE        ;
 $F714 SBC A,(HL)    ;
 $F715 ADC A,(HL)    ;
 $F716 ADD A,E       ;
 $F717 LD B,A        ;
 $F718 ADD A,(HL)    ;
 $F719 ADC A,D       ;
 $F71A ADD A,E       ;
 $F71B LD C,(HL)     ;
 $F71C ADD A,(HL)    ;
 $F71D LD C,(HL)     ;
 $F71E EX AF,AF'     ;
 $F71F CCF           ;
 $F720 LD D,(HL)     ;
 $F721 ADD A,(HL)    ;
 $F722 SBC A,H       ;
 $F723 ADD A,H       ;
 $F724 LD B,H        ;
 $F725 ADD A,B       ;
 $F726 SBC A,D       ;
 $F727 ADD A,D       ;
 $F728 ADD A,A       ;
 $F729 EX AF,AF'     ;
 $F72A JR Z,$F792    ;
 $F72C ADD A,E       ;
 $F72D LD C,B        ;
 $F72E ADD A,(HL)    ;
 $F72F RET           ;
 $F730 ADD A,L       ;
 $F731 ADC A,B       ;
 $F732 ADD A,B       ;
 $F733 RET           ;
 $F734 LD B,B        ;
 $F735 RLA           ;
 $F736 LD H,H        ;
 $F737 EX AF,AF'     ;
 $F738 LD B,E        ;
 $F739 ADC A,E       ;
 $F73A ADD A,A       ;
 $F73B LD A,(DE)     ;
 $F73C POP AF        ;
 $F73D SCF           ;
 $F73E JP PO,$FF2F   ;
 $F741 LD A,(HL)     ;
 $F742 ADC A,E       ;
 $F743 JP C,$4E89    ;
 $F746 ADD A,D       ;
 $F747 ADD A,(HL)    ;
 $F748 ADC A,E       ;
 $F749 SUB B         ;
 $F74A ADC A,C       ;
 $F74B POP DE        ;
 $F74C ADD A,B       ;
 $F74D LD B,H        ;
 $F74E ADC A,E       ;
 $F74F LD C,(HL)     ;
 $F750 XOR L         ;
 $F751 LD D,H        ;
 $F752 ADD A,H       ;
 $F753 ADC A,E       ;
 $F754 ADD A,B       ;
 $F755 CALL NC,$5085 ;
 $F758 ADD A,A       ;
 $F759 DEC D         ;
 $F75A AND (HL)      ;
 $F75B SUB C         ;
 $F75C AND A         ;
 $F75D DJNZ $F767    ;
*$F75F LD C,B        ;
 $F760 LD L,B        ;
 $F761 ADC A,L       ;
 $F762 ADD A,A       ;
 $F763 CP H          ;
 $F764 SBC A,(HL)    ;
 $F765 EX AF,AF'     ;
 $F766 LD (HL),$A7   ;
 $F768 ADD A,E       ;
 $F769 LD A,(HL)     ;
 $F76A EX AF,AF'     ;
 $F76B LD L,A        ;
 $F76C LD A,E        ;
 $F76D ADD A,(HL)    ;
 $F76E LD C,$86      ;
 $F770 JP $6740      ;
 $F773 LD L,H        ;
 $F774 LD B,C        ;
 $F775 LD B,L        ;
 $F776 LD (HL),L     ;
 $F777 LD ($0559),HL ;
 $F77A ADD HL,BC     ;
 $F77B LD (BC),A     ;
 $F77C DEC B         ;
 $F77D LD B,$03      ;
 $F77F NOP           ;
 $F780 INC BC        ;
 $F781 NOP           ;
*$F782 RLCA          ;
 $F783 DEC B         ;
 $F784 LD B,$00      ;
*$F786 RLCA          ;
 $F787 RST $38       ;
 $F788 INC H         ;
 $F789 LD E,C        ;
 $F78A LD C,E        ;
 $F78B DEC C         ;
 $F78C LD (DE),A     ;
 $F78D DEC SP        ;
 $F78E DJNZ $F791    ;
 $F790 LD C,$31      ;
*$F792 EX AF,AF'     ;
 $F793 DEC BC        ;
 $F794 LD (BC),A     ;
 $F795 RLA           ;
 $F796 LD (BC),A     ;
 $F797 DEC BC        ;
 $F798 NOP           ;
 $F799 LD (BC),A     ;
 $F79A ADD HL,HL     ;
 $F79B NOP           ;
 $F79C RLCA          ;
 $F79D RST $38       ;
 $F79E INC HL        ;
 $F79F LD E,C        ;
 $F7A0 JR NZ,$F7A3   ;
 $F7A2 NOP           ;
*$F7A3 INC BC        ;
 $F7A4 INC E         ;
 $F7A5 ADD HL,SP     ;
 $F7A6 LD ($000B),HL ;
 $F7A9 DEC B         ;
 $F7AA JR $F7AF      ;
 $F7AC LD D,$03      ;
 $F7AE INC D         ;
*$F7AF INC BC        ;
 $F7B0 LD E,$20      ;
 $F7B2 DEC DE        ;
 $F7B3 LD A,(DE)     ;
 $F7B4 INC BC        ;
 $F7B5 INC D         ;
 $F7B6 RLCA          ;
 $F7B7 LD (DE),A     ;
 $F7B8 LD BC,$1610   ;
 $F7BB RLCA          ;
 $F7BC RST $38       ;
 $F7BD NOP           ;
 $F7BE EX AF,AF'     ;
 $F7BF LD A,A        ;
 $F7C0 XOR A         ;
 $F7C1 RST $38       ;
 $F7C2 CP $FF        ;
 $F7C4 CP L          ;
 $F7C5 ADD A,A       ;
 $F7C6 ADD A,C       ;
 $F7C7 CP $FE        ;
 $F7C9 CP $FE        ;
 $F7CB EX AF,AF'     ;
 $F7CC LD E,A        ;
 $F7CD LD E,B        ;
 $F7CE CALL C,$C9EE  ;
 $F7D1 AND $D8       ;
 $F7D3 XOR $CB       ;
 $F7D5 AND (HL)      ;
 $F7D6 EX AF,AF'     ;
 $F7D7 LD E,A        ;
 $F7D8 LD A,A        ;
 $F7D9 ADD A,B       ;
 $F7DA JR NZ,$F7E4   ;
 $F7DC RLCA          ;
 $F7DD JR NC,$F75F   ;
 $F7DF EX AF,AF'     ;
 $F7E0 LD SP,HL      ;
 $F7E1 CP $C9        ;
 $F7E3 AND $85       ;
 $F7E5 LD H,$08      ;
 $F7E7 JR NC,$F867   ;
 $F7E9 ADD A,L       ;
 $F7EA RRCA          ;
 $F7EB RST $38       ;
 $F7EC CP $8B        ;
 $F7EE ADD A,$81     ;
 $F7F0 DJNZ $F7FA    ;
 $F7F2 JR NZ,$F782   ;
 $F7F4 SBC A,H       ;
 $F7F5 RST $08       ;
 $F7F6 EX AF,AF'     ;
 $F7F7 INC B         ;
 $F7F8 JR NC,$F786   ;
*$F7FA RET Z         ;
 $F7FB LD B,D        ;
 $F7FC INC B         ;
 $F7FD LD E,H        ;
 $F7FE EX AF,AF'     ;
 $F7FF JR NZ,$F849   ;
 $F801 AND H         ;
 $F802 RRCA          ;
 $F803 LD B,D        ;
 $F804 LD HL,($0860) ;
 $F807 JR NZ,$F850   ;
 $F809 ADC A,B       ;
 $F80A CP $08        ;
 $F80C LD E,A        ;
 $F80D LD C,A        ;
 $F80E ADC A,B       ;
 $F80F RST $00       ;
 $F810 XOR L         ;
 $F811 SUB $88       ;
 $F813 RLCA          ;
 $F814 JP $821F      ;
 $F817 DJNZ $F821    ;
 $F819 LD E,A        ;
 $F81A LD E,B        ;
 $F81B ADD A,D       ;
 $F81C EX AF,AF'     ;
 $F81D EX AF,AF'     ;
 $F81E LD L,A        ;
 $F81F LD C,B        ;
 $F820 ADC A,(HL)    ;
*$F821 LD A,(HL)     ;
 $F822 EX AF,AF'     ;
 $F823 JR NC,$F862   ;
 $F825 ADC A,(HL)    ;
 $F826 LD E,A        ;
 $F827 JR NZ,$F881   ;
 $F829 NOP           ;
 $F82A ADD HL,SP     ;
 $F82B LD A,($0137)  ;
 $F82E NOP           ;
 $F82F DEC L         ;
 $F830 JR NC,$F865   ;
 $F832 LD (BC),A     ;
 $F833 DEC L         ;
 $F834 LD D,$03      ;
 $F836 DJNZ $F85F    ;
 $F838 DEC B         ;
 $F839 LD (BC),A     ;
 $F83A ADD HL,DE     ;
 $F83B LD (BC),A     ;
 $F83C DEC DE        ;
 $F83D LD (BC),A     ;
 $F83E DEC E         ;
 $F83F LD A,(DE)     ;
 $F840 LD BC,$0023   ;
 $F843 ADD HL,DE     ;
 $F844 INC D         ;
 $F845 LD (BC),A     ;
 $F846 INC DE        ;
 $F847 LD C,$03      ;
*$F849 LD DE,$0B08   ;
 $F84C LD B,$05      ;
 $F84E INC B         ;
 $F84F LD (BC),A     ;
*$F850 RLCA          ;
 $F851 RST $38       ;
 $F852 LD B,A        ;
 $F853 LD B,D        ;
 $F854 LD B,A        ;
 $F855 EX AF,AF'     ;
 $F856 LD D,H        ;
 $F857 LD A,$82      ;
 $F859 RST $00       ;
 $F85A ADD A,(HL)    ;
 $F85B ADC A,D       ;
 $F85C ADD A,H       ;
 $F85D RET Z         ;
 $F85E EX AF,AF'     ;
*$F85F LD C,C        ;
 $F860 INC A         ;
 $F861 ADD A,B       ;
*$F862 JP Z,$5242    ;
*$F865 INC A         ;
 $F866 NOP           ;
*$F867 LD L,C        ;
 $F868 EX AF,AF'     ;
 $F869 LD A,A        ;
 $F86A LD H,H        ;
 $F86B RST $18       ;
 $F86C RST $28       ;
 $F86D EX AF,AF'     ;
 $F86E NOP           ;
 $F86F LD C,(HL)     ;
 $F870 OR B          ;
 $F871 OR E          ;
 $F872 ADD A,B       ;
 $F873 LD E,A        ;
 $F874 ADC A,B       ;
 $F875 XOR E         ;
 $F876 EX AF,AF'     ;
 $F877 DEC (HL)      ;
 $F878 LD C,A        ;
 $F879 ADD A,E       ;
 $F87A DEC BC        ;
 $F87B ADC A,D       ;
 $F87C LD A,$08      ;
 $F87E LD C,(HL)     ;
 $F87F CPL           ;
 $F880 ADD A,H       ;
*$F881 LD H,L        ;
 $F882 ADD A,L       ;
 $F883 INC C         ;
 $F884 CP C          ;
 $F885 DEC DE        ;
 $F886 ADD A,C       ;
 $F887 AND H         ;
 $F888 ADD A,D       ;
 $F889 SBC A,(HL)    ;
 $F88A SBC A,E       ;
 $F88B ADC A,$92     ;
 $F88D LD C,B        ;
 $F88E SUB C         ;
 $F88F RES 0,D       ;
 $F891 ADC A,B       ;
 $F892 ADD A,B       ;
 $F893 SUB C         ;
 $F894 ADD A,E       ;
 $F895 LD D,L        ;
 $F896 XOR H         ;
 $F897 SUB $81       ;
 $F899 LD D,(HL)     ;
 $F89A XOR A         ;
 $F89B SUB L         ;
 $F89C EX AF,AF'     ;
 $F89D INC E         ;
 $F89E LD L,L        ;
 $F89F ADD A,B       ;
 $F8A0 SBC A,L       ;
 $F8A1 RST $08       ;
 $F8A2 LD H,L        ;
 $F8A3 EX AF,AF'     ;
 $F8A4 DEC HL        ;
 $F8A5 ADC A,A       ;
 $F8A6 ADD A,E       ;
 $F8A7 LD D,(HL)     ;
 $F8A8 ADD A,D       ;
 $F8A9 OUT ($87),A   ;
 $F8AB RRCA          ;
 $F8AC ADD A,B       ;
 $F8AD JP C,$4997    ;
 $F8B0 EX AF,AF'     ;
 $F8B1 LD H,E        ;
 $F8B2 LD L,B        ;
 $F8B3 ADD A,L       ;
 $F8B4 LD C,(HL)     ;
 $F8B5 ADD A,A       ;
 $F8B6 LD C,(HL)     ;
 $F8B7 SBC A,D       ;
 $F8B8 LD C,L        ;
 $F8B9 ADC A,E       ;
 $F8BA ADD A,L       ;
 $F8BB LD B,B        ;
 $F8BC LD D,H        ;
 $F8BD LD (HL),D     ;
 $F8BE EX AF,AF'     ;
 $F8BF ADD HL,HL     ;
 $F8C0 ADC A,A       ;
 $F8C1 CP E          ;
 $F8C2 LD E,H        ;
 $F8C3 EX AF,AF'     ;
 $F8C4 LD L,$4F      ;
 $F8C6 PUSH BC       ;
 $F8C7 RRA           ;
 $F8C8 EX AF,AF'     ;
 $F8C9 SCF           ;
 $F8CA LD (HL),L     ;
 $F8CB RST $08       ;
 $F8CC DEC H         ;
 $F8CD EX AF,AF'     ;
 $F8CE SCF           ;
 $F8CF LD (HL),B     ;
 $F8D0 ADD A,(HL)    ;
 $F8D1 SBC A,B       ;
 $F8D2 EX AF,AF'     ;
 $F8D3 RRA           ;
 $F8D4 LD L,L        ;
 $F8D5 CP E          ;
 $F8D6 LD E,L        ;
 $F8D7 EX AF,AF'     ;
 $F8D8 DEC H         ;
 $F8D9 LD L,D        ;
 $F8DA OR A          ;
 $F8DB SBC A,D       ;
 $F8DC EX AF,AF'     ;
 $F8DD SCF           ;
 $F8DE LD H,C        ;
 $F8DF ADD A,(HL)    ;
 $F8E0 RST $10       ;
 $F8E1 LD B,D        ;
 $F8E2 DEC E         ;
 $F8E3 LD H,A        ;
 $F8E4 LD B,B        ;
 $F8E5 INC (HL)      ;
 $F8E6 LD (HL),D     ;
 $F8E7 EX AF,AF'     ;
 $F8E8 LD E,H        ;
 $F8E9 HALT          ;
 $F8EA SBC A,E       ;
 $F8EB ADC A,L       ;
 $F8EC LD B,H        ;
 $F8ED DEC SP        ;
 $F8EE LD C,(HL)     ;
 $F8EF LD ($6759),HL ;
 $F8F2 INC C         ;
 $F8F3 LD BC,$010E   ;
 $F8F6 JR $F90A      ;
 $F8F8 LD BC,$0502   ;
 $F8FB INC B         ;
 $F8FC DEC B         ;
 $F8FD LD (BC),A     ;
 $F8FE RLCA          ;
 $F8FF RST $38       ;
 $F900 EX AF,AF'     ;
 $F901 LD H,B        ;
 $F902 LD L,B        ;
 $F903 ADC A,C       ;
 $F904 LD B,L        ;
 $F905 LD B,A        ;
 $F906 LD H,C        ;
 $F907 LD L,C        ;
 $F908 LD B,D        ;
 $F909 INC SP        ;
*$F90A LD D,A        ;
 $F90B LD B,D        ;
 $F90C LD ($2057),HL ;
 $F90F LD E,C        ;
 $F910 RST $28       ;
 $F911 INC HL        ;
 $F912 NOP           ;
 $F913 DEC E         ;
 $F914 NOP           ;
 $F915 DEC HL        ;
 $F916 NOP           ;
*$F917 DEC B         ;
*$F918 INC B         ;
 $F919 LD B,$09      ;
 $F91B RST $38       ;
 $F91C EX AF,AF'     ;
 $F91D NOP           ;
 $F91E JR NC,$F918   ;
 $F920 CP $98        ;
 $F922 ADC A,(HL)    ;
 $F923 LD B,H        ;
 $F924 ADD HL,SP     ;
 $F925 LD (HL),$00   ;
 $F927 RET           ;
 $F928 EX AF,AF'     ;
 $F929 LD A,A        ;
 $F92A LD D,A        ;
 $F92B RST $08       ;
 $F92C AND $FE       ;
 $F92E CP $FC        ;
 $F930 CP $FE        ;
 $F932 CP $08        ;
 $F934 NOP           ;
 $F935 SUB B         ;
 $F936 OR D          ;
 $F937 RLA           ;
 $F938 ADD A,E       ;
 $F939 CP $83        ;
 $F93B IN A,($88)    ;
 $F93D POP HL        ;
 $F93E ADD A,H       ;
 $F93F LD C,B        ;
 $F940 EX AF,AF'     ;
 $F941 CCF           ;
 $F942 XOR A         ;
 $F943 ADD A,A       ;
 $F944 LD B,$B4      ;
 $F946 RLA           ;
 $F947 OR E          ;
 $F948 RLA           ;
 $F949 ADD A,E       ;
 $F94A CP $83        ;
 $F94C CALL NC,$5290 ;
 $F94F POP AF        ;
 $F950 CP C          ;
 $F951 ADD A,H       ;
 $F952 LD D,D        ;
 $F953 ADD A,(HL)    ;
 $F954 LD B,L        ;
 $F955 EX AF,AF'     ;
 $F956 DEC H         ;
 $F957 XOR B         ;
 $F958 ADD A,E       ;
 $F959 CP $83        ;
 $F95B RLCA          ;
 $F95C SUB B         ;
 $F95D ADC A,D       ;
 $F95E EX AF,AF'     ;
 $F95F DEC HL        ;
 $F960 SUB B         ;
 $F961 RET C         ;
 $F962 LD L,H        ;
 $F963 ADD A,C       ;
 $F964 JR NZ,$F96E   ;
 $F966 JR C,$F917    ;
 $F968 CP E          ;
 $F969 SBC A,$81     ;
 $F96B JR NZ,$F9AD   ;
 $F96D LD B,L        ;
*$F96E SUB L         ;
 $F96F LD B,B        ;
 $F970 INC A         ;
 $F971 LD (HL),C     ;
 $F972 JR NZ,$F9CC   ;
 $F974 LD H,B        ;
 $F975 EX AF,AF'     ;
 $F976 DEC B         ;
 $F977 LD A,(BC)     ;
 $F978 INC BC        ;
 $F979 EX AF,AF'     ;
 $F97A RST $38       ;
 $F97B EX AF,AF'     ;
 $F97C CPL           ;
 $F97D ADC A,A       ;
 $F97E SBC A,E       ;
 $F97F ADC A,(HL)    ;
 $F980 LD B,D        ;
 $F981 DEC L         ;
 $F982 ADC A,(HL)    ;
*$F983 LD ($8658),HL ;
 $F986 LD B,$01      ;
 $F988 INC B         ;
 $F989 LD BC,$010E   ;
 $F98C LD B,$14      ;
 $F98E LD BC,$1116   ;
 $F991 INC H         ;
 $F992 INC BC        ;
 $F993 LD ($1C0B),HL ;
 $F996 DEC B         ;
 $F997 LD A,(DE)     ;
 $F998 INC BC        ;
 $F999 JR $F99A      ;
 $F99B EX AF,AF'     ;
 $F99C LD D,A        ;
 $F99D ADC A,(HL)    ;
 $F99E RST $38       ;
 $F99F CP $9C        ;
 $F9A1 RST $08       ;
 $F9A2 EX AF,AF'     ;
 $F9A3 LD E,B        ;
 $F9A4 LD C,A        ;
 $F9A5 ADC A,D       ;
 $F9A6 LD H,$08      ;
 $F9A8 NOP           ;
 $F9A9 JR C,$F983    ;
 $F9AB INC L         ;
 $F9AC LD B,H        ;
*$F9AD LD H,D        ;
 $F9AE JR C,$F9B8    ;
 $F9B0 NOP           ;
 $F9B1 CCF           ;
 $F9B2 XOR B         ;
 $F9B3 LD HL,($0008) ;
 $F9B6 LD C,B        ;
 $F9B7 XOR B         ;
*$F9B8 JR Z,$F9C2    ;
 $F9BA NOP           ;
 $F9BB LD D,B        ;
 $F9BC XOR B         ;
 $F9BD DAA           ;
 $F9BE EX AF,AF'     ;
 $F9BF NOP           ;
 $F9C0 LD E,B        ;
 $F9C1 RET Z         ;
*$F9C2 LD H,L        ;
 $F9C3 EX AF,AF'     ;
 $F9C4 NOP           ;
 $F9C5 LD H,B        ;
 $F9C6 RET NZ        ;
 $F9C7 EX (SP),HL    ;
 $F9C8 EX AF,AF'     ;
 $F9C9 NOP           ;
 $F9CA LD L,B        ;
 $F9CB RET NZ        ;
*$F9CC JR NZ,$F9D6   ;
 $F9CE NOP           ;
 $F9CF LD L,A        ;
 $F9D0 CP B          ;
 $F9D1 RST $18       ;
 $F9D2 EX AF,AF'     ;
 $F9D3 NOP           ;
 $F9D4 HALT          ;
 $F9D5 CP B          ;
*$F9D6 SBC A,(HL)    ;
 $F9D7 EX AF,AF'     ;
 $F9D8 NOP           ;
 $F9D9 LD A,(HL)     ;
 $F9DA OR B          ;
 $F9DB IN A,($08)    ;
 $F9DD NOP           ;
 $F9DE ADD A,L       ;
 $F9DF OR B          ;
 $F9E0 SBC A,D       ;
 $F9E1 EX AF,AF'     ;
 $F9E2 NOP           ;
 $F9E3 ADC A,E       ;
 $F9E4 OR B          ;
 $F9E5 JR $FA29      ;
 $F9E7 DEC SP        ;
 $F9E8 XOR A         ;
 $F9E9 LD ($4358),HL ;
 $F9EC INC B         ;
 $F9ED DEC C         ;
 $F9EE RST $38       ;
 $F9EF NOP           ;
 $F9F0 EX AF,AF'     ;
 $F9F1 LD A,A        ;
 $F9F2 LD C,A        ;
 $F9F3 CP A          ;
 $F9F4 SBC A,$FE     ;
 $F9F6 CP $FC        ;
 $F9F8 CP $FE        ;
 $F9FA CP $08        ;
 $F9FC LD A,A        ;
 $F9FD LD D,B        ;
 $F9FE ADC A,H       ;
 $F9FF OR (HL)       ;
 $FA00 CALL NC,$84B0 ;
 $FA03 SUB A         ;
 $FA04 EX AF,AF'     ;
 $FA05 LD C,A        ;
 $FA06 LD D,A        ;
 $FA07 ADC A,L       ;
 $FA08 RET Z         ;
 $FA09 ADD A,H       ;
 $FA0A INC BC        ;
 $FA0B ADD A,A       ;
 $FA0C INC B         ;
 $FA0D SUB E         ;
 $FA0E EX AF,AF'     ;
 $FA0F ADC A,(HL)    ;
 $FA10 AND D         ;
 $FA11 ADD A,D       ;
 $FA12 SUB C         ;
 $FA13 SUB (HL)      ;
 $FA14 CP B          ;
 $FA15 EX AF,AF'     ;
 $FA16 LD C,A        ;
 $FA17 LD D,(HL)     ;
 $FA18 ADD A,(HL)    ;
 $FA19 SUB $82       ;
 $FA1B RET C         ;
 $FA1C ADD A,(HL)    ;
 $FA1D LD (HL),L     ;
 $FA1E EX AF,AF'     ;
 $FA1F LD A,C        ;
 $FA20 LD D,C        ;
 $FA21 ADC A,L       ;
 $FA22 ADD A,(HL)    ;
 $FA23 ADD A,H       ;
 $FA24 DEC B         ;
 $FA25 SBC A,C       ;
 $FA26 LD C,H        ;
 $FA27 ADD A,L       ;
 $FA28 LD A,(BC)     ;
*$FA29 ADD A,(HL)    ;
 $FA2A ADC A,B       ;
 $FA2B CP L          ;
 $FA2C LD E,L        ;
 $FA2D ADD A,H       ;
 $FA2E DEC B         ;
 $FA2F ADD A,A       ;
 $FA30 EX AF,AF'     ;
 $FA31 AND A         ;
 $FA32 OUT ($84),A   ;
 $FA34 JP $CF9D      ;
 $FA37 ADD A,L       ;
 $FA38 RLCA          ;
 $FA39 ADD A,A       ;
 $FA3A INC B         ;
 $FA3B SBC A,L       ;
 $FA3C DEC BC        ;
 $FA3D ADC A,(HL)    ;
 $FA3E LD B,H        ;
 $FA3F CP A          ;
 $FA40 SBC A,L       ;
 $FA41 ADD A,(HL)    ;
 $FA42 SBC A,A       ;
 $FA43 ADC A,A       ;
 $FA44 RET           ;
 $FA45 SBC A,(HL)    ;
 $FA46 SBC A,(HL)    ;
 $FA47 EX AF,AF'     ;
 $FA48 LD B,(HL)     ;
 $FA49 ADD A,A       ;
 $FA4A SUB H         ;
 $FA4B LD C,C        ;
 $FA4C SUB E         ;
 $FA4D ADC A,D       ;
 $FA4E SUB D         ;
 $FA4F EX AF,AF'     ;
 $FA50 SUB C         ;
 $FA51 ADC A,D       ;
 $FA52 LD HL,$0058   ;
 $FA55 ADD HL,SP     ;
 $FA56 LD HL,($2403) ;
 $FA59 SCF           ;
 $FA5A LD E,$01      ;
 $FA5C JR $FA8B      ;
 $FA5E LD D,$03      ;
 $FA60 DJNZ $FA89    ;
 $FA62 LD (DE),A     ;
 $FA63 LD BC,$1D0C   ;
 $FA66 LD A,(BC)     ;
 $FA67 INC BC        ;
 $FA68 INC B         ;
 $FA69 INC BC        ;
 $FA6A LD B,$13      ;
 $FA6C INC B         ;
 $FA6D DEC B         ;
 $FA6E LD (BC),A     ;
 $FA6F RLCA          ;
 $FA70 RST $38       ;
 $FA71 LD H,$58      ;
 $FA73 AND A         ;
 $FA74 LD BC,$0302   ;
 $FA77 LD A,(BC)     ;
 $FA78 DEC B         ;
 $FA79 LD (BC),A     ;
 $FA7A RLCA          ;
 $FA7B RST $38       ;
 $FA7C INC H         ;
 $FA7D LD E,C        ;
 $FA7E LD B,B        ;
 $FA7F ADD HL,BC     ;
 $FA80 LD (BC),A     ;
 $FA81 DEC BC        ;
; This entry point is used by the routine at #R$E691.
*$FA82 LD C,$39      ;
 $FA84 EX AF,AF'     ;
 $FA85 INC BC        ;
 $FA86 NOP           ;
 $FA87 INC SP        ;
 $FA88 LD (BC),A     ;
*$FA89 LD SP,$2306   ;
 $FA8C NOP           ;
 $FA8D DEC H         ;
 $FA8E RST $38       ;
 $FA8F LD B,B        ;
 $FA90 LD E,D        ;
 $FA91 ADC A,H       ;
 $FA92 EX AF,AF'     ;
 $FA93 LD B,C        ;
 $FA94 LD A,L        ;
 $FA95 SUB C         ;
 $FA96 LD C,C        ;
 $FA97 EX AF,AF'     ;
 $FA98 INC A         ;
 $FA99 ADD A,D       ;
 $FA9A SUB B         ;
 $FA9B ADC A,C       ;
 $FA9C EX AF,AF'     ;
 $FA9D LD C,D        ;
 $FA9E LD D,A        ;
 $FA9F SBC A,C       ;
 $FAA0 LD C,L        ;
 $FAA1 EX AF,AF'     ;
 $FAA2 LD B,L        ;
 $FAA3 LD E,H        ;
 $FAA4 SUB B         ;
 $FAA5 ADC A,D       ;
 $FAA6 LD B,D        ;
 $FAA7 LD B,L        ;
 $FAA8 LD C,D        ;
 $FAA9 NOP           ;
 $FAAA EX AF,AF'     ;
 $FAAB LD A,A        ;
 $FAAC XOR A         ;
 $FAAD EI            ;
 $FAAE CP $FF        ;
 $FAB0 LD A,H        ;
 $FAB1 ADD A,A       ;
 $FAB2 JP NZ,$FEFE   ;
 $FAB5 CP $FE        ;
 $FAB7 CP $FE        ;
 $FAB9 LD ($0F58),HL ;
 $FABC RST $38       ;
 $FABD LD ($0C58),HL ;
 $FAC0 ADD HL,BC     ;
 $FAC1 LD B,$FF      ;
 $FAC3 LD ($0058),HL ;
 $FAC6 ADD HL,DE     ;
 $FAC7 RLCA          ;
 $FAC8 LD (BC),A     ;
 $FAC9 INC DE        ;
 $FACA LD (BC),A     ;
 $FACB ADD HL,BC     ;
 $FACC INC BC        ;
 $FACD LD (BC),A     ;
 $FACE RLCA          ;
 $FACF LD (BC),A     ;
 $FAD0 DEC B         ;
 $FAD1 LD (BC),A     ;
 $FAD2 LD BC,$020B   ;
 $FAD5 ADD HL,BC     ;
 $FAD6 INC BC        ;
 $FAD7 LD (BC),A     ;
 $FAD8 RLCA          ;
 $FAD9 LD (BC),A     ;
 $FADA DEC B         ;
 $FADB LD (BC),A     ;
 $FADC LD BC,$020B   ;
 $FADF ADD HL,BC     ;
 $FAE0 INC BC        ;
 $FAE1 LD (BC),A     ;
 $FAE2 RLCA          ;
 $FAE3 LD (BC),A     ;
 $FAE4 DEC B         ;
 $FAE5 LD (BC),A     ;
 $FAE6 LD BC,$0B06   ;
 $FAE9 INC B         ;
 $FAEA LD BC,$0502   ;
 $FAED RST $38       ;
 $FAEE EX AF,AF'     ;
 $FAEF LD A,A        ;
 $FAF0 ADD A,A       ;
 $FAF1 ADD A,H       ;
 $FAF2 LD C,$A4      ;
 $FAF4 LD ($1C96),HL ;
 $FAF7 ADD A,A       ;
 $FAF8 LD C,A        ;
 $FAF9 RST $38       ;
 $FAFA CP $AF        ;
 $FAFC LD D,L        ;
 $FAFD EX AF,AF'     ;
*$FAFE HALT          ;
 $FAFF SUB B         ;
 $FB00 OR (HL)       ;
 $FB01 LD A,D        ;
 $FB02 ADD A,A       ;
 $FB03 LD D,C        ;
 $FB04 RST $08       ;
 $FB05 LD H,L        ;
 $FB06 SBC A,B       ;
 $FB07 INC C         ;
 $FB08 ADD A,D       ;
 $FB09 LD D,B        ;
 $FB0A JP (HL)       ;
 $FB0B RST $30       ;
 $FB0C ADD A,D       ;
 $FB0D LD C,E        ;
 $FB0E EX DE,HL      ;
 $FB0F OR (HL)       ;
 $FB10 ADD A,(HL)    ;
 $FB11 XOR B         ;
 $FB12 SBC A,E       ;
 $FB13 INC C         ;
 $FB14 EX AF,AF'     ;
 $FB15 LD B,B        ;
 $FB16 LD D,(HL)     ;
 $FB17 POP HL        ;
 $FB18 JR NC,$FAB4   ;
 $FB1A LD C,L        ;
 $FB1B EX AF,AF'     ;
 $FB1C LD E,L        ;
 $FB1D LD A,A        ;
 $FB1E SUB D         ;
 $FB1F EX AF,AF'     ;
 $FB20 ADD A,D       ;
 $FB21 ADC A,B       ;
 $FB22 JP $8C1F      ;
 $FB25 RST $00       ;
 $FB26 PUSH BC       ;
 $FB27 AND D         ;
 $FB28 EX AF,AF'     ;
 $FB29 LD A,A        ;
 $FB2A LD C,B        ;
 $FB2B CP H          ;
 $FB2C JP PO,$7808   ;
 $FB2F LD C,B        ;
 $FB30 SBC A,L       ;
 $FB31 LD C,$9E      ;
 $FB33 LD C,(HL)     ;
 $FB34 SBC A,E       ;
 $FB35 LD C,L        ;
 $FB36 EX AF,AF'     ;
 $FB37 LD (HL),A     ;
 $FB38 LD D,H        ;
 $FB39 ADC A,(HL)    ;
 $FB3A JP Z,$CA8B    ;
 $FB3D LD B,B        ;
 $FB3E LD L,E        ;
 $FB3F LD D,L        ;
 $FB40 LD B,B        ;
 $FB41 LD L,E        ;
 $FB42 LD L,E        ;
 $FB43 LD B,B        ;
 $FB44 LD D,D        ;
 $FB45 LD C,E        ;
 $FB46 LD H,$59      ;
 $FB48 XOR B         ;
 $FB49 ADD HL,DE     ;
 $FB4A LD B,$23      ;
 $FB4C NOP           ;
 $FB4D LD HL,$08FF   ;
 $FB50 LD A,(HL)     ;
 $FB51 ADC A,B       ;
 $FB52 ADC A,H       ;
 $FB53 ADD A,L       ;
 $FB54 ADC A,L       ;
 $FB55 LD B,L        ;
 $FB56 LD B,L        ;
 $FB57 LD A,D        ;
 $FB58 ADC A,D       ;
 $FB59 DEC H         ;
 $FB5A LD E,C        ;
 $FB5B LD H,(HL)     ;
 $FB5C JR $FB7B      ;
 $FB5E LD (DE),A     ;
 $FB5F LD BC,$130C   ;
 $FB62 ADD HL,BC     ;
 $FB63 LD (BC),A     ;
 $FB64 INC B         ;
 $FB65 RLA           ;
 $FB66 LD E,$FF      ;
 $FB68 EX AF,AF'     ;
 $FB69 LD A,A        ;
 $FB6A LD E,A        ;
 $FB6B SBC A,H       ;
 $FB6C RST $08       ;
 $FB6D NOP           ;
 $FB6E EX AF,AF'     ;
 $FB6F LD A,A        ;
 $FB70 XOR A         ;
 $FB71 EI            ;
 $FB72 CP $FF        ;
 $FB74 LD A,H        ;
 $FB75 ADD A,A       ;
 $FB76 JP NZ,$FEFE   ;
 $FB79 CP $FE        ;
*$FB7B CP $FE        ;
 $FB7D EX AF,AF'     ;
 $FB7E NOP           ;
 $FB7F SUB H         ;
 $FB80 ADD A,D       ;
; This entry point is used by the routine at #R$E691.
*$FB81 LD A,B        ;
 $FB82 SBC A,B       ;
; This entry point is used by the routine at #R$E691.
*$FB83 INC C         ;
 $FB84 ADD A,B       ;
 $FB85 LD C,E        ;
 $FB86 SBC A,D       ;
 $FB87 INC C         ;
 $FB88 OR A          ;
 $FB89 LD E,C        ;
 $FB8A ADD A,A       ;
 $FB8B ADC A,H       ;
 $FB8C XOR H         ;
 $FB8D INC DE        ;
 $FB8E ADD A,A       ;
 $FB8F LD H,(HL)     ;
 $FB90 EX AF,AF'     ;
 $FB91 LD B,H        ;
 $FB92 LD A,C        ;
 $FB93 ADD A,H       ;
 $FB94 ADD HL,SP     ;
 $FB95 EX AF,AF'     ;
 $FB96 LD D,D        ;
 $FB97 ADD A,C       ;
 $FB98 PUSH HL       ;
 $FB99 OR H          ;
 $FB9A EX AF,AF'     ;
 $FB9B LD E,A        ;
 $FB9C LD A,A        ;
 $FB9D ADD A,C       ;
 $FB9E RRA           ;
 $FB9F EX AF,AF'     ;
 $FBA0 LD C,C        ;
 $FBA1 LD D,A        ;
 $FBA2 ADD A,B       ;
 $FBA3 DEC D         ;
 $FBA4 EX AF,AF'     ;
 $FBA5 LD D,C        ;
 $FBA6 LD E,A        ;
 $FBA7 SUB H         ;
 $FBA8 LD A,$84      ;
 $FBAA JP NC,$4908   ;
 $FBAD LD E,A        ;
 $FBAE ADD A,(HL)    ;
 $FBAF LD A,(HL)     ;
 $FBB0 ADD A,(HL)    ;
 $FBB1 LD C,E        ;
 $FBB2 EX AF,AF'     ;
 $FBB3 LD C,A        ;
 $FBB4 LD A,(HL)     ;
 $FBB5 ADC A,E       ;
 $FBB6 ADD A,L       ;
 $FBB7 SBC A,H       ;
 $FBB8 DEC BC        ;
 $FBB9 LD B,L        ;
 $FBBA LD C,H        ;
 $FBBB LD A,E        ;
 $FBBC EX AF,AF'     ;
 $FBBD LD A,A        ;
 $FBBE ADC A,B       ;
 $FBBF ADD A,(HL)    ;
 $FBC0 LD B,(HL)     ;
 $FBC1 RST $10       ;
 $FBC2 JR Z,$FB4B    ;
 $FBC4 LD C,E        ;
 $FBC5 SBC A,B       ;
 $FBC6 ADC A,(HL)    ;
 $FBC7 EX AF,AF'     ;
 $FBC8 LD (HL),C     ;
 $FBC9 LD C,A        ;
 $FBCA ADD A,H       ;
 $FBCB SUB (HL)      ;
 $FBCC LD B,B        ;
 $FBCD LD A,E        ;
 $FBCE LD L,D        ;
 $FBCF EX AF,AF'     ;
 $FBD0 LD H,B        ;
 $FBD1 LD A,B        ;
 $FBD2 ADD A,H       ;
 $FBD3 LD C,(HL)     ;
 $FBD4 ADD A,D       ;
 $FBD5 SUB B         ;
 $FBD6 EX AF,AF'     ;
 $FBD7 LD (HL),L     ;
 $FBD8 LD A,L        ;
 $FBD9 ADD A,H       ;
 $FBDA LD H,D        ;
 $FBDB ADD A,D       ;
 $FBDC AND E         ;
 $FBDD EX AF,AF'     ;
 $FBDE LD E,A        ;
 $FBDF LD H,L        ;
 $FBE0 ADC A,D       ;
 $FBE1 LD D,(HL)     ;
 $FBE2 XOR L         ;
 $FBE3 SUB L         ;
 $FBE4 ADD A,(HL)    ;
 $FBE5 RST $10       ;
 $FBE6 LD B,D        ;
 $FBE7 LD L,E        ;
 $FBE8 LD L,E        ;
 $FBE9 LD B,H        ;
 $FBEA LD ($265F),A  ;
 $FBED LD E,C        ;
 $FBEE ADC A,C       ;
 $FBEF DEC D         ;
 $FBF0 LD A,(BC)     ;
 $FBF1 RLA           ;
 $FBF2 INC B         ;
 $FBF3 LD DE,$1302   ;
 $FBF6 RST $38       ;
 $FBF7 JR NZ,$FC52   ;
 $FBF9 LD C,C        ;
 $FBFA DEC BC        ;
 $FBFB LD (BC),A     ;
 $FBFC DEC B         ;
 $FBFD LD (BC),A     ;
 $FBFE RRCA          ;
 $FBFF NOP           ;
 $FC00 LD BC,$0207   ;
 $FC03 INC BC        ;
 $FC04 LD (BC),A     ;
 $FC05 LD DE,$1B02   ;
 $FC08 NOP           ;
 $FC09 LD BC,$0603   ;
 $FC0C ADD HL,DE     ;
 $FC0D RST $38       ;
 $FC0E EX AF,AF'     ;
 $FC0F SCF           ;
 $FC10 LD A,B        ;
 $FC11 CALL PE,$25FA ;
 $FC14 LD E,B        ;
 $FC15 RRC D         ;
 $FC17 DEC HL        ;
 $FC18 INC B         ;
 $FC19 DEC H         ;
 $FC1A NOP           ;
 $FC1B LD B,$27      ;
; This entry point is used by the routine at #R$E691.
*$FC1D RST $38       ;
 $FC1E EX AF,AF'     ;
 $FC1F LD L,H        ;
 $FC20 LD D,B        ;
 $FC21 ADC A,$64     ;
 $FC23 RST $00       ;
 $FC24 JR NZ,$FC6C   ;
 $FC26 LD C,H        ;
 $FC27 LD D,E        ;
 $FC28 LD B,H        ;
 $FC29 LD E,D        ;
 $FC2A LD H,C        ;
 $FC2B EX AF,AF'     ;
 $FC2C NOP           ;
 $FC2D SUB L         ;
 $FC2E OR C          ;
 $FC2F SBC A,C       ;
 $FC30 JP M,$FAFE    ;
 $FC33 CP $82        ;
 $FC35 LD B,B        ;
 $FC36 LD B,L        ;
 $FC37 LD D,$7A      ;
 $FC39 NOP           ;
 $FC3A EX AF,AF'     ;
 $FC3B LD A,A        ;
 $FC3C SBC A,E       ;
 $FC3D EI            ;
 $FC3E CP $AF        ;
 $FC40 SUB L         ;
 $FC41 CP (HL)       ;
 $FC42 LD E,L        ;
 $FC43 ADD A,D       ;
 $FC44 LD E,(HL)     ;
 $FC45 EX AF,AF'     ;
 $FC46 LD C,D        ;
 $FC47 LD SP,$9085   ;
 $FC4A ADC A,(HL)    ;
*$FC4B LD H,A        ;
 $FC4C ADD A,L       ;
 $FC4D INC C         ;
 $FC4E ADD A,(HL)    ;
 $FC4F JP NC,$0008   ;
*$FC52 LD D,B        ;
 $FC53 RET C         ;
 $FC54 XOR $80       ;
 $FC56 RLCA          ;
 $FC57 XOR C         ;
 $FC58 SUB $84       ;
 $FC5A RRCA          ;
 $FC5B SUB (HL)      ;
 $FC5C EX AF,AF'     ;
 $FC5D ADD A,A       ;
 $FC5E RLCA          ;
 $FC5F SBC A,H       ;
 $FC60 ADC A,L       ;
 $FC61 XOR A         ;
 $FC62 SUB (HL)      ;
 $FC63 EX AF,AF'     ;
 $FC64 LD HL,$837E   ;
 $FC67 LD C,$A4      ;
 $FC69 RRCA          ;
 $FC6A CP A          ;
 $FC6B RST $18       ;
*$FC6C EX AF,AF'     ;
 $FC6D SCF           ;
 $FC6E LD L,A        ;
 $FC6F SUB D         ;
 $FC70 RLCA          ;
 $FC71 ADD A,E       ;
 $FC72 RLA           ;
 $FC73 ADD A,D       ;
 $FC74 SUB H         ;
 $FC75 AND B         ;
 $FC76 SUB D         ;
 $FC77 EX AF,AF'     ;
 $FC78 LD A,$6F      ;
 $FC7A SUB C         ;
 $FC7B RLCA          ;
 $FC7C ADD A,C       ;
 $FC7D RLCA          ;
 $FC7E ADC A,D       ;
 $FC7F ADD A,$83     ;
 $FC81 LD C,$AA      ;
 $FC83 LD D,H        ;
 $FC84 ADD A,D       ;
 $FC85 LD B,L        ;
 $FC86 CP E          ;
 $FC87 INC E         ;
 $FC88 EX AF,AF'     ;
 $FC89 LD (HL),A     ;
 $FC8A LD L,H        ;
 $FC8B ADC A,(HL)    ;
 $FC8C RST $00       ;
 $FC8D EX AF,AF'     ;
 $FC8E LD B,(HL)     ;
 $FC8F LD A,A        ;
 $FC90 ADD A,E       ;
 $FC91 LD B,$08      ;
 $FC93 LD A,(HL)     ;
 $FC94 LD A,D        ;
 $FC95 CP (HL)       ;
 $FC96 DEC DE        ;
 $FC97 ADD A,D       ;
 $FC98 CALL C,$0008  ;
 $FC9B LD H,B        ;
 $FC9C RET NZ        ;
 $FC9D JR NZ,$FCC0   ;
 $FC9F LD E,C        ;
 $FCA0 LD B,B        ;
 $FCA1 ADD HL,BC     ;
 $FCA2 LD (BC),A     ;
 $FCA3 RRCA          ;
 $FCA4 RST $38       ;
 $FCA5 INC H         ;
 $FCA6 LD E,C        ;
 $FCA7 ADD A,C       ;
 $FCA8 LD BC,$0702   ;
 $FCAB LD (BC),A     ;
 $FCAC ADD HL,SP     ;
 $FCAD NOP           ;
 $FCAE INC SP        ;
 $FCAF LD B,$07      ;
 $FCB1 LD SP,$08FF   ;
 $FCB4 NOP           ;
 $FCB5 SBC A,B       ;
 $FCB6 ADD A,B       ;
 $FCB7 LD C,D        ;
 $FCB8 ADC A,D       ;
 $FCB9 LD (DE),A     ;
 $FCBA ADD A,B       ;
 $FCBB LD E,B        ;
 $FCBC ADC A,D       ;
 $FCBD SBC A,A       ;
 $FCBE ADD A,E       ;
 $FCBF LD D,(HL)     ;
*$FCC0 ADC A,D       ;
 $FCC1 LD A,(BC)     ;
 $FCC2 ADD A,B       ;
 $FCC3 LD DE,$1D08   ;
 $FCC6 LD H,B        ;
 $FCC7 AND L         ;
 $FCC8 DJNZ $FC4B    ;
 $FCCA INC BC        ;
 $FCCB ADD A,E       ;
 $FCCC DEC B         ;
 $FCCD LD B,B        ;
 $FCCE LD HL,$0872   ;
 $FCD1 LD A,A        ;
 $FCD2 LD E,A        ;
 $FCD3 ADC A,(HL)    ;
 $FCD4 RST $00       ;
 $FCD5 LD HL,$6F59   ;
 $FCD8 INC D         ;
 $FCD9 INC BC        ;
 $FCDA LD B,$03      ;
 $FCDC NOP           ;
 $FCDD INC BC        ;
 $FCDE RST $38       ;
 $FCDF LD B,H        ;
 $FCE0 LD A,H        ;
 $FCE1 LD H,A        ;
 $FCE2 EX AF,AF'     ;
 $FCE3 LD A,A        ;
 $FCE4 LD (HL),$8F   ;
 $FCE6 ADD A,L       ;
 $FCE7 XOR $34       ;
 $FCE9 LD B,(HL)     ;
 $FCEA LD D,L        ;
 $FCEB LD A,($0800)  ;
 $FCEE LD A,A        ;
*$FCEF XOR A         ;
 $FCF0 EI            ;
 $FCF1 CP $FF        ;
 $FCF3 LD A,H        ;
 $FCF4 ADD A,A       ;
 $FCF5 JP NZ,$FEFE   ;
 $FCF8 CP $FE        ;
 $FCFA CP $FE        ;
 $FCFC EX AF,AF'     ;
; This entry point is used by the routine at #R$9921.
*$FCFD LD A,A        ;
 $FCFE LD H,D        ;
 $FCFF ADD A,(HL)    ;
 $FD00 LD A,(HL)     ;
 $FD01 ADD A,(HL)    ;
 $FD02 LD H,L        ;
 $FD03 EX AF,AF'     ;
 $FD04 LD A,A        ;
; This entry point is used by the routine at #R$F1C1.
*$FD05 LD L,B        ;
 $FD06 ADD A,(HL)    ;
 $FD07 CP L          ;
 $FD08 ADD A,(HL)    ;
 $FD09 ADD A,H       ;
 $FD0A ADD A,H       ;
 $FD0B LD D,C        ;
 $FD0C ADD A,(HL)    ;
 $FD0D NEG           ;
 $FD0F LD D,L        ;
 $FD10 CCF           ;
 $FD11 EX AF,AF'     ;
 $FD12 NOP           ;
 $FD13 CCF           ;
 $FD14 ADD A,B       ;
 $FD15 XOR B         ;
 $FD16 ADD A,H       ;
 $FD17 LD E,B        ;
 $FD18 CP C          ;
 $FD19 SBC A,(HL)    ;
 $FD1A SBC A,B       ;
 $FD1B ADC A,L       ;
 $FD1C ADC A,E       ;
 $FD1D INC B         ;
 $FD1E ADD A,D       ;
 $FD1F RET Z         ;
 $FD20 ADD A,B       ;
 $FD21 RST $08       ;
 $FD22 ADD A,C       ;
 $FD23 ADD A,D       ;
 $FD24 SBC A,D       ;
 $FD25 LD C,H        ;
 $FD26 SUB E         ;
 $FD27 ADC A,C       ;
 $FD28 ADD A,D       ;
 $FD29 RET Z         ;
 $FD2A ADD A,B       ;
 $FD2B ADC A,(HL)    ;
 $FD2C SUB L         ;
 $FD2D RLCA          ;
 $FD2E SBC A,H       ;
 $FD2F ADC A,$80     ;
 $FD31 LD C,B        ;
 $FD32 ADD A,D       ;
 $FD33 LD C,(HL)     ;
 $FD34 SBC A,A       ;
 $FD35 INC C         ;
 $FD36 XOR $F7       ;
 $FD38 SBC A,A       ;
 $FD39 ADC A,(HL)    ;
 $FD3A ADD A,B       ;
 $FD3B CP $80        ;
 $FD3D POP DE        ;
 $FD3E LD HL,$2C59   ;
 $FD41 RLA           ;
 $FD42 LD (BC),A     ;
 $FD43 DEC C         ;
 $FD44 RST $38       ;
 $FD45 LD B,C        ;
 $FD46 RLA           ;
 $FD47 LD H,D        ;
 $FD48 LD B,B        ;
 $FD49 LD E,C        ;
 $FD4A LD A,C        ;
 $FD4B LD B,H        ;
 $FD4C LD (DE),A     ;
 $FD4D LD D,D        ;
 $FD4E LD B,H        ;
 $FD4F INC A         ;
 $FD50 LD D,A        ;
 $FD51 EX AF,AF'     ;
 $FD52 NOP           ;
 $FD53 LD (HL),E     ;
 $FD54 ADC A,B       ;
 $FD55 LD C,$84      ;
 $FD57 LD C,A        ;
 $FD58 LD B,H        ;
 $FD59 DEC B         ;
 $FD5A HALT          ;
 $FD5B LD HL,$E158   ;
 $FD5E LD C,$03      ;
 $FD60 DJNZ $FD61    ;
 $FD62 EX AF,AF'     ;
 $FD63 RRA           ;
 $FD64 ADD A,B       ;
*$FD65 SBC A,H       ;
 $FD66 ADC A,(HL)    ;
 $FD67 ADD A,B       ;
 $FD68 LD B,(HL)     ;
 $FD69 ADD A,D       ;
 $FD6A LD C,B        ;
 $FD6B LD B,B        ;
 $FD6C JR $FCEF      ;
 $FD6E EX AF,AF'     ;
 $FD6F JR C,$FCF7    ;
 $FD71 SUB E         ;
 $FD72 JP Z,$8E80    ;
 $FD75 ADD A,H       ;
 $FD76 LD C,A        ;
 $FD77 ADD A,(HL)    ;
 $FD78 LD C,A        ;
 $FD79 AND D         ;
 $FD7A DJNZ $FDBC    ;
 $FD7C INC SP        ;
 $FD7D ADD A,L       ;
 $FD7E LD B,H        ;
 $FD7F DEC SP        ;
 $FD80 LD A,A        ;
 $FD81 LD HL,$C858   ;
 $FD84 RLCA          ;
; This entry point is used by the routine at #R$F1C1.
*$FD85 RST $38       ;
 $FD86 JR NZ,$FDE0   ;
 $FD88 ADD A,$03     ;
 $FD8A LD (BC),A     ;
 $FD8B DEC C         ;
 $FD8C RST $38       ;
 $FD8D JR NZ,$FDE7   ;
 $FD8F EX DE,HL      ;
 $FD90 INC BC        ;
 $FD91 LD (BC),A     ;
 $FD92 DEC B         ;
 $FD93 RST $38       ;
 $FD94 EX AF,AF'     ;
 $FD95 NOP           ;
 $FD96 ADC A,E       ;
 $FD97 ADC A,D       ;
 $FD98 CALL Z,$4F80  ;
 $FD9B SUB D         ;
*$FD9C LD A,(HL)     ;
 $FD9D ADD A,D       ;
 $FD9E LD H,D        ;
 $FD9F JR NZ,$FDF9   ;
 $FDA1 JP NZ,$FF05   ;
 $FDA4 LD B,L        ;
 $FDA5 LD L,B        ;
 $FDA6 SBC A,H       ;
 $FDA7 NOP           ;
 $FDA8 EX AF,AF'     ;
 $FDA9 LD A,A        ;
 $FDAA XOR A         ;
 $FDAB EI            ;
 $FDAC CP $FF        ;
 $FDAE DEC SP        ;
 $FDAF ADC A,A       ;
 $FDB0 INC BC        ;
 $FDB1 CP $FE        ;
 $FDB3 CP $FE        ;
 $FDB5 CP $FE        ;
 $FDB7 EX AF,AF'     ;
 $FDB8 LD B,$30      ;
 $FDBA AND L         ;
 $FDBB RRCA          ;
*$FDBC RET NC        ;
 $FDBD JP PE,$10A7   ;
 $FDC0 EX AF,AF'     ;
 $FDC1 SCF           ;
 $FDC2 JR NC,$FD65   ;
 $FDC4 RRCA          ;
 $FDC5 ADD A,B       ;
 $FDC6 LD C,C        ;
 $FDC7 XOR E         ;
 $FDC8 INC D         ;
 $FDC9 EX AF,AF'     ;
 $FDCA NOP           ;
 $FDCB LD C,H        ;
 $FDCC ADD A,D       ;
 $FDCD ADC A,L       ;
 $FDCE JP Z,$80A5    ;
 $FDD1 SUB D         ;
 $FDD2 ADD A,H       ;
 $FDD3 SUB E         ;
 $FDD4 ADC A,$A5     ;
 $FDD6 ADD A,(HL)    ;
 $FDD7 ADC A,L       ;
 $FDD8 JP M,$08FE    ;
 $FDDB LD B,A        ;
 $FDDC LD C,(HL)     ;
 $FDDD CP E          ;
 $FDDE SBC A,(HL)    ;
 $FDDF EX AF,AF'     ;
*$FDE0 LD E,B        ;
 $FDE1 JR NC,$FD9C   ;
 $FDE3 RST $18       ;
 $FDE4 ADD A,B       ;
 $FDE5 LD C,D        ;
 $FDE6 ADD A,D       ;
*$FDE7 SUB D         ;
 $FDE8 RET           ;
 $FDE9 AND A         ;
 $FDEA ADD A,B       ;
 $FDEB ADD A,(HL)    ;
 $FDEC LD B,B        ;
 $FDED LD A,B        ;
 $FDEE LD B,L        ;
 $FDEF LD B,B        ;
 $FDF0 LD B,H        ;
 $FDF1 LD B,L        ;
 $FDF2 EX AF,AF'     ;
 $FDF3 RRA           ;
 $FDF4 LD D,L        ;
 $FDF5 PUSH BC       ;
 $FDF6 AND C         ;
 $FDF7 JP NZ,$82E2   ;
 $FDFA LD E,$81      ;
 $FDFC LD C,$84      ;
 $FDFE RLA           ;
 $FDFF OR H          ;
 $FE00 IN A,($08)    ;
 $FE02 LD HL,$8078   ;
 $FE05 LD C,L        ;
 $FE06 ADC A,E       ;
 $FE07 RST $00       ;
 $FE08 LD B,D        ;
 $FE09 DEC HL        ;
 $FE0A LD A,D        ;
 $FE0B EX AF,AF'     ;
 $FE0C LD B,E        ;
 $FE0D LD A,B        ;
 $FE0E ADD A,B       ;
 $FE0F SUB H         ;
 $FE10 XOR A         ;
 $FE11 SUB $BA       ;
 $FE13 SBC A,(HL)    ;
 $FE14 LD B,D        ;
 $FE15 LD H,C        ;
 $FE16 LD L,L        ;
 $FE17 EX AF,AF'     ;
 $FE18 LD (HL),$87   ;
 $FE1A ADD A,A       ;
 $FE1B ADC A,C       ;
 $FE1C ADD A,D       ;
 $FE1D ADD A,H       ;
 $FE1E ADD A,B       ;
 $FE1F ADD A,H       ;
 $FE20 ADD A,L       ;
 $FE21 ADC A,D       ;
 $FE22 ADC A,H       ;
 $FE23 LD B,H        ;
 $FE24 ADD A,H       ;
 $FE25 LD B,L        ;
 $FE26 ADD A,C       ;
 $FE27 ADC A,E       ;
 $FE28 SUB D         ;
 $FE29 LD C,C        ;
 $FE2A ADD A,E       ;
 $FE2B ADC A,E       ;
 $FE2C ADD A,(HL)    ;
 $FE2D ADD A,(HL)    ;
 $FE2E LD B,B        ;
 $FE2F LD (HL),$80   ;
 $FE31 LD B,H        ;
 $FE32 LD (HL),$8F   ;
 $FE34 INC H         ;
 $FE35 LD E,C        ;
 $FE36 RET NZ        ;
 $FE37 ADD HL,BC     ;
 $FE38 LD (BC),A     ;
 $FE39 RRCA          ;
 $FE3A RST $38       ;
*$FE3B INC H         ;
 $FE3C LD E,C        ;
 $FE3D LD H,B        ;
 $FE3E ADD HL,BC     ;
 $FE3F NOP           ;
 $FE40 RRCA          ;
 $FE41 RST $38       ;
 $FE42 INC HL        ;
 $FE43 LD E,C        ;
 $FE44 INC HL        ;
 $FE45 DEC BC        ;
 $FE46 INC C         ;
 $FE47 ADD HL,SP     ;
 $FE48 LD A,(BC)     ;
 $FE49 DEC BC        ;
 $FE4A NOP           ;
 $FE4B DEC B         ;
 $FE4C NOP           ;
 $FE4D DEC BC        ;
 $FE4E NOP           ;
 $FE4F RLA           ;
 $FE50 LD (BC),A     ;
 $FE51 RRCA          ;
 $FE52 LD B,$05      ;
*$FE54 NOP           ;
 $FE55 RLCA          ;
 $FE56 RST $38       ;
 $FE57 LD ($C658),HL ;
 $FE5A DEC C         ;
 $FE5B LD A,(BC)     ;
 $FE5C DEC C         ;
 $FE5D LD D,$27      ;
 $FE5F INC B         ;
 $FE60 LD DE,$1314   ;
 $FE63 LD C,$21      ;
 $FE65 LD (BC),A     ;
 $FE66 DEC BC        ;
 $FE67 LD B,$13      ;
 $FE69 DEC E         ;
 $FE6A INC C         ;
 $FE6B RRA           ;
 $FE6C INC B         ;
 $FE6D ADD HL,BC     ;
 $FE6E LD (BC),A     ;
 $FE6F RRCA          ;
 $FE70 RST $38       ;
 $FE71 LD HL,$8F58   ;
 $FE74 DEC SP        ;
 $FE75 INC C         ;
 $FE76 ADD HL,SP     ;
 $FE77 LD A,(BC)     ;
 $FE78 SCF           ;
 $FE79 INC B         ;
 $FE7A LD SP,$3302   ;
 $FE7D RST $38       ;
 $FE7E LD B,A        ;
 $FE7F CPL           ;
 $FE80 LD D,C        ;
 $FE81 NOP           ;
 $FE82 EX AF,AF'     ;
 $FE83 LD A,A        ;
 $FE84 ADD A,L       ;
 $FE85 EI            ;
 $FE86 CP $AF        ;
 $FE88 LD D,L        ;
 $FE89 EX AF,AF'     ;
*$FE8A JR NZ,$FE3B   ;
 $FE8C SUB D         ;
 $FE8D LD A,(HL)     ;
 $FE8E ADC A,D       ;
 $FE8F RLCA          ;
 $FE90 ADD A,A       ;
 $FE91 RET C         ;
 $FE92 ADD A,A       ;
 $FE93 LD E,B        ;
 $FE94 SUB B         ;
 $FE95 LD D,C        ;
 $FE96 ADD A,D       ;
 $FE97 SUB B         ;
 $FE98 CP IYl        ;
 $FE9A ADD A,(HL)    ;
 $FE9B LD C,(HL)     ;
 $FE9C RST $38       ;
 $FE9D CP $8B        ;
 $FE9F ADD A,$83     ;
 $FEA1 DEC D         ;
 $FEA2 EX AF,AF'     ;
 $FEA3 LD A,A        ;
 $FEA4 LD A,A        ;
 $FEA5 ADC A,H       ;
 $FEA6 ADD A,(HL)    ;
 $FEA7 EX AF,AF'     ;
 $FEA8 LD L,H        ;
 $FEA9 XOR B         ;
 $FEAA ADC A,E       ;
 $FEAB SBC A,E       ;
 $FEAC ADD A,E       ;
 $FEAD OUT ($84),A   ;
 $FEAF ADC A,B       ;
 $FEB0 CALL $0824    ;
 $FEB3 LD D,A        ;
 $FEB4 LD A,C        ;
 $FEB5 SUB B         ;
 $FEB6 LD C,L        ;
 $FEB7 CP C          ;
 $FEB8 RST $18       ;
 $FEB9 EX AF,AF'     ;
 $FEBA LD L,C        ;
 $FEBB LD H,E        ;
 $FEBC ADC A,(HL)    ;
 $FEBD CP $8E        ;
 $FEBF EX DE,HL      ;
 $FEC0 EX AF,AF'     ;
 $FEC1 NOP           ;
 $FEC2 LD A,A        ;
 $FEC3 JP NZ,$F31F   ;
 $FEC6 JP M,$7E88    ;
 $FEC9 AND L         ;
 $FECA LD D,E        ;
 $FECB ADD A,H       ;
 $FECC LD D,H        ;
 $FECD ADC A,L       ;
 $FECE LD A,(BC)     ;
 $FECF PUSH AF       ;
 $FED0 JR C,$FEDA    ;
 $FED2 JR NZ,$FE54   ;
 $FED4 SUB C         ;
 $FED5 RLCA          ;
 $FED6 JP Z,$08A6    ;
 $FED9 JR NZ,$FF46   ;
 $FEDB ADC A,D       ;
 $FEDC EXX           ;
 $FEDD ADD A,B       ;
 $FEDE ADC A,$08     ;
 $FEE0 LD E,A        ;
 $FEE1 LD C,(HL)     ;
 $FEE2 SBC A,A       ;
 $FEE3 ADC A,L       ;
 $FEE4 CP $FE        ;
 $FEE6 ADD A,L       ;
 $FEE7 JP $2108      ;
 $FEEA HALT          ;
 $FEEB ADC A,B       ;
 $FEEC LD D,H        ;
 $FEED ADC A,D       ;
 $FEEE DJNZ $FE8A    ;
 $FEF0 LD C,L        ;
 $FEF1 LD B,A        ;
 $FEF2 DEC A         ;
 $FEF3 XOR A         ;
 $FEF4 LD B,D        ;
 $FEF5 DEC C         ;
 $FEF6 LD (HL),C     ;
 $FEF7 LD B,D        ;
 $FEF8 LD D,C        ;
 $FEF9 LD (HL),C     ;
 $FEFA LD B,D        ;
 $FEFB LD L,L        ;
 $FEFC LD (HL),C     ;
 $FEFD LD B,C        ;
*$FEFE LD E,A        ;
 $FEFF ADD A,B       ;
; This entry point is used by the routine at #R$E691.
*$FF00 LD B,C        ;
 $FF01 LD L,A        ;
 $FF02 ADD A,B       ;
 $FF03 LD B,H        ;
 $FF04 LD E,B        ;
*$FF05 LD B,H        ;
 $FF06 INC HL        ;
 $FF07 LD E,C        ;
 $FF08 AND H         ;
 $FF09 ADD HL,DE     ;
 $FF0A NOP           ;
 $FF0B DEC DE        ;
 $FF0C INC D         ;
 $FF0D DEC C         ;
 $FF0E LD (BC),A     ;
 $FF0F DEC BC        ;
 $FF10 LD C,$15      ;
 $FF12 EX AF,AF'     ;
 $FF13 INC DE        ;
 $FF14 LD B,$0D      ;
 $FF16 NOP           ;
 $FF17 RRCA          ;
 $FF18 RST $38       ;
 $FF19 LD H,$58      ;
 $FF1B EX AF,AF'     ;
 $FF1C LD (DE),A     ;
 $FF1D RLCA          ;
 $FF1E INC D         ;
 $FF1F LD (DE),A     ;
 $FF20 RLCA          ;
 $FF21 DJNZ $FF39    ;
 $FF23 RLCA          ;
 $FF24 INC D         ;
 $FF25 LD D,$07      ;
 $FF27 INC D         ;
 $FF28 LD D,$FF      ;
 $FF2A INC H         ;
 $FF2B LD E,C        ;
 $FF2C RST $28       ;
 $FF2D DEC SP        ;
 $FF2E DJNZ $FF39    ;
 $FF30 LD (BC),A     ;
 $FF31 RLCA          ;
 $FF32 LD (BC),A     ;
 $FF33 DEC B         ;
 $FF34 LD (BC),A     ;
 $FF35 RLCA          ;
 $FF36 LD (BC),A     ;
 $FF37 DEC (HL)      ;
 $FF38 DJNZ $FF45    ;
 $FF3A LD C,$05      ;
 $FF3C EX AF,AF'     ;
 $FF3D INC BC        ;
 $FF3E LD A,(BC)     ;
 $FF3F RST $38       ;
 $FF40 NOP           ;
 $FF41 RST $38       ;
 $FF42 LD B,$00      ;
 $FF44 AND A         ;
*$FF45 SBC HL,BC     ;
 $FF47 EX AF,AF'     ;
 $FF48 LD L,$9F      ;
 $FF4A SUB B         ;
 $FF4B RES 0,A       ;
 $FF4D RET NC        ;
 $FF4E EX AF,AF'     ;
 $FF4F CCF           ;
 $FF50 LD C,B        ;
 $FF51 POP DE        ;
 $FF52 DAA           ;
 $FF53 ADD A,B       ;
 $FF54 RLCA          ;
 $FF55 SUB B         ;
 $FF56 RLCA          ;
 $FF57 ADD A,D       ;
 $FF58 RLCA          ;
 $FF59 SET 4,A       ;
 $FF5B EX AF,AF'     ;
 $FF5C LD E,A        ;
 $FF5D LD C,B        ;
 $FF5E CALL $8564    ;
 $FF61 LD C,L        ;
 $FF62 ADD A,H       ;
 $FF63 ADC A,L       ;
 $FF64 ADD A,(HL)    ;
 $FF65 ADC A,H       ;
 $FF66 ADD A,A       ;
 $FF67 LD C,D        ;
 $FF68 EX AF,AF'     ;
 $FF69 LD D,A        ;
 $FF6A LD L,B        ;
 $FF6B XOR (HL)      ;
 $FF6C RST $10       ;
 $FF6D LD B,B        ;
 $FF6E LD D,B        ;
 $FF6F LD L,A        ;
 $FF70 EX AF,AF'     ;
 $FF71 LD B,B        ;
 $FF72 XOR A         ;
 $FF73 CP E          ;
 $FF74 RST $18       ;
 $FF75 JP PE,$08F7   ;
; This entry point is used by the routine at #R$DC6C.
*$FF78 LD D,A        ;
 $FF79 XOR A         ;
 $FF7A CP A          ;
 $FF7B DEC E         ;
 $FF7C AND H         ;
 $FF7D SUB D         ;
 $FF7E CP C          ;
 $FF7F RST $18       ;
 $FF80 EX AF,AF'     ;
 $FF81 INC E         ;
 $FF82 LD A,E        ;
 $FF83 AND B         ;
 $FF84 LD D,C        ;
 $FF85 EX AF,AF'     ;
 $FF86 LD ($906E),HL ;
 $FF89 RRC B         ;
 $FF8B DEC DE        ;
 $FF8C LD E,D        ;
 $FF8D AND B         ;
 $FF8E OUT ($08),A   ;
 $FF90 LD D,E        ;
 $FF91 ADD A,D       ;
 $FF92 XOR B         ;
 $FF93 INC D         ;
 $FF94 EX AF,AF'     ;
 $FF95 LD H,H        ;
 $FF96 LD L,A        ;
 $FF97 SUB B         ;
 $FF98 ADC A,D       ;
 $FF99 EX AF,AF'     ;
 $FF9A LD H,D        ;
 $FF9B LD H,H        ;
 $FF9C AND B         ;
 $FF9D OUT ($08),A   ;
 $FF9F ADD HL,HL     ;
 $FFA0 LD E,D        ;
 $FFA1 SUB A         ;
 $FFA2 ADC A,D       ;
 $FFA3 EX AF,AF'     ;
 $FFA4 DEFB $20,$74  ;
 $FFA6 SUB A         ;
 $FFA7 EX AF,AF'     ;
 $FFA8 EX AF,AF'     ;
 $FFA9 LD H,D        ;
 $FFAA LD A,A        ;
 $FFAB SUB A         ;
 $FFAC EX AF,AF'     ;
 $FFAD EX AF,AF'     ;
 $FFAE LD L,A        ;
 $FFAF LD H,E        ;
 $FFB0 SUB A         ;
 $FFB1 EX AF,AF'     ;
 $FFB2 EX AF,AF'     ;
 $FFB3 LD (HL),B     ;
 $FFB4 ADC A,B       ;
 $FFB5 CALL C,$206D  ;
 $FFB8 LD E,C        ;
 $FFB9 XOR A         ;
 $FFBA RRA           ;
 $FFBB LD (BC),A     ;
 $FFBC DEC E         ;
 $FFBD LD (BC),A     ;
 $FFBE DEC SP        ;
 $FFBF NOP           ;
 $FFC0 LD DE,$1700   ;
 $FFC3 RST $38       ;
 $FFC4 EX AF,AF'     ;
 $FFC5 LD SP,$858F   ;
 $FFC8 RET NC        ;
 $FFC9 ADD A,B       ;
 $FFCA LD B,$83      ;
 $FFCC EX AF,AF'     ;
 $FFCD ADD A,A       ;
 $FFCE ADC A,(HL)    ;
 $FFCF LD B,B        ;
 $FFD0 LD C,B        ;
 $FFD1 SBC A,C       ;
 $FFD2 EX AF,AF'     ;
 $FFD3 LD H,A        ;
 $FFD4 LD D,C        ;
 $FFD5 SUB B         ;
 $FFD6 ADC A,D       ;
 $FFD7 LD H,$58      ;
 $FFD9 LD B,(HL)     ;
 $FFDA LD B,$FF      ;
 $FFDC LD ($2859),HL ;
 $FFDF DEC B         ;
 $FFE0 LD A,(BC)     ;
 $FFE1 RLCA          ;
 $FFE2 INC B         ;
 $FFE3 LD BC,$FF06   ;
 $FFE6 INC H         ;
 $FFE7 LD E,B        ;
 $FFE8 ADD A,L       ;
 $FFE9 DEC B         ;
 $FFEA INC BC        ;
 $FFEB LD HL,($44FF) ;
 $FFEE INC SP        ;
 $FFEF AND C         ;
 $FFF0 EX AF,AF'     ;
 $FFF1 ADD HL,BC     ;
 $FFF2 ADC A,B       ;
 $FFF3 RET PE        ;
 $FFF4 IN A,($08)    ;
 $FFF6 LD DE,$A064   ;
 $FFF9 DEFB $10,$08  ;
 $FFFB NOP           ;
 $FFFC ADC A,A       ;
; This entry point is used by the routines at #R$DC6C and #R$F1C1.
*$FFFD CP B          ;
 $FFFE DEC DE        ;
 $FFFF NOP           ;
